package Haskell;
import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;

init with {:

:};
parser code
{:
// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}
:}

action code
{:
:}

terminal String succ,decc,pot,sqrt,mod,dollar,id,numero,cadena,llaveA,porcentaje,
llaveC,igual,parentesisA,parentesisC,coma,mas,menos,por,div,mayor,menor,mayorIgual,
menorIgual,diferente,or,and,not,puntoComa,corcheteA,corcheteC,posicion,salto,
dosPuntos,verdadero,falso,igualDoble,decimal,end,let,calcular,asc,desc,caracter,
si,sino,interrumpir,caso,sum,product,revers,impr,par,length,entonces,max,min,
concatenar,ERROR;


non terminal Caracter INICIO,OP,E,INSTRUCCION,INSTRUCCIONES,LISTA,ELEMENTO,
CALCULAR,MATRIZ,EXTRAS,OPERACION_LISTA,SWITCH,IF,FUNCIONES,FUNCION,PARAMETRO,
NOMBRE_OP,POSICION,CASO,LLAMADA,VALOR_PUNTUAL,SALTOS;

precedence left mas, menos;
precedence left por, div;
precedence left or,and,not;
precedence left mayor,menor,mayorIgual,menorIgual;
precedence left igual,diferente,igualDoble;
precedence left mod,concatenar;
precedence right pot;
precedence right sqrt;
precedence left sino,dosPuntos,posicion,coma,salto;
precedence right caso;

start with INICIO;

INICIO::=FUNCIONES;

FUNCIONES::= FUNCIONES FUNCION
|FUNCION;

FUNCION::= id PARAMETRO igual INSTRUCCIONES end
|id igual INSTRUCCIONES end
|SALTOS;

PARAMETRO::= PARAMETRO coma id
|id;

INSTRUCCIONES::=INSTRUCCIONES INSTRUCCION
|INSTRUCCION;

INSTRUCCION::=SWITCH
|IF
|OP
|LISTA
|SALTOS;

LISTA::= let id igual MATRIZ 
|let id igual ELEMENTO ;

MATRIZ::=MATRIZ coma corcheteA ELEMENTO corcheteC
|corcheteA ELEMENTO corcheteC
|corcheteA MATRIZ corcheteC
|corcheteA corcheteC;

ELEMENTO::= ELEMENTO coma ELEMENTO
|OP;

CALCULAR::= dollar calcular OP dollar;

OPERACION_LISTA::=dollar NOMBRE_OP MATRIZ dollar
|dollar NOMBRE_OP OP dollar
|dollar id POSICION dollar;

NOMBRE_OP ::= sum
|product
|revers
|impr
|asc
|desc
|par
|length;

POSICION::=POSICION posicion OP
|posicion OP;

IF::= si OP entonces salto INSTRUCCIONES sino salto INSTRUCCIONES salto end;

SWITCH::= caso CALCULAR  CASO salto end
|caso id CASO salto end;

CASO::=CASO salto VALOR_PUNTUAL dosPuntos INSTRUCCIONES puntoComa
|salto VALOR_PUNTUAL dosPuntos INSTRUCCIONES puntoComa;

VALOR_PUNTUAL::=id
|numero;

LLAMADA::= dollar id llaveA ELEMENTO llaveC dollar;

SALTOS::= SALTOS salto
|salto;


OP::=E:a{:
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto;
:};

E::=parentesisA E:a parentesisC{:
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  "(" + a.texto + ")";
:}
|E:a mas E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "+" + b.texto;
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Double.parseDouble(a.valor) + Double.parseDouble(b.valor);
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (+) "+e);
    }
:}
|E:a menos E:b{:
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "-" + b.texto;
    try{
       // System.out.println("Menos ="+(a.valor)+","+(b.valor));
        RESULT.val = Double.parseDouble(a.valor) - Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (-) "+e);
    }
 :}
|E:a por E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "*" + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) * Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (*) "+e);
    }
:}
|E:a div E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " / " + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) / Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (/) "+e);
    }
:}
|E:a mayor E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " > " + b.texto;
    try{
       if( Double.parseDouble(a.valor) > Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>) "+e);
    }
:}
|E:a menor E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " < " + b.texto;
    try{
       if( Double.parseDouble(a.valor) < Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<) "+e);
    }
:}
|E:a mayorIgual E:b{:
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " >= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) >= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>=) "+e);
    }
 :}
|E:a menorIgual E:b{: 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " <= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) <= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<=) "+e);
    }
:}
|E:a igual E:b{: 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " = " + b.texto;
:}
|E:a igualDoble E:b{:
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " == " + b.texto;
 :}
|E:a diferente E:b{: 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " != " + b.texto;
:}
|verdadero:t{:
    RESULT= new Caracter();
    RESULT.valor = "true";
    RESULT.cadena = true;
    RESULT.texto = "true";
 :}
|falso:f{:
    RESULT = new Caracter();
    RESULT.valor = "false";
    RESULT.cadena = true;
    RESULT.texto =  "false";
 :}
|E:a or E:b{:
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " || " + b.texto +")";
:}
|E:a and E:b{:
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " %% " + b.texto +")";
 :}
|not E:b{: 
    RESULT = new Caracter();
    RESULT.valor = "a";
    RESULT.texto = "! " + b.texto;
:}
|E:a mod E:b{:
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }
:}
|E:a sqrt E:b{:
    RESULT = new Caracter();
    RESULT.texto = "raiz (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            //RESULT.val = Metodo_Funcion.raiz(Double.parseDouble(a.valor),Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (r) "+e);
    }
:}
|E:a pot E:b{:
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }
:}
|menos E{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";
:}
|cadena:n{:
    RESULT = new Caracter();
    RESULT.valor = n.replace("\"","");
    RESULT.texto = n;
:}
|caracter:n{:
    RESULT = new Caracter();
    RESULT.valor = n.replace("'","");
    RESULT.cadena = true;
    RESULT.texto = n;
:}
|numero:n{:
    RESULT = new Caracter();
    RESULT.valor = n;
    RESULT.texto = n;
:}
|id:i{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = i;
:}
|CALCULAR{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";
:}
|EXTRAS{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";
:}
|LLAMADA{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";
:}
|OPERACION_LISTA{:
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";
:};


EXTRAS::= dollar succ E dollar
|dollar decc E dollar
|dollar succ porcentaje dollar
|dollar decc porcentaje dollar
|dollar min corcheteA ELEMENTO corcheteC dollar
|dollar min ELEMENTO dollar
|dollar max corcheteA ELEMENTO corcheteC dollar
|dollar max ELEMENTO dollar
|E concatenar E;




