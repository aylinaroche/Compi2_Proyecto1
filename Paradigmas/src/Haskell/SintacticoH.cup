package Haskell;
import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import Haskell.Ejecutar.Nodo;

init with {:

:};
parser code
{:
// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}
:}

action code
{:
:}

terminal String succ,decc,pot,sqrt,mod,dollar,id,numero,cadena,llaveA,porcentaje,
llaveC,igual,parentesisA,parentesisC,coma,mas,menos,por,div,mayor,menor,mayorIgual,
menorIgual,diferente,or,and,not,puntoComa,corcheteA,corcheteC,posicion,salto,
dosPuntos,verdadero,falso,igualDoble,decimal,end,let,calcular,asc,desc,caracter,
si,sino,interrumpir,caso,sum,product,revers,impr,par,length,entonces,max,min,
concatenar,ERROR;


non terminal Caracter INICIO,OP,E,INSTRUCCION,INSTRUCCIONES,LISTA,ELEMENTO,
CALCULAR,MATRIZ,EXTRAS,OPERACION_LISTA,SWITCH,IF,FUNCIONES,FUNCION,PARAMETRO,
NOMBRE_OP,POSICION,CASO,LLAMADA,VALOR_PUNTUAL,SALTOS;

precedence left mas, menos;
precedence left por, div;
precedence left or,and,not;
precedence left mayor,menor,mayorIgual,menorIgual;
precedence left igual,diferente,igualDoble;
precedence left mod,concatenar;
precedence right pot;
precedence right sqrt;
precedence left sino,dosPuntos,posicion,coma,salto;
precedence right caso;

start with INICIO;

INICIO::=FUNCIONES;


FUNCIONES::= FUNCIONES:m FUNCION:n{:
    RESULT = new Caracter();
    //RESULT.texto = m.texto ;
:}
|FUNCION:n{:
    RESULT = new Caracter();
    Metodo_FuncionHK.parametros.clear();
:};

FUNCION::= id:i PARAMETRO:p igual INSTRUCCIONES:m end{:
    RESULT = new Caracter();
    Metodo_FuncionHK.agregarMF(i,m.nodo,Metodo_FuncionHK.parametros);
    Metodo_FuncionHK.parametros.clear();
:}
|id:i igual INSTRUCCIONES:m end{:
    RESULT = new Caracter();
    Metodo_FuncionHK.agregarMF(i,m.nodo,Metodo_FuncionHK.parametros);
    Metodo_FuncionHK.parametros.clear();
:}
|SALTOS:n{:
    RESULT = new Caracter();
    //RESULT.texto = n.texto;
:};


PARAMETRO::= PARAMETRO:p coma id:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("PARAMETRO");
    E.insertar(p.nodo);  E.insertar(new Nodo(",")); E.insertar(new Nodo(n));
    RESULT.nodo = E;
    Metodo_FuncionHK.parametros.add(n);
:}
|id:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("PARAMETRO");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
    Metodo_FuncionHK.parametros.add(n);
:};


INSTRUCCIONES::=INSTRUCCIONES:m INSTRUCCION:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(m.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|INSTRUCCION:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


INSTRUCCION::=SWITCH:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|IF:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|OP:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|LISTA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|SALTOS:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


LISTA::= let id:i igual MATRIZ:m{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:}
|let id:i igual ELEMENTO:m{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:}
|dollar let id:i igual MATRIZ:m dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:}
|dollar let id:i igual ELEMENTO:m dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:};


MATRIZ::=MATRIZ:m coma corcheteA ELEMENTO:n corcheteC{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(m.nodo);  E.insertar(new Nodo(",")); E.insertar(new Nodo("[")); E.insertar(n.nodo); E.insertar(new Nodo("]"));
    RESULT.nodo = E;
:}
|corcheteA ELEMENTO:m corcheteC{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(new Nodo("[")); E.insertar(m.nodo); E.insertar(new Nodo("]"));
    RESULT.nodo = E;
:}
|corcheteA MATRIZ:m corcheteC{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(new Nodo("[")); E.insertar(m.nodo); E.insertar(new Nodo("]"));
    RESULT.nodo = E;
:}
|corcheteA corcheteC{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(new Nodo("["));E.insertar(new Nodo("]"));
    RESULT.nodo = E;
:};


ELEMENTO::= ELEMENTO:a coma ELEMENTO:b{:
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(a.nodo);  E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|OP:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


CALCULAR::= dollar calcular OP:n dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("CALCULAR");
    E.insertar(new Nodo("Calcular")); E.insertar(n.nodo); 
    RESULT.nodo = E;
:}
|calcular OP:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("CALCULAR");
    E.insertar(new Nodo("Calcular")); E.insertar(n.nodo);
    RESULT.nodo = E;
:};


OPERACION_LISTA::=dollar NOMBRE_OP:n MATRIZ:m dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(n.nodo); E.insertar(m.nodo); 
    RESULT.nodo = E;
:}
|dollar NOMBRE_OP:n OP:o dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(n.nodo); E.insertar(o.nodo); 
    RESULT.nodo = E;
:}
|dollar id:i POSICION:p dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(new Nodo(i)); E.insertar(p.nodo); 
    RESULT.nodo = E;
:};


NOMBRE_OP ::= sum:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|product:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|revers:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|impr:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|asc:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|desc:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|par:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|length:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:};


POSICION::=POSICION:p posicion OP:o{:
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(p.nodo); E.insertar(new Nodo("!!"));E.insertar(o.nodo);
    RESULT.nodo = E;
:}
|posicion OP:o{:
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(new Nodo("!!")); E.insertar(o.nodo);
    RESULT.nodo = E;
:};


IF::= si OP:o entonces salto INSTRUCCIONES:n sino salto INSTRUCCIONES:m salto end{:
    RESULT = new Caracter();
    Nodo E = new Nodo("IF");
    E.insertar(new Nodo("si")); E.insertar(o.nodo); E.insertar(new Nodo("then")); E.insertar(n.nodo); E.insertar(new Nodo("sino"));
    E.insertar(m.nodo); E.insertar(new Nodo("end"));
    RESULT.nodo = E;
:};


SWITCH::= caso OP:c CASO:s salto end{:
    RESULT = new Caracter();
    Nodo E = new Nodo("SWITCH");
    E.insertar(new Nodo("case")); E.insertar(c.nodo);E.insertar(s.nodo);E.insertar(new Nodo("end"));
    RESULT.nodo = E;
:};


CASO::=CASO:c salto VALOR_PUNTUAL:v dosPuntos INSTRUCCIONES:n puntoComa{:
    RESULT = new Caracter();
    Nodo E = new Nodo("CASO");
    E.insertar(c.nodo); E.insertar(v.nodo); E.insertar(new Nodo(":")); E.insertar(n.nodo); E.insertar(new Nodo(";"));
    RESULT.nodo = E;
:}
|salto VALOR_PUNTUAL:v dosPuntos INSTRUCCIONES:n puntoComa{:
    RESULT = new Caracter();
    Nodo E = new Nodo("CASO");
    E.insertar(v.nodo); E.insertar(new Nodo(":")); E.insertar(n.nodo); E.insertar(new Nodo(";"));
    RESULT.nodo = E;
:};

VALOR_PUNTUAL::=id:n{:
    RESULT = new Caracter();
    Nodo VALOR_PUNTUAL = new Nodo("VALOR_PUNTUAL");
    VALOR_PUNTUAL.insertar(new Nodo(n,"id"));
    RESULT.nodo = VALOR_PUNTUAL;
:}
|numero:n{:
    RESULT = new Caracter();
    Nodo VALOR_PUNTUAL = new Nodo("VALOR_PUNTUAL");
    VALOR_PUNTUAL.insertar(new Nodo(n,"numero"));
    RESULT.nodo = VALOR_PUNTUAL;
:};


LLAMADA::= dollar id:i llaveA ELEMENTO:n llaveC dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LLAMADA");
     E.insertar(new Nodo(i)); E.insertar(new Nodo("{")); E.insertar(n.nodo); E.insertar(new Nodo("}"));
    RESULT.nodo = E;
:};

SALTOS::= SALTOS:s salto{:
    RESULT = new Caracter();
   // RESULT.texto = s.texto +"\n";
:}
|salto{:
    RESULT = new Caracter();
    //RESULT.texto = "\n";
:};


OP::=E:a{:
    Nodo OP = new Nodo("OP");
    RESULT = new Caracter();
    OP.insertar(a.nodo);
    RESULT.nodo = OP;
:};

E::=parentesisA E:a parentesisC{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("(")); E.insertar(a.nodo); E.insertar(new Nodo(")"));
    RESULT.nodo = E;
:}
|E:a mas E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("+")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a menos E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a por E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("*")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a div E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("/")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a mayor E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a menor E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a mayorIgual E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a menorIgual E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a igualDoble E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a diferente E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|verdadero:t{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("true","cadena"));
    RESULT.nodo = E;
 :}
|falso:f{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("false","cadena"));
    RESULT.nodo = E;
 :}
|E:a or E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a and E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("%%")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|not E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("!")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a mod E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'mod'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a sqrt E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'sqrt'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a pot E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'pot'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|menos E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|cadena:n{:
    RESULT = new Caracter();
    n = n.replace("\"","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"cadena"));
    RESULT.nodo = E;
:}
|caracter:n{:
    RESULT = new Caracter();
    n = n.replace("'","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"caracter"));
    RESULT.nodo = E;
:}
|numero:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"numero"));
    RESULT.nodo = E;
:}
|id:i{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(i,"id"));
    RESULT.nodo = E;
:}
|CALCULAR:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|EXTRAS:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|LLAMADA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|OPERACION_LISTA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|porcentaje {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo("%"));
    RESULT.nodo = E;
:};


EXTRAS::= dollar succ E:e dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Succ")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
|dollar decc E:e dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Decc")); EXTRAS.insertar(e.nodo); 
    RESULT.nodo = EXTRAS;
:}
|dollar min corcheteA ELEMENTO:e corcheteC dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Min")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;
:}
|dollar min ELEMENTO:e dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo); 
    RESULT.nodo = EXTRAS;
:}
|dollar max corcheteA ELEMENTO:e corcheteC dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;
:}
|dollar max ELEMENTO:e dollar{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
     EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
|E:a concatenar E:b{:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar((a.nodo)); EXTRAS.insertar(new Nodo("++")); EXTRAS.insertar(b.nodo);
    RESULT.nodo = EXTRAS;
:};




