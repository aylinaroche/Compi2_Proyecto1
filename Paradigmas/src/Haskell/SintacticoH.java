
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Haskell;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoH extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\007\000\002\020\006" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\006\004\000\002\006\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\007\006\000\002\007\006\000\002\012\007" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\023\004\000\002\016\014\000\002\015\007\000\002\015" +
    "\007\000\002\024\010\000\002\024\007\000\002\026\003" +
    "\000\002\026\003\000\002\025\010\000\002\027\004\000" +
    "\002\027\003\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\010" +
    "\000\002\013\006\000\002\013\010\000\002\013\006\000" +
    "\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\012\011\044\010\001\002\000\010\002" +
    "\ufffe\012\ufffe\044\ufffe\001\002\000\010\002\ufffb\012\ufffb" +
    "\044\260\001\002\000\010\002\000\012\011\044\010\001" +
    "\002\000\004\002\266\001\002\000\046\002\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\021\uffd1\025\uffd1\037\uffd1\040" +
    "\uffd1\044\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\063\uffd1\001\002\000\006\012\014\020" +
    "\013\001\002\000\006\020\261\023\262\001\002\000\036" +
    "\011\022\012\037\013\026\014\021\021\042\025\034\037" +
    "\023\044\010\046\036\047\044\053\040\057\033\060\045" +
    "\063\025\001\002\000\006\020\ufff9\023\ufff9\001\002\000" +
    "\112\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\063\uffb3\072\uffb3\075\uffb3\001\002\000\112\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\043\uffb4\044\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\052\uffb4\053\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\063\uffb4\072\uffb4\075\uffb4\001\002\000\044\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\021\ufff2\025\ufff2\037\ufff2\040\ufff2" +
    "\044\260\046\ufff2\047\ufff2\052\ufff2\053\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\063\ufff2\001\002\000\044\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\021\ufff7\025\ufff7\037\ufff7\040\ufff7\044" +
    "\ufff7\046\ufff7\047\ufff7\052\ufff7\053\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\063\ufff7\001\002\000\112\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\020\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\043\uffba\044\uffba\046\uffba\047\uffba\050\uffba\052" +
    "\uffba\053\uffba\057\uffba\060\uffba\061\uffba\063\uffba\072\uffba" +
    "\075\uffba\001\002\000\036\004\211\005\200\012\201\054" +
    "\147\055\214\056\206\064\207\065\215\066\212\067\204" +
    "\070\210\071\202\073\213\074\205\001\002\000\026\011" +
    "\022\012\037\013\026\014\021\021\042\025\034\037\023" +
    "\046\036\047\044\057\033\001\002\000\044\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\021\ufff4\025\ufff4\037\ufff4\040\ufff4" +
    "\044\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\063\ufff4\001\002\000\006\011\126\012\155" +
    "\001\002\000\112\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\043\uffb8" +
    "\044\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\063\uffb8\072\uffb8\075\uffb8\001\002" +
    "\000\040\011\022\012\037\013\026\014\021\021\042\025" +
    "\034\037\023\044\010\046\036\047\044\052\153\053\040" +
    "\057\033\060\045\063\025\001\002\000\112\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\052\uffb5\053\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5" +
    "\072\uffb5\075\uffb5\001\002\000\044\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\021\ufff6\025\ufff6\037\ufff6\040\ufff6\044\ufff6" +
    "\046\ufff6\047\ufff6\052\ufff6\053\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\063\ufff6\001\002\000\044\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\021\ufff5\025\ufff5\037\ufff5\040\ufff5\044\ufff5\046" +
    "\ufff5\047\ufff5\052\ufff5\053\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\063\ufff5\001\002\000\112\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\043\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\053" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\072\uffb9\075\uffb9" +
    "\001\002\000\026\011\022\012\037\013\026\014\021\021" +
    "\042\025\034\037\023\046\036\047\044\057\033\001\002" +
    "\000\110\006\061\007\100\010\077\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\020\070\021\uffd0\024\075\025\065\026\063" +
    "\027\067\030\102\031\066\032\073\033\062\034\076\035" +
    "\064\036\101\037\uffd0\040\uffd0\043\uffd0\044\uffd0\046\uffd0" +
    "\047\uffd0\050\071\052\uffd0\053\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\072\uffd0\075\072\001\002\000\112\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\043\uffc3\044\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\052\uffc3\053\uffc3\057\uffc3\060\uffc3\061\uffc3\063" +
    "\uffc3\072\uffc3\075\uffc3\001\002\000\112\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\072" +
    "\uffb7\075\uffb7\001\002\000\004\012\124\001\002\000\112" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6\044\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\052\uffb6\053\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\072\uffb6\075\uffb6\001\002\000\026\011\022" +
    "\012\037\013\026\014\021\021\042\025\034\037\023\046" +
    "\036\047\044\057\033\001\002\000\044\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\021\ufff3\025\ufff3\037\ufff3\040\ufff3\044" +
    "\ufff3\046\ufff3\047\ufff3\052\ufff3\053\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\063\ufff3\001\002\000\112\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\052" +
    "\uffc2\053\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\072\uffc2" +
    "\075\uffc2\001\002\000\026\011\022\012\037\013\026\014" +
    "\021\021\042\025\034\037\023\046\036\047\044\057\033" +
    "\001\002\000\004\072\047\001\002\000\004\044\050\001" +
    "\002\000\036\011\022\012\037\013\026\014\021\021\042" +
    "\025\034\037\023\044\010\046\036\047\044\053\040\057" +
    "\033\060\045\063\025\001\002\000\040\011\022\012\037" +
    "\013\026\014\021\021\042\025\034\037\023\044\010\046" +
    "\036\047\044\053\040\057\033\060\045\061\053\063\025" +
    "\001\002\000\044\011\ufff8\012\ufff8\013\ufff8\014\ufff8\021" +
    "\ufff8\025\ufff8\037\ufff8\040\ufff8\044\ufff8\046\ufff8\047\ufff8" +
    "\052\ufff8\053\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\001" +
    "\002\000\004\044\054\001\002\000\036\011\022\012\037" +
    "\013\026\014\021\021\042\025\034\037\023\044\010\046" +
    "\036\047\044\053\040\057\033\060\045\063\025\001\002" +
    "\000\036\011\022\012\037\013\026\014\021\021\042\025" +
    "\034\037\023\044\056\046\036\047\044\053\040\057\033" +
    "\060\045\063\025\001\002\000\040\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\021\uffd1\025\uffd1\037\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\052\057\053\uffd1\057\uffd1\060\uffd1\063\uffd1\001" +
    "\002\000\044\011\uffda\012\uffda\013\uffda\014\uffda\021\uffda" +
    "\025\uffda\037\uffda\040\uffda\044\uffda\046\uffda\047\uffda\052" +
    "\uffda\053\uffda\057\uffda\060\uffda\061\uffda\063\uffda\001\002" +
    "\000\046\006\061\007\100\010\077\020\070\022\074\024" +
    "\075\025\065\026\063\027\067\030\102\031\066\032\073" +
    "\033\062\034\076\035\064\036\101\050\071\075\072\001" +
    "\002\000\026\011\022\012\037\013\026\014\021\021\042" +
    "\025\034\037\023\046\036\047\044\057\033\001\002\000" +
    "\026\011\022\012\037\013\026\014\021\021\042\025\034" +
    "\037\023\046\036\047\044\057\033\001\002\000\026\011" +
    "\022\012\037\013\026\014\021\021\042\025\034\037\023" +
    "\046\036\047\044\057\033\001\002\000\026\011\022\012" +
    "\037\013\026\014\021\021\042\025\034\037\023\046\036" +
    "\047\044\057\033\001\002\000\026\011\022\012\037\013" +
    "\026\014\021\021\042\025\034\037\023\046\036\047\044" +
    "\057\033\001\002\000\026\011\022\012\037\013\026\014" +
    "\021\021\042\025\034\037\023\046\036\047\044\057\033" +
    "\001\002\000\026\011\022\012\037\013\026\014\021\021" +
    "\042\025\034\037\023\046\036\047\044\057\033\001\002" +
    "\000\026\011\022\012\037\013\026\014\021\021\042\025" +
    "\034\037\023\046\036\047\044\057\033\001\002\000\026" +
    "\011\022\012\037\013\026\014\021\021\042\025\034\037" +
    "\023\046\036\047\044\057\033\001\002\000\026\011\022" +
    "\012\037\013\026\014\021\021\042\025\034\037\023\046" +
    "\036\047\044\057\033\001\002\000\026\011\022\012\037" +
    "\013\026\014\021\021\042\025\034\037\023\046\036\047" +
    "\044\057\033\001\002\000\112\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf" +
    "\053\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\072\uffcf\075" +
    "\uffcf\001\002\000\026\011\022\012\037\013\026\014\021" +
    "\021\042\025\034\037\023\046\036\047\044\057\033\001" +
    "\002\000\026\011\022\012\037\013\026\014\021\021\042" +
    "\025\034\037\023\046\036\047\044\057\033\001\002\000" +
    "\026\011\022\012\037\013\026\014\021\021\042\025\034" +
    "\037\023\046\036\047\044\057\033\001\002\000\026\011" +
    "\022\012\037\013\026\014\021\021\042\025\034\037\023" +
    "\046\036\047\044\057\033\001\002\000\026\011\022\012" +
    "\037\013\026\014\021\021\042\025\034\037\023\046\036" +
    "\047\044\057\033\001\002\000\026\011\022\012\037\013" +
    "\026\014\021\021\042\025\034\037\023\046\036\047\044" +
    "\057\033\001\002\000\112\006\061\007\100\010\077\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\020\070\021\uffca\022\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\076\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\044\uffca\046\uffca\047\uffca\050\071\052\uffca\053" +
    "\uffca\057\uffca\060\uffca\061\uffca\063\uffca\072\uffca\075\072" +
    "\001\002\000\112\006\061\007\100\010\077\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\020\070\021\uffc0\022\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\102\031\066\032\073\033" +
    "\062\034\076\035\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0" +
    "\044\uffc0\046\uffc0\047\uffc0\050\071\052\uffc0\053\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\063\uffc0\072\uffc0\075\072\001\002" +
    "\000\112\006\uffbd\007\100\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\043\uffbd\044\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\063\uffbd\072\uffbd\075\uffbd\001\002\000\112" +
    "\006\061\007\100\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\044\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\052\uffbe\053\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\063\uffbe\072\uffbe\075\uffbe\001\002\000\112\006\061" +
    "\007\100\010\077\011\uffc4\012\uffc4\013\uffc4\014\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\052\uffc4\053\uffc4\057\uffc4\060\uffc4\061\uffc4\063" +
    "\uffc4\072\uffc4\075\072\001\002\000\112\006\061\007\100" +
    "\010\077\011\uffce\012\uffce\013\uffce\014\uffce\020\070\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\063\027\067\030\102" +
    "\031\066\032\073\033\062\034\076\035\064\036\101\037" +
    "\uffce\040\uffce\043\uffce\044\uffce\046\uffce\047\uffce\050\071" +
    "\052\uffce\053\uffce\057\uffce\060\uffce\061\uffce\063\uffce\072" +
    "\uffce\075\072\001\002\000\112\006\061\007\100\010\077" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\020\070\021\uffc8\022" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\076\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\071\052\uffc8" +
    "\053\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8\072\uffc8\075" +
    "\072\001\002\000\112\006\061\007\100\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\020\uffaa\021\uffaa\022\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\043" +
    "\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\063\uffaa\072\uffaa\075\uffaa\001" +
    "\002\000\112\006\061\007\100\010\077\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\063\uffc5\072\uffc5\075\072\001\002\000" +
    "\112\006\061\007\100\010\077\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\063\uffc6\072\uffc6\075\072\001\002\000\112\006" +
    "\061\007\100\010\077\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\020\070\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\102\031\066\032\073\033\062\034\076\035\064" +
    "\036\101\037\uffcb\040\uffcb\043\uffcb\044\uffcb\046\uffcb\047" +
    "\uffcb\050\071\052\uffcb\053\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\063\uffcb\072\uffcb\075\072\001\002\000\112\006\061\007" +
    "\100\010\077\011\uffc9\012\uffc9\013\uffc9\014\uffc9\020\070" +
    "\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\076\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050" +
    "\071\052\uffc9\053\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9" +
    "\072\uffc9\075\072\001\002\000\112\006\061\007\100\010" +
    "\077\011\uffcd\012\uffcd\013\uffcd\014\uffcd\020\070\021\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\026\063\027\067\030\102\031" +
    "\066\032\073\033\062\034\076\035\064\036\101\037\uffcd" +
    "\040\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050\071\052" +
    "\uffcd\053\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\072\uffcd" +
    "\075\072\001\002\000\112\006\061\007\100\010\077\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\020\070\021\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\102\031\066\032" +
    "\073\033\062\034\076\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\047\uffc1\050\071\052\uffc1\053" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\072\uffc1\075\072" +
    "\001\002\000\112\006\061\007\100\010\077\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\020\070\021\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\102\031\066\032\073\033" +
    "\062\034\076\035\064\036\101\037\uffcc\040\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\047\uffcc\050\071\052\uffcc\053\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\072\uffcc\075\072\001\002" +
    "\000\112\006\061\007\100\010\077\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\020\070\021\uffc7\022\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\076\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043\uffc7\044\uffc7" +
    "\046\uffc7\047\uffc7\050\071\052\uffc7\053\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\063\uffc7\072\uffc7\075\072\001\002\000\112" +
    "\006\061\007\100\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc\044\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\053\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\063\uffbc\072\uffbc\075\uffbc\001\002\000\004\020\125" +
    "\001\002\000\010\011\126\012\131\041\133\001\002\000" +
    "\004\054\147\001\002\000\052\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\017\uffea\021\uffea\023\uffea\025\uffea\037\uffea\040" +
    "\uffea\042\uffea\044\uffea\046\uffea\047\uffea\052\uffea\053\uffea" +
    "\057\uffea\060\uffea\061\uffea\063\uffea\001\002\000\046\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\021\ufff0\023\143\025\ufff0" +
    "\037\ufff0\040\ufff0\044\ufff0\046\ufff0\047\ufff0\052\ufff0\053" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\001\002\000\052" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\017\uffe9\021\uffe9\023" +
    "\uffe9\025\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9\046\uffe9" +
    "\047\uffe9\052\uffe9\053\uffe9\057\uffe9\060\uffe9\061\uffe9\063" +
    "\uffe9\001\002\000\046\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\021\ufff1\023\137\025\ufff1\037\ufff1\040\ufff1\044\ufff1\046" +
    "\ufff1\047\ufff1\052\ufff1\053\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\063\ufff1\001\002\000\012\011\126\012\131\041\133\042" +
    "\134\001\002\000\050\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\021\uffec\023\uffec\025\uffec\037\uffec\040\uffec\042\uffec\044" +
    "\uffec\046\uffec\047\uffec\052\uffec\053\uffec\057\uffec\060\uffec" +
    "\061\uffec\063\uffec\001\002\000\006\023\143\042\146\001" +
    "\002\000\006\023\137\042\140\001\002\000\004\041\141" +
    "\001\002\000\050\011\uffed\012\uffed\013\uffed\014\uffed\021" +
    "\uffed\023\uffed\025\uffed\037\uffed\040\uffed\042\uffed\044\uffed" +
    "\046\uffed\047\uffed\052\uffed\053\uffed\057\uffed\060\uffed\061" +
    "\uffed\063\uffed\001\002\000\006\011\126\012\131\001\002" +
    "\000\006\023\143\042\144\001\002\000\006\011\126\012" +
    "\131\001\002\000\050\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\021\uffef\023\uffef\025\uffef\037\uffef\040\uffef\042\uffef\044" +
    "\uffef\046\uffef\047\uffef\052\uffef\053\uffef\057\uffef\060\uffef" +
    "\061\uffef\063\uffef\001\002\000\052\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\017\uffeb\021\uffeb\023\uffeb\025\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\044\uffeb\046\uffeb\047\uffeb\052\uffeb\053" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\063\uffeb\001\002\000\050" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\021\uffee\023\uffee\025" +
    "\uffee\037\uffee\040\uffee\042\uffee\044\uffee\046\uffee\047\uffee" +
    "\052\uffee\053\uffee\057\uffee\060\uffee\061\uffee\063\uffee\001" +
    "\002\000\026\011\022\012\037\013\026\014\021\021\042" +
    "\025\034\037\023\046\036\047\044\057\033\001\002\000" +
    "\004\011\151\001\002\000\120\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\052\uffe8\053\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\063\uffe8\072\uffe8\075\uffe8\001\002\000\112\006\061" +
    "\007\100\010\077\011\uffbb\012\uffbb\013\uffbb\014\uffbb\020" +
    "\070\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\063\027\067" +
    "\030\102\031\066\032\073\033\062\034\076\035\064\036" +
    "\101\037\uffbb\040\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb" +
    "\050\071\052\uffbb\053\uffbb\057\uffbb\060\uffbb\061\uffbb\063" +
    "\uffbb\072\uffbb\075\072\001\002\000\010\002\ufffc\012\ufffc" +
    "\044\ufffc\001\002\000\004\044\157\001\002\000\004\044" +
    "\157\001\002\000\004\044\166\001\002\000\006\012\161" +
    "\013\160\001\002\000\004\045\uffd4\001\002\000\004\045" +
    "\uffd5\001\002\000\004\045\163\001\002\000\036\011\022" +
    "\012\037\013\026\014\021\021\042\025\034\037\023\044" +
    "\010\046\036\047\044\053\040\057\033\060\045\063\025" +
    "\001\002\000\040\011\022\012\037\013\026\014\021\021" +
    "\042\025\034\037\023\040\165\044\010\046\036\047\044" +
    "\053\040\057\033\060\045\063\025\001\002\000\004\044" +
    "\uffd6\001\002\000\010\012\161\013\160\052\167\001\002" +
    "\000\044\011\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8\025" +
    "\uffd8\037\uffd8\040\uffd8\044\uffd8\046\uffd8\047\uffd8\052\uffd8" +
    "\053\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8\001\002\000" +
    "\004\045\171\001\002\000\036\011\022\012\037\013\026" +
    "\014\021\021\042\025\034\037\023\044\010\046\036\047" +
    "\044\053\040\057\033\060\045\063\025\001\002\000\040" +
    "\011\022\012\037\013\026\014\021\021\042\025\034\037" +
    "\023\040\173\044\010\046\036\047\044\053\040\057\033" +
    "\060\045\063\025\001\002\000\004\044\uffd7\001\002\000" +
    "\004\044\175\001\002\000\010\012\161\013\160\052\176" +
    "\001\002\000\044\011\uffd9\012\uffd9\013\uffd9\014\uffd9\021" +
    "\uffd9\025\uffd9\037\uffd9\040\uffd9\044\uffd9\046\uffd9\047\uffd9" +
    "\052\uffd9\053\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9\001" +
    "\002\000\112\006\061\007\100\010\077\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\020\070\021\uffbf\022\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\102\031\066\032\073\033\062" +
    "\034\076\035\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf\044" +
    "\uffbf\046\uffbf\047\uffbf\050\071\052\uffbf\053\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\063\uffbf\072\uffbf\075\072\001\002\000" +
    "\030\011\022\012\037\013\026\014\021\016\254\021\042" +
    "\025\034\037\023\046\036\047\044\057\033\001\002\000" +
    "\006\015\243\043\244\001\002\000\030\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\021\uffdd\025\uffdd\037\uffdd\041\uffdd\046" +
    "\uffdd\047\uffdd\057\uffdd\001\002\000\030\011\022\012\037" +
    "\013\026\014\021\021\042\025\034\037\023\041\133\046" +
    "\036\047\044\057\033\001\002\000\030\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\021\uffe1\025\uffe1\037\uffe1\041\uffe1\046" +
    "\uffe1\047\uffe1\057\uffe1\001\002\000\010\011\126\012\131" +
    "\041\231\001\002\000\030\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\021\uffdf\025\uffdf\037\uffdf\041\uffdf\046\uffdf\047\uffdf" +
    "\057\uffdf\001\002\000\030\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\021\uffe4\025\uffe4\037\uffe4\041\uffe4\046\uffe4\047\uffe4" +
    "\057\uffe4\001\002\000\030\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\021\uffde\025\uffde\037\uffde\041\uffde\046\uffde\047\uffde" +
    "\057\uffde\001\002\000\030\011\022\012\037\013\026\014" +
    "\021\016\224\021\042\025\034\037\023\046\036\047\044" +
    "\057\033\001\002\000\030\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\021\uffe2\025\uffe2\037\uffe2\041\uffe2\046\uffe2\047\uffe2" +
    "\057\uffe2\001\002\000\010\011\126\012\131\041\217\001" +
    "\002\000\030\011\uffe0\012\uffe0\013\uffe0\014\uffe0\021\uffe0" +
    "\025\uffe0\037\uffe0\041\uffe0\046\uffe0\047\uffe0\057\uffe0\001" +
    "\002\000\030\011\uffe3\012\uffe3\013\uffe3\014\uffe3\021\uffe3" +
    "\025\uffe3\037\uffe3\041\uffe3\046\uffe3\047\uffe3\057\uffe3\001" +
    "\002\000\006\011\223\023\143\001\002\000\006\011\126" +
    "\012\131\001\002\000\006\023\143\042\221\001\002\000" +
    "\004\011\222\001\002\000\112\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\020\uffac\021\uffac\022" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\052\uffac" +
    "\053\uffac\057\uffac\060\uffac\061\uffac\063\uffac\072\uffac\075" +
    "\uffac\001\002\000\112\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\020\uffab\021\uffab\022\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\043" +
    "\uffab\044\uffab\046\uffab\047\uffab\050\uffab\052\uffab\053\uffab" +
    "\057\uffab\060\uffab\061\uffab\063\uffab\072\uffab\075\uffab\001" +
    "\002\000\004\011\227\001\002\000\046\006\061\007\100" +
    "\010\077\011\226\020\070\024\075\025\065\026\063\027" +
    "\067\030\102\031\066\032\073\033\062\034\076\035\064" +
    "\036\101\050\071\075\072\001\002\000\112\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\052\uffb2\053\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2" +
    "\072\uffb2\075\uffb2\001\002\000\112\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\052" +
    "\uffb0\053\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0\072\uffb0" +
    "\075\uffb0\001\002\000\006\011\235\023\143\001\002\000" +
    "\006\011\126\012\131\001\002\000\006\023\143\042\233" +
    "\001\002\000\004\011\234\001\002\000\112\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\020\uffae" +
    "\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050" +
    "\uffae\052\uffae\053\uffae\057\uffae\060\uffae\061\uffae\063\uffae" +
    "\072\uffae\075\uffae\001\002\000\112\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\020\uffad\021\uffad" +
    "\022\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\052" +
    "\uffad\053\uffad\057\uffad\060\uffad\061\uffad\063\uffad\072\uffad" +
    "\075\uffad\001\002\000\004\011\241\001\002\000\006\011" +
    "\240\023\137\001\002\000\112\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7" +
    "\053\uffe7\057\uffe7\060\uffe7\061\uffe7\063\uffe7\072\uffe7\075" +
    "\uffe7\001\002\000\112\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\053\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\063\uffe6\072\uffe6\075\uffe6\001" +
    "\002\000\006\011\251\043\252\001\002\000\006\011\126" +
    "\012\131\001\002\000\026\011\022\012\037\013\026\014" +
    "\021\021\042\025\034\037\023\046\036\047\044\057\033" +
    "\001\002\000\006\011\uffdb\043\uffdb\001\002\000\006\017" +
    "\247\023\143\001\002\000\004\011\250\001\002\000\112" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\044\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\052\uffd3\053\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\063\uffd3\072\uffd3\075\uffd3\001\002\000\112\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\052\uffe5\053\uffe5\057\uffe5\060\uffe5\061\uffe5\063" +
    "\uffe5\072\uffe5\075\uffe5\001\002\000\026\011\022\012\037" +
    "\013\026\014\021\021\042\025\034\037\023\046\036\047" +
    "\044\057\033\001\002\000\006\011\uffdc\043\uffdc\001\002" +
    "\000\004\011\257\001\002\000\046\006\061\007\100\010" +
    "\077\011\256\020\070\024\075\025\065\026\063\027\067" +
    "\030\102\031\066\032\073\033\062\034\076\035\064\036" +
    "\101\050\071\075\072\001\002\000\112\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\053\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\072" +
    "\uffb1\075\uffb1\001\002\000\112\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf" +
    "\053\uffaf\057\uffaf\060\uffaf\061\uffaf\063\uffaf\072\uffaf\075" +
    "\uffaf\001\002\000\046\002\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\021\uffd2\025\uffd2\037\uffd2\040\uffd2\044\uffd2\046" +
    "\uffd2\047\uffd2\052\uffd2\053\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\063\uffd2\001\002\000\036\011\022\012\037\013\026\014" +
    "\021\021\042\025\034\037\023\044\010\046\036\047\044" +
    "\053\040\057\033\060\045\063\025\001\002\000\004\012" +
    "\263\001\002\000\006\020\ufffa\023\ufffa\001\002\000\040" +
    "\011\022\012\037\013\026\014\021\021\042\025\034\037" +
    "\023\044\010\046\036\047\044\052\265\053\040\057\033" +
    "\060\045\063\025\001\002\000\010\002\ufffd\012\ufffd\044" +
    "\ufffd\001\002\000\004\002\001\001\002\000\010\002\uffff" +
    "\012\uffff\044\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\012\002\006\017\005\020\003\027\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\266" +
    "\027\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\011\001\001\000\002\001\001\000\032\003\023" +
    "\004\034\005\017\006\026\007\042\011\040\013\027\014" +
    "\014\015\030\016\031\025\015\027\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\202" +
    "\001\001\000\014\004\176\011\040\013\027\014\014\025" +
    "\015\001\001\000\002\001\001\000\004\011\153\001\001" +
    "\000\002\001\001\000\030\003\023\004\034\005\051\007" +
    "\042\011\040\013\027\014\014\015\030\016\031\025\015" +
    "\027\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\151\011\040" +
    "\013\027\014\014\025\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\057\011\040\013\027\014\014\025" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\045\004\034\011\040\013\027\014\014\025\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\023" +
    "\004\034\005\017\006\050\007\042\011\040\013\027\014" +
    "\014\015\030\016\031\025\015\027\016\001\001\000\030" +
    "\003\023\004\034\005\051\007\042\011\040\013\027\014" +
    "\014\015\030\016\031\025\015\027\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\023\004\034\005" +
    "\017\006\054\007\042\011\040\013\027\014\014\015\030" +
    "\016\031\025\015\027\016\001\001\000\030\003\023\004" +
    "\034\005\051\007\042\011\040\013\027\014\014\015\030" +
    "\016\031\025\015\027\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\122\011\040" +
    "\013\027\014\014\025\015\001\001\000\014\004\121\011" +
    "\040\013\027\014\014\025\015\001\001\000\014\004\120" +
    "\011\040\013\027\014\014\025\015\001\001\000\014\004" +
    "\117\011\040\013\027\014\014\025\015\001\001\000\014" +
    "\004\116\011\040\013\027\014\014\025\015\001\001\000" +
    "\014\004\115\011\040\013\027\014\014\025\015\001\001" +
    "\000\014\004\114\011\040\013\027\014\014\025\015\001" +
    "\001\000\014\004\113\011\040\013\027\014\014\025\015" +
    "\001\001\000\014\004\112\011\040\013\027\014\014\025" +
    "\015\001\001\000\014\004\111\011\040\013\027\014\014" +
    "\025\015\001\001\000\014\004\110\011\040\013\027\014" +
    "\014\025\015\001\001\000\002\001\001\000\014\004\107" +
    "\011\040\013\027\014\014\025\015\001\001\000\014\004" +
    "\106\011\040\013\027\014\014\025\015\001\001\000\014" +
    "\004\105\011\040\013\027\014\014\025\015\001\001\000" +
    "\014\004\104\011\040\013\027\014\014\025\015\001\001" +
    "\000\014\004\103\011\040\013\027\014\014\025\015\001" +
    "\001\000\014\004\102\011\040\013\027\014\014\025\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\127" +
    "\011\126\012\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\134\011\126\012\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\141\011\126\001\001\000" +
    "\002\001\001\000\006\010\144\011\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\147\004\034\011\040\013\027\014\014\025\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\173\001\001\000\004\024\155" +
    "\001\001\000\002\001\001\000\004\026\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\023\004\034\005\017\006\163\007\042\011\040\013" +
    "\027\014\014\015\030\016\031\025\015\027\016\001\001" +
    "\000\030\003\023\004\034\005\051\007\042\011\040\013" +
    "\027\014\014\015\030\016\031\025\015\027\016\001\001" +
    "\000\002\001\001\000\004\026\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\023\004\034\005\017" +
    "\006\171\007\042\011\040\013\027\014\014\015\030\016" +
    "\031\025\015\027\016\001\001\000\030\003\023\004\034" +
    "\005\051\007\042\011\040\013\027\014\014\015\030\016" +
    "\031\025\015\027\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\254\011\040\013\027\014\014" +
    "\025\015\001\001\000\004\023\241\001\001\000\002\001" +
    "\001\000\020\003\235\004\034\011\040\012\236\013\027" +
    "\014\014\025\015\001\001\000\002\001\001\000\006\010" +
    "\227\011\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\224\011\040\013\027\014" +
    "\014\025\015\001\001\000\002\001\001\000\006\010\215" +
    "\011\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\217\011\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\231\011" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\245\011\126\001\001\000\016\003\244\004" +
    "\034\011\040\013\027\014\014\025\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\252\004\034\011\040" +
    "\013\027\014\014\025\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\023\004\034\005" +
    "\017\006\263\007\042\011\040\013\027\014\014\015\030" +
    "\016\031\025\015\027\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\023\004\034\005\051\007\042" +
    "\011\040\013\027\014\014\015\030\016\031\025\015\027" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoH$actions {



  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action_part00000000(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= id PARAMETRO igual INSTRUCCIONES end 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= id igual INSTRUCCIONES end 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= SALTOS 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETRO ::= PARAMETRO coma id 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARAMETRO ::= id 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWITCH 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= IF 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= OP 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= LISTA 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SALTOS 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA ::= let id igual MATRIZ 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA ::= let id igual ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MATRIZ ::= MATRIZ coma corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MATRIZ ::= corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MATRIZ ::= corcheteA MATRIZ corcheteC 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO ::= ELEMENTO coma ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO ::= CALCULAR 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO ::= id 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALCULAR ::= dollar calcular OP dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_LISTA ::= dollar NOMBRE_OP MATRIZ dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_LISTA ::= dollar NOMBRE_OP OP dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_LISTA ::= dollar id POSICION dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NOMBRE_OP ::= sum 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NOMBRE_OP ::= product 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NOMBRE_OP ::= revers 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NOMBRE_OP ::= impr 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NOMBRE_OP ::= asc 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NOMBRE_OP ::= desc 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NOMBRE_OP ::= par 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NOMBRE_OP ::= length 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // POSICION ::= POSICION posicion OP 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("POSICION",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // POSICION ::= posicion OP 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("POSICION",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= si OP entonces salto INSTRUCCIONES sino salto INSTRUCCIONES salto end 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= caso CALCULAR CASO salto end 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= caso id CASO salto end 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASO ::= CASO salto VALOR_PUNTUAL dosPuntos INSTRUCCIONES puntoComa 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO ::= salto VALOR_PUNTUAL dosPuntos INSTRUCCIONES puntoComa 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR_PUNTUAL ::= id 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOR_PUNTUAL",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR_PUNTUAL ::= numero 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOR_PUNTUAL",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LLAMADA ::= dollar id llaveA ELEMENTO llaveC dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADA",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SALTOS ::= SALTOS salto 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SALTOS ::= salto 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OP",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  "(" + a.texto + ")";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "+" + b.texto;
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Double.parseDouble(a.valor) + Double.parseDouble(b.valor);
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (+) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "-" + b.texto;
    try{
       // System.out.println("Menos ="+(a.valor)+","+(b.valor));
        RESULT.val = Double.parseDouble(a.valor) - Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (-) "+e);
    }
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "*" + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) * Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (*) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E div E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " / " + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) / Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (/) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " > " + b.texto;
    try{
       if( Double.parseDouble(a.valor) > Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " < " + b.texto;
    try{
       if( Double.parseDouble(a.valor) < Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " >= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) >= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>=) "+e);
    }
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " <= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) <= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<=) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E igual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " = " + b.texto;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " == " + b.texto;
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " != " + b.texto;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT= new Caracter();
    RESULT.valor = "true";
    RESULT.cadena = true;
    RESULT.texto = "true";
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "false";
    RESULT.cadena = true;
    RESULT.texto =  "false";
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " || " + b.texto +")";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " %% " + b.texto +")";
 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = "a";
    RESULT.texto = "! " + b.texto;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E mod E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E sqrt E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "raiz (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            //RESULT.val = Metodo_Funcion.raiz(Double.parseDouble(a.valor),Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (r) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E pot E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= menos E 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("\"","");
    RESULT.texto = n;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("'","");
    RESULT.cadena = true;
    RESULT.texto = n;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= numero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n;
    RESULT.texto = n;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = i;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= CALCULAR 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= EXTRAS 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= LLAMADA 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= OPERACION_LISTA 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXTRAS ::= dollar succ E dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXTRAS ::= dollar decc E dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXTRAS ::= dollar succ porcentaje dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXTRAS ::= dollar decc porcentaje dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXTRAS ::= dollar min corcheteA ELEMENTO corcheteC dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXTRAS ::= dollar min ELEMENTO dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXTRAS ::= dollar max corcheteA ELEMENTO corcheteC dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXTRAS ::= dollar max ELEMENTO dollar 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXTRAS ::= E concatenar E 
            {
              Caracter RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoH$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoH$do_action_part00000000(
                               CUP$SintacticoH$act_num,
                               CUP$SintacticoH$parser,
                               CUP$SintacticoH$stack,
                               CUP$SintacticoH$top);
    }
}

}
