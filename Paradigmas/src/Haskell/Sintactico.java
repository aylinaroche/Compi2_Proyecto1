
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Haskell;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\007\000\002\020\006" +
    "\000\002\021\005\000\002\021\003\000\002\006\004\000" +
    "\002\006\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\007\006\000\002\007" +
    "\006\000\002\012\007\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\010\005\000\002\010\003\000" +
    "\002\011\006\000\002\011\004\000\002\014\005\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\005\000\002\023\004\000\002" +
    "\016\011\000\002\015\006\000\002\024\006\000\002\024" +
    "\005\000\002\025\006\000\002\025\010\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\006\000\002\013" +
    "\006\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\012\007\001\002\000\006\002\ufffe\012" +
    "\ufffe\001\002\000\006\002\000\012\007\001\002\000\004" +
    "\002\240\001\002\000\006\012\012\020\011\001\002\000" +
    "\006\020\233\023\234\001\002\000\066\004\025\005\013" +
    "\011\017\012\045\013\034\014\060\021\055\025\040\037" +
    "\053\045\042\046\046\052\024\053\022\054\015\055\052" +
    "\056\026\057\030\062\050\063\027\064\047\065\043\066" +
    "\051\067\014\070\031\072\037\073\057\001\002\000\006" +
    "\020\ufffa\023\ufffa\001\002\000\062\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\016\231\021\055\025\040" +
    "\037\053\045\042\046\046\053\022\054\015\055\052\056" +
    "\026\063\027\064\047\065\043\066\051\067\014\070\031" +
    "\072\037\073\057\001\002\000\006\012\uffdf\041\uffdf\001" +
    "\002\000\006\012\uffe1\041\uffe1\001\002\000\072\004\ufff8" +
    "\005\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\021\ufff8\025" +
    "\ufff8\037\ufff8\045\ufff8\046\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\072\ufff8" +
    "\073\ufff8\001\002\000\060\004\025\005\013\011\017\012" +
    "\217\013\034\014\060\021\055\025\040\037\053\045\042" +
    "\046\046\053\220\054\015\055\052\056\026\063\027\064" +
    "\047\065\043\066\051\067\014\070\031\072\037\073\057" +
    "\001\002\000\070\004\025\005\013\011\017\012\045\013" +
    "\034\014\060\021\055\025\040\037\053\045\042\046\046" +
    "\051\213\052\024\053\022\054\015\055\052\056\026\057" +
    "\030\062\050\063\027\064\047\065\043\066\051\067\014" +
    "\070\031\072\037\073\057\001\002\000\150\004\uffd5\005" +
    "\uffd5\006\104\007\123\010\122\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\017\uffd5\020\113\021\uffd5\022\uffd5\023\uffd5\024" +
    "\120\025\110\026\106\027\112\030\125\031\111\032\115" +
    "\033\105\034\121\035\107\036\124\037\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\114\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\116\001\002\000\060\004" +
    "\025\005\013\011\017\012\045\013\034\014\060\021\055" +
    "\025\040\037\053\045\042\046\046\053\022\054\015\055" +
    "\052\056\026\063\027\064\047\065\043\066\051\067\014" +
    "\070\031\072\037\073\057\001\002\000\150\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\001\002\000\004\012" +
    "\206\001\002\000\062\004\025\005\013\011\017\012\045" +
    "\013\034\014\060\016\204\021\055\025\040\037\053\045" +
    "\042\046\046\053\022\054\015\055\052\056\026\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\150\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\001\002\000\006\012\uffe5\041\uffe5\001\002" +
    "\000\060\004\025\005\013\011\017\012\045\013\034\014" +
    "\060\021\055\025\040\037\053\045\042\046\046\053\022" +
    "\054\015\055\052\056\026\063\027\064\047\065\043\066" +
    "\051\067\014\070\031\072\037\073\057\001\002\000\006" +
    "\012\uffde\041\uffde\001\002\000\072\004\ufff4\005\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\021\ufff4\025\ufff4\037\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4\001" +
    "\002\000\150\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\001\002\000\150\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\001\002\000\072\004\ufff5\005\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\021\ufff5\025\ufff5\037\ufff5\045" +
    "\ufff5\046\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\072\ufff5\073\ufff5\001\002" +
    "\000\072\004\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\021\ufff7\025\ufff7\037\ufff7\045\ufff7\046\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\072\ufff7\073\ufff7\001\002\000\004\041\173\001" +
    "\002\000\060\004\025\005\013\011\017\012\045\013\034" +
    "\014\060\021\055\025\040\037\053\045\042\046\046\053" +
    "\022\054\015\055\052\056\026\063\027\064\047\065\043" +
    "\066\051\067\014\070\031\072\037\073\057\001\002\000" +
    "\150\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\001" +
    "\002\000\150\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\001\002\000\006\012\uffe3\041\uffe3\001\002\000\072" +
    "\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\021" +
    "\ufff6\025\ufff6\037\ufff6\045\ufff6\046\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\072\ufff6\073\ufff6\001\002\000\152\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\162\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\043" +
    "\164\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\001\002\000\150\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\001\002\000" +
    "\006\012\uffe4\041\uffe4\001\002\000\060\004\025\005\013" +
    "\011\017\012\045\013\034\014\060\021\055\025\040\037" +
    "\053\045\042\046\046\053\022\054\015\055\052\056\026" +
    "\063\027\064\047\065\043\066\051\067\014\070\031\072" +
    "\037\073\057\001\002\000\006\012\uffe2\041\uffe2\001\002" +
    "\000\006\012\uffe0\041\uffe0\001\002\000\060\004\025\005" +
    "\013\011\017\012\045\013\034\014\060\021\055\025\040" +
    "\037\053\045\042\046\046\053\022\054\015\055\052\056" +
    "\026\063\027\064\047\065\043\066\051\067\014\070\031" +
    "\072\037\073\057\001\002\000\150\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\001\002\000\060\004\025\005" +
    "\013\011\017\012\045\013\034\014\060\021\055\025\040" +
    "\037\053\045\042\046\046\053\022\054\015\055\052\056" +
    "\026\063\027\064\047\065\043\066\051\067\014\070\031" +
    "\072\037\073\057\001\002\000\006\012\067\041\071\001" +
    "\002\000\004\041\061\001\002\000\150\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\001\002\000\060\004\025" +
    "\005\013\011\017\012\045\013\034\014\060\021\055\025" +
    "\040\037\053\045\042\046\046\053\022\054\015\055\052" +
    "\056\026\063\027\064\047\065\043\066\051\067\014\070" +
    "\031\072\037\073\057\001\002\000\100\004\uffec\005\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\017\uffec\021\uffec\023" +
    "\uffec\025\uffec\037\uffec\042\uffec\045\uffec\046\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\072\uffec\073\uffec\001\002\000\006\023\064\042" +
    "\065\001\002\000\060\004\025\005\013\011\017\012\045" +
    "\013\034\014\060\021\055\025\040\037\053\045\042\046" +
    "\046\053\022\054\015\055\052\056\026\063\027\064\047" +
    "\065\043\066\051\067\014\070\031\072\037\073\057\001" +
    "\002\000\150\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\001\002\000\100\004\uffed\005\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\017\uffed\021\uffed\023\uffed\025\uffed\037" +
    "\uffed\042\uffed\045\uffed\046\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\072\uffed" +
    "\073\uffed\001\002\000\150\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\073\uffe7\074\uffe7\001\002\000\150\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\076\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\001\002\000\064\004\025\005" +
    "\013\011\017\012\045\013\034\014\060\021\055\025\040" +
    "\037\053\041\071\042\072\045\042\046\046\053\022\054" +
    "\015\055\052\056\026\063\027\064\047\065\043\066\051" +
    "\067\014\070\031\072\037\073\057\001\002\000\150\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\001\002\000" +
    "\006\023\076\042\077\001\002\000\006\023\064\042\075" +
    "\001\002\000\150\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\001\002\000\004\041\100\001\002\000\150\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\001\002\000" +
    "\060\004\025\005\013\011\017\012\045\013\034\014\060" +
    "\021\055\025\040\037\053\045\042\046\046\053\022\054" +
    "\015\055\052\056\026\063\027\064\047\065\043\066\051" +
    "\067\014\070\031\072\037\073\057\001\002\000\006\023" +
    "\064\042\102\001\002\000\150\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\046\006\104\007\123" +
    "\010\122\020\113\022\117\024\120\025\110\026\106\027" +
    "\112\030\125\031\111\032\115\033\105\034\121\035\107" +
    "\036\124\047\114\074\116\001\002\000\060\004\025\005" +
    "\013\011\017\012\045\013\034\014\060\021\055\025\040" +
    "\037\053\045\042\046\046\053\022\054\015\055\052\056" +
    "\026\063\027\064\047\065\043\066\051\067\014\070\031" +
    "\072\037\073\057\001\002\000\060\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\053\022\054\015\055\052\056\026\063" +
    "\027\064\047\065\043\066\051\067\014\070\031\072\037" +
    "\073\057\001\002\000\060\004\025\005\013\011\017\012" +
    "\045\013\034\014\060\021\055\025\040\037\053\045\042" +
    "\046\046\053\022\054\015\055\052\056\026\063\027\064" +
    "\047\065\043\066\051\067\014\070\031\072\037\073\057" +
    "\001\002\000\060\004\025\005\013\011\017\012\045\013" +
    "\034\014\060\021\055\025\040\037\053\045\042\046\046" +
    "\053\022\054\015\055\052\056\026\063\027\064\047\065" +
    "\043\066\051\067\014\070\031\072\037\073\057\001\002" +
    "\000\060\004\025\005\013\011\017\012\045\013\034\014" +
    "\060\021\055\025\040\037\053\045\042\046\046\053\022" +
    "\054\015\055\052\056\026\063\027\064\047\065\043\066" +
    "\051\067\014\070\031\072\037\073\057\001\002\000\060" +
    "\004\025\005\013\011\017\012\045\013\034\014\060\021" +
    "\055\025\040\037\053\045\042\046\046\053\022\054\015" +
    "\055\052\056\026\063\027\064\047\065\043\066\051\067" +
    "\014\070\031\072\037\073\057\001\002\000\060\004\025" +
    "\005\013\011\017\012\045\013\034\014\060\021\055\025" +
    "\040\037\053\045\042\046\046\053\022\054\015\055\052" +
    "\056\026\063\027\064\047\065\043\066\051\067\014\070" +
    "\031\072\037\073\057\001\002\000\060\004\025\005\013" +
    "\011\017\012\045\013\034\014\060\021\055\025\040\037" +
    "\053\045\042\046\046\053\022\054\015\055\052\056\026" +
    "\063\027\064\047\065\043\066\051\067\014\070\031\072" +
    "\037\073\057\001\002\000\060\004\025\005\013\011\017" +
    "\012\045\013\034\014\060\021\055\025\040\037\053\045" +
    "\042\046\046\053\022\054\015\055\052\056\026\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\060\004\025\005\013\011\017\012\045" +
    "\013\034\014\060\021\055\025\040\037\053\045\042\046" +
    "\046\053\022\054\015\055\052\056\026\063\027\064\047" +
    "\065\043\066\051\067\014\070\031\072\037\073\057\001" +
    "\002\000\060\004\025\005\013\011\017\012\045\013\034" +
    "\014\060\021\055\025\040\037\053\045\042\046\046\053" +
    "\022\054\015\055\052\056\026\063\027\064\047\065\043" +
    "\066\051\067\014\070\031\072\037\073\057\001\002\000" +
    "\150\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001" +
    "\002\000\060\004\025\005\013\011\017\012\045\013\034" +
    "\014\060\021\055\025\040\037\053\045\042\046\046\053" +
    "\022\054\015\055\052\056\026\063\027\064\047\065\043" +
    "\066\051\067\014\070\031\072\037\073\057\001\002\000" +
    "\060\004\025\005\013\011\017\012\045\013\034\014\060" +
    "\021\055\025\040\037\053\045\042\046\046\053\022\054" +
    "\015\055\052\056\026\063\027\064\047\065\043\066\051" +
    "\067\014\070\031\072\037\073\057\001\002\000\060\004" +
    "\025\005\013\011\017\012\045\013\034\014\060\021\055" +
    "\025\040\037\053\045\042\046\046\053\022\054\015\055" +
    "\052\056\026\063\027\064\047\065\043\066\051\067\014" +
    "\070\031\072\037\073\057\001\002\000\060\004\025\005" +
    "\013\011\017\012\045\013\034\014\060\021\055\025\040" +
    "\037\053\045\042\046\046\053\022\054\015\055\052\056" +
    "\026\063\027\064\047\065\043\066\051\067\014\070\031" +
    "\072\037\073\057\001\002\000\060\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\053\022\054\015\055\052\056\026\063" +
    "\027\064\047\065\043\066\051\067\014\070\031\072\037" +
    "\073\057\001\002\000\060\004\025\005\013\011\017\012" +
    "\045\013\034\014\060\021\055\025\040\037\053\045\042" +
    "\046\046\053\022\054\015\055\052\056\026\063\027\064" +
    "\047\065\043\066\051\067\014\070\031\072\037\073\057" +
    "\001\002\000\150\004\uffcf\005\uffcf\006\104\007\123\010" +
    "\122\011\uffcf\012\uffcf\013\uffcf\014\uffcf\017\uffcf\020\113" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\121\035\uffcf" +
    "\036\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\114\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\116\001\002\000\150\004\uffc5\005\uffc5\006\104\007" +
    "\123\010\122\011\uffc5\012\uffc5\013\uffc5\014\uffc5\017\uffc5" +
    "\020\113\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\125\031\111\032\115\033\105\034\121" +
    "\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\114\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\116\001\002\000\150\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\001\002\000\150\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\001\002\000\150\004" +
    "\uffc9\005\uffc9\006\104\007\123\010\122\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\116\001\002\000" +
    "\150\004\uffd3\005\uffd3\006\104\007\123\010\122\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\017\uffd3\020\113\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\106\027\112\030\125" +
    "\031\111\032\115\033\105\034\121\035\107\036\124\037" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\114" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\116\001" +
    "\002\000\150\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\001\002\000\150\004\uffcd\005\uffcd\006\104\007\123" +
    "\010\122\011\uffcd\012\uffcd\013\uffcd\014\uffcd\017\uffcd\020" +
    "\113\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\121\035" +
    "\uffcd\036\uffcd\037\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\114\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\116\001\002\000\150\004\uffca\005\uffca\006\104" +
    "\007\123\010\122\011\uffca\012\uffca\013\uffca\014\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\116\001\002\000\150\004\uffcb\005\uffcb" +
    "\006\104\007\123\010\122\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\116\001\002\000\150\004\uffd0" +
    "\005\uffd0\006\104\007\123\010\122\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\017\uffd0\020\113\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\125\031\111\032" +
    "\115\033\105\034\121\035\107\036\124\037\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\114\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\116\001\002\000\150" +
    "\004\uffce\005\uffce\006\104\007\123\010\122\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\017\uffce\020\113\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\121\035\uffce\036\uffce\037\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\114\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\116\001\002" +
    "\000\150\004\uffd2\005\uffd2\006\104\007\123\010\122\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\017\uffd2\020\113\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\106\027\112\030" +
    "\125\031\111\032\115\033\105\034\121\035\107\036\124" +
    "\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\114\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\116" +
    "\001\002\000\150\004\uffc6\005\uffc6\006\104\007\123\010" +
    "\122\011\uffc6\012\uffc6\013\uffc6\014\uffc6\017\uffc6\020\113" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\125\031\111\032\115\033\105\034\121\035\uffc6" +
    "\036\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\114\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\116\001\002\000\150\004\uffd1\005\uffd1\006\104\007" +
    "\123\010\122\011\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1" +
    "\020\113\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\125\031\111\032\115\033\105\034\121" +
    "\035\107\036\124\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\114\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\116\001\002\000\150\004\uffcc\005\uffcc\006" +
    "\104\007\123\010\122\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\017\uffcc\020\113\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\121\035\uffcc\036\uffcc\037\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\114\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\116\001\002\000\150\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\001\002\000\150\004" +
    "\uffc4\005\uffc4\006\104\007\123\010\122\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\017\uffc4\020\113\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\125\031\111" +
    "\032\115\033\105\034\121\035\uffc4\036\uffc4\037\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\114\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\116\001\002\000" +
    "\060\004\025\005\013\011\017\012\045\013\034\014\060" +
    "\021\055\025\040\037\053\045\042\046\046\053\022\054" +
    "\015\055\052\056\026\063\027\064\047\065\043\066\051" +
    "\067\014\070\031\072\037\073\057\001\002\000\004\044" +
    "\160\001\002\000\062\004\025\005\013\011\017\012\045" +
    "\013\034\014\060\021\055\025\040\037\053\045\042\046" +
    "\046\051\154\053\022\054\015\055\052\056\026\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\004\044\155\001\002\000\072\004\uffda" +
    "\005\uffda\011\uffda\012\uffda\013\uffda\014\uffda\021\uffda\025" +
    "\uffda\037\uffda\045\uffda\046\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\072\uffda" +
    "\073\uffda\001\002\000\066\004\025\005\013\011\017\012" +
    "\045\013\034\014\060\021\055\025\040\037\053\045\042" +
    "\046\046\052\024\053\022\054\015\055\052\056\026\057" +
    "\030\062\050\063\027\064\047\065\043\066\051\067\014" +
    "\070\031\072\037\073\057\001\002\000\070\004\uffd9\005" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\025\uffd9" +
    "\037\uffd9\045\uffd9\046\uffd9\051\uffd9\052\024\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\030\062\050\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9\001" +
    "\002\000\072\004\ufff9\005\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\021\ufff9\025\ufff9\037\ufff9\045\ufff9\046\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\072\ufff9\073\ufff9\001\002\000\066\004\025" +
    "\005\013\011\017\012\045\013\034\014\060\021\055\025" +
    "\040\037\053\045\042\046\046\052\024\053\022\054\015" +
    "\055\052\056\026\057\030\062\050\063\027\064\047\065" +
    "\043\066\051\067\014\070\031\072\037\073\057\001\002" +
    "\000\070\004\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\021\uffd8\025\uffd8\037\uffd8\045\uffd8\046\uffd8\051\uffd8" +
    "\052\024\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\030\062" +
    "\050\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\072\uffd8\073\uffd8\001\002\000\060\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\053\022\054\015\055\052\056\026\063" +
    "\027\064\047\065\043\066\051\067\014\070\031\072\037" +
    "\073\057\001\002\000\150\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\042\uffe6\043\166\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\001\002\000\060\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\053\022\054\015\055\052\056\026\063" +
    "\027\064\047\065\043\066\051\067\014\070\031\072\037" +
    "\073\057\001\002\000\150\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\001\002\000\060\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\053\022\054\015\055\052\056\026\063" +
    "\027\064\047\065\043\066\051\067\014\070\031\072\037" +
    "\073\057\001\002\000\150\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\001\002\000\006\017\171\023\064\001" +
    "\002\000\150\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\001\002\000\150\004\uffc0\005\uffc0\006\104\007\123" +
    "\010\122\011\uffc0\012\uffc0\013\uffc0\014\uffc0\017\uffc0\020" +
    "\113\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\106" +
    "\027\112\030\125\031\111\032\115\033\105\034\121\035" +
    "\107\036\124\037\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\114\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\116\001\002\000\060\004\025\005\013\011\017" +
    "\012\045\013\034\014\060\021\055\025\040\037\053\045" +
    "\042\046\046\053\022\054\015\055\052\056\026\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\006\023\064\042\175\001\002\000\150" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\001\002" +
    "\000\004\071\177\001\002\000\066\004\025\005\013\011" +
    "\017\012\045\013\034\014\060\021\055\025\040\037\053" +
    "\045\042\046\046\052\024\053\022\054\015\055\052\056" +
    "\026\057\030\062\050\063\027\064\047\065\043\066\051" +
    "\067\014\070\031\072\037\073\057\001\002\000\070\004" +
    "\025\005\013\011\017\012\045\013\034\014\060\021\055" +
    "\025\040\037\053\045\042\046\046\052\024\053\022\054" +
    "\015\055\052\056\026\057\030\060\201\062\050\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\066\004\025\005\013\011\017\012\045" +
    "\013\034\014\060\021\055\025\040\037\053\045\042\046" +
    "\046\052\024\053\022\054\015\055\052\056\026\057\030" +
    "\062\050\063\027\064\047\065\043\066\051\067\014\070" +
    "\031\072\037\073\057\001\002\000\070\004\025\005\013" +
    "\011\017\012\045\013\034\014\060\021\055\025\040\037" +
    "\053\045\042\046\046\051\203\052\024\053\022\054\015" +
    "\055\052\056\026\057\030\062\050\063\027\064\047\065" +
    "\043\066\051\067\014\070\031\072\037\073\057\001\002" +
    "\000\072\004\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\021\uffdb\025\uffdb\037\uffdb\045\uffdb\046\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\072\uffdb\073\uffdb\001\002\000\150\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\001\002\000\150\004" +
    "\uffb6\005\uffb6\006\104\007\123\010\122\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\017\uffb6\020\113\021\uffb6\022\uffb6\023" +
    "\uffb6\024\120\025\110\026\106\027\112\030\125\031\111" +
    "\032\115\033\105\034\121\035\107\036\124\037\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\114\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\116\001\002\000" +
    "\004\020\207\001\002\000\062\004\025\005\013\011\017" +
    "\012\045\013\034\014\060\021\055\025\040\037\053\041" +
    "\071\045\042\046\046\053\022\054\015\055\052\056\026" +
    "\063\027\064\047\065\043\066\051\067\014\070\031\072" +
    "\037\073\057\001\002\000\074\004\ufff3\005\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\021\ufff3\023\076\025\ufff3\037" +
    "\ufff3\045\ufff3\046\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3" +
    "\001\002\000\074\004\ufff2\005\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\021\ufff2\023\064\025\ufff2\037\ufff2\045\ufff2" +
    "\046\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\072\ufff2\073\ufff2\001\002\000" +
    "\150\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\001" +
    "\002\000\006\002\ufffc\012\ufffc\001\002\000\046\006\uffb8" +
    "\007\uffb8\010\uffb8\011\230\020\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\047\uffb8\074\uffb8\001\002\000\046\006" +
    "\uffba\007\uffba\010\uffba\011\227\020\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\047\uffba\074\uffba\001\002\000\044" +
    "\006\104\007\123\010\122\020\113\024\120\025\110\026" +
    "\106\027\112\030\125\031\111\032\115\033\105\034\121" +
    "\035\107\036\124\047\114\074\116\001\002\000\050\006" +
    "\uffbc\007\uffbc\010\uffbc\015\223\020\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\043\164\047\uffbc\074\uffbc\001\002" +
    "\000\060\004\025\005\013\011\017\012\045\013\034\014" +
    "\060\021\055\025\040\037\053\045\042\046\046\053\022" +
    "\054\015\055\052\056\026\063\027\064\047\065\043\066" +
    "\051\067\014\070\031\072\037\073\057\001\002\000\046" +
    "\006\uffea\007\uffea\010\uffea\011\222\020\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\047\uffea\074\uffea\001\002\000" +
    "\150\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001" +
    "\002\000\060\004\025\005\013\011\017\012\045\013\034" +
    "\014\060\021\055\025\040\037\053\045\042\046\046\053" +
    "\022\054\015\055\052\056\026\063\027\064\047\065\043" +
    "\066\051\067\014\070\031\072\037\073\057\001\002\000" +
    "\006\017\225\023\064\001\002\000\046\006\uffd7\007\uffd7" +
    "\010\uffd7\011\226\020\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\047\uffd7\074\uffd7\001\002\000\150\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000\150\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\001\002\000" +
    "\150\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001" +
    "\002\000\150\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\001\002\000\150\004\uffb5\005\uffb5\006\104\007\123" +
    "\010\122\011\uffb5\012\uffb5\013\uffb5\014\uffb5\017\uffb5\020" +
    "\113\021\uffb5\022\uffb5\023\uffb5\024\120\025\110\026\106" +
    "\027\112\030\125\031\111\032\115\033\105\034\121\035" +
    "\107\036\124\037\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\114\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\116\001\002\000\066\004\025\005\013\011\017" +
    "\012\045\013\034\014\060\021\055\025\040\037\053\045" +
    "\042\046\046\052\024\053\022\054\015\055\052\056\026" +
    "\057\030\062\050\063\027\064\047\065\043\066\051\067" +
    "\014\070\031\072\037\073\057\001\002\000\004\012\235" +
    "\001\002\000\006\020\ufffb\023\ufffb\001\002\000\070\004" +
    "\025\005\013\011\017\012\045\013\034\014\060\021\055" +
    "\025\040\037\053\045\042\046\046\051\237\052\024\053" +
    "\022\054\015\055\052\056\026\057\030\062\050\063\027" +
    "\064\047\065\043\066\051\067\014\070\031\072\037\073" +
    "\057\001\002\000\006\002\ufffd\012\ufffd\001\002\000\004" +
    "\002\001\001\002\000\006\002\uffff\012\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\010\002\005\017\004\020\003\001\001\000" +
    "\002\001\001\000\004\020\240\001\001\000\002\001\001" +
    "\000\004\021\007\001\001\000\002\001\001\000\032\003" +
    "\031\004\020\005\015\006\017\007\035\011\022\013\032" +
    "\014\040\015\043\016\034\022\055\025\053\001\001\000" +
    "\002\001\001\000\016\004\231\011\022\013\032\014\040" +
    "\022\055\025\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\215\011\022\013\214" +
    "\014\213\022\055\025\053\001\001\000\030\003\031\004" +
    "\020\005\156\007\035\011\022\013\032\014\040\015\043" +
    "\016\034\022\055\025\053\001\001\000\002\001\001\000" +
    "\020\003\211\004\020\011\022\013\032\014\040\022\055" +
    "\025\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\204\011\022\013\032\014\040\022\055\025\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\175\004\020\011\022\013\032\014\040\022\055\025\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\171\011\022\013\032\014" +
    "\040\022\055\025\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\147\004\020\011\022\013\032\014\040\022\055\025" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\146\011\022\013\032\014\040\022\055\025\053\001" +
    "\001\000\002\001\001\000\016\004\102\011\022\013\032" +
    "\014\040\022\055\025\053\001\001\000\004\012\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\061" +
    "\004\020\010\062\011\022\013\032\014\040\022\055\025" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\065\004\020\011\022\013\032\014\040\022\055\025" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\061\004\020\010" +
    "\073\011\022\012\072\013\032\014\040\022\055\025\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\061\004\020\010\100\011\022\013\032\014" +
    "\040\022\055\025\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\145\011\022\013" +
    "\032\014\040\022\055\025\053\001\001\000\016\004\144" +
    "\011\022\013\032\014\040\022\055\025\053\001\001\000" +
    "\016\004\143\011\022\013\032\014\040\022\055\025\053" +
    "\001\001\000\016\004\142\011\022\013\032\014\040\022" +
    "\055\025\053\001\001\000\016\004\141\011\022\013\032" +
    "\014\040\022\055\025\053\001\001\000\016\004\140\011" +
    "\022\013\032\014\040\022\055\025\053\001\001\000\016" +
    "\004\137\011\022\013\032\014\040\022\055\025\053\001" +
    "\001\000\016\004\136\011\022\013\032\014\040\022\055" +
    "\025\053\001\001\000\016\004\135\011\022\013\032\014" +
    "\040\022\055\025\053\001\001\000\016\004\134\011\022" +
    "\013\032\014\040\022\055\025\053\001\001\000\016\004" +
    "\133\011\022\013\032\014\040\022\055\025\053\001\001" +
    "\000\002\001\001\000\016\004\132\011\022\013\032\014" +
    "\040\022\055\025\053\001\001\000\016\004\131\011\022" +
    "\013\032\014\040\022\055\025\053\001\001\000\016\004" +
    "\130\011\022\013\032\014\040\022\055\025\053\001\001" +
    "\000\016\004\127\011\022\013\032\014\040\022\055\025" +
    "\053\001\001\000\016\004\126\011\022\013\032\014\040" +
    "\022\055\025\053\001\001\000\016\004\125\011\022\013" +
    "\032\014\040\022\055\025\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\150\004\020\011\022\013\032" +
    "\014\040\022\055\024\151\025\053\001\001\000\002\001" +
    "\001\000\020\003\152\004\020\011\022\013\032\014\040" +
    "\022\055\025\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\031\004\020\005\015\006\155\007\035" +
    "\011\022\013\032\014\040\015\043\016\034\022\055\025" +
    "\053\001\001\000\030\003\031\004\020\005\156\007\035" +
    "\011\022\013\032\014\040\015\043\016\034\022\055\025" +
    "\053\001\001\000\002\001\001\000\032\003\031\004\020" +
    "\005\015\006\160\007\035\011\022\013\032\014\040\015" +
    "\043\016\034\022\055\025\053\001\001\000\030\003\031" +
    "\004\020\005\156\007\035\011\022\013\032\014\040\015" +
    "\043\016\034\022\055\025\053\001\001\000\022\003\061" +
    "\004\020\010\167\011\022\013\032\014\040\022\055\025" +
    "\053\001\001\000\002\001\001\000\020\003\164\004\020" +
    "\011\022\013\032\014\040\022\055\025\053\001\001\000" +
    "\002\001\001\000\020\003\166\004\020\011\022\013\032" +
    "\014\040\022\055\025\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\061\004\020\010\173\011\022\013\032\014\040\022" +
    "\055\025\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\031\004\020\005\015\006" +
    "\177\007\035\011\022\013\032\014\040\015\043\016\034" +
    "\022\055\025\053\001\001\000\030\003\031\004\020\005" +
    "\156\007\035\011\022\013\032\014\040\015\043\016\034" +
    "\022\055\025\053\001\001\000\032\003\031\004\020\005" +
    "\015\006\201\007\035\011\022\013\032\014\040\015\043" +
    "\016\034\022\055\025\053\001\001\000\030\003\031\004" +
    "\020\005\156\007\035\011\022\013\032\014\040\015\043" +
    "\016\034\022\055\025\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\061\004\020\010\210\011\022\012\207\013\032\014" +
    "\040\022\055\025\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\162" +
    "\001\001\000\020\003\220\004\020\011\022\013\032\014" +
    "\040\022\055\025\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\061\004\020\010\223\011\022\013" +
    "\032\014\040\022\055\025\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\031\004\020\005\015\006\235\007\035\011\022\013" +
    "\032\014\040\015\043\016\034\022\055\025\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\031\004" +
    "\020\005\156\007\035\011\022\013\032\014\040\015\043" +
    "\016\034\022\055\025\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= id PARAMETRO igual INSTRUCCIONES end 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= id igual INSTRUCCIONES end 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETRO ::= PARAMETRO coma id 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETRO ::= id 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= LISTA 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWITCH 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= IF 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA ::= let id igual MATRIZ 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA ::= let id igual ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MATRIZ ::= MATRIZ coma corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MATRIZ ::= corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MATRIZ ::= corcheteA MATRIZ corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= ELEMENTO coma OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CALCULAR ::= dollar calcular OP dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CALCULAR ::= calcular OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACION_LISTA ::= dollar OPERACION_LISTA dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION_LISTA ::= NOMBRE_OP MATRIZ 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_LISTA ::= NOMBRE_OP id 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_LISTA ::= id POSICION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NOMBRE_OP ::= sum 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NOMBRE_OP ::= product 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NOMBRE_OP ::= revers 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NOMBRE_OP ::= impr 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NOMBRE_OP ::= asc 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NOMBRE_OP ::= desc 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NOMBRE_OP ::= par 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NOMBRE_OP ::= length 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // POSICION ::= POSICION posicion OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSICION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // POSICION ::= posicion OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSICION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= si OP entonces INSTRUCCIONES sino INSTRUCCIONES end 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= caso OP CASO end 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASO ::= CASO OP dosPuntos INSTRUCCIONES 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASO ::= OP dosPuntos INSTRUCCIONES 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAMADA ::= id llaveA ELEMENTO llaveC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADA ::= dollar id llaveA ELEMENTO llaveC dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  "(" + a.texto + ")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "+" + b.texto;
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Double.parseDouble(a.valor) + Double.parseDouble(b.valor);
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (+) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "-" + b.texto;
    try{
       // System.out.println("Menos ="+(a.valor)+","+(b.valor));
        RESULT.val = Double.parseDouble(a.valor) - Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (-) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "*" + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) * Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (*) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E div E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " / " + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) / Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (/) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " > " + b.texto;
    try{
       if( Double.parseDouble(a.valor) > Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " < " + b.texto;
    try{
       if( Double.parseDouble(a.valor) < Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " >= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) >= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>=) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " <= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) <= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<=) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E igual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " = " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " == " + b.texto;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " != " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= new Caracter();
    RESULT.valor = "true";
    RESULT.cadena = true;
    RESULT.texto = "true";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "false";
    RESULT.cadena = true;
    RESULT.texto =  "false";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " || " + b.texto +")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " %% " + b.texto +")";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = "a";
    RESULT.texto = "! " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E mod E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E sqrt E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "raiz (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            //RESULT.val = Metodo_Funcion.raiz(Double.parseDouble(a.valor),Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (r) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E pot E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= menos E 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("\"","");
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("'","");
    RESULT.cadena = true;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= numero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = i;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= CALCULAR 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= EXTRAS 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= LLAMADA 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= OPERACION_LISTA 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXTRAS ::= dollar EXTRAS dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXTRAS ::= succ E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXTRAS ::= decc E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXTRAS ::= succ porcentaje 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXTRAS ::= decc porcentaje 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXTRAS ::= min corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXTRAS ::= max corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXTRAS ::= E concatenar E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
