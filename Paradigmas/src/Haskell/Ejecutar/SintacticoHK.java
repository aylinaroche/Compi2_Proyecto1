
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Haskell.Ejecutar;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import Haskell.Ejecutar.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHK extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHK() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHK(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHK(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\006\000\002\007\010\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\010\005\000\002\010" +
    "\003\000\002\017\006\000\002\017\004\000\002\011\004" +
    "\000\002\014\004\000\002\014\004\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\005\000\002\016\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\006\000\002\013\004\000\002\013\006\000\002\013" +
    "\004\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\064\004\024\005\022\011\013\012\031\013" +
    "\016\014\007\016\020\021\042\025\025\037\014\046\030" +
    "\047\044\053\033\054\037\055\034\056\040\057\023\064" +
    "\011\065\010\066\012\067\032\070\027\071\015\073\036" +
    "\074\035\001\002\000\066\002\ufffc\004\ufffc\005\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\021\ufffc\025\ufffc" +
    "\037\ufffc\046\ufffc\047\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\073\ufffc\074\ufffc\001\002\000\066\002\ufff9\004" +
    "\ufff9\005\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9" +
    "\021\ufff9\025\ufff9\037\ufff9\046\ufff9\047\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\073\ufff9\074\ufff9\001\002\000" +
    "\066\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\021\ufffe\025\ufffe\037\ufffe\046\ufffe\047" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\073\ufffe\074" +
    "\ufffe\001\002\000\136\002\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\042\uffcd\043\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\001\002\000\032\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\016\uffeb\021\uffeb\025\uffeb\037\uffeb" +
    "\041\uffeb\046\uffeb\047\uffeb\057\uffeb\001\002\000\032\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\016\uffec\021\uffec\025\uffec" +
    "\037\uffec\041\uffec\046\uffec\047\uffec\057\uffec\001\002\000" +
    "\032\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\021\uffea" +
    "\025\uffea\037\uffea\041\uffea\046\uffea\047\uffea\057\uffea\001" +
    "\002\000\064\004\024\005\022\011\053\012\031\013\016" +
    "\014\007\016\020\021\042\025\025\037\014\046\030\047" +
    "\044\053\167\054\037\055\034\056\040\057\023\064\011" +
    "\065\010\066\012\067\032\070\027\071\015\073\036\074" +
    "\035\001\002\000\030\011\053\012\051\013\016\014\007" +
    "\016\020\021\042\025\025\037\014\046\030\047\044\057" +
    "\023\001\002\000\032\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\021\uffe5\025\uffe5\037\uffe5\041\uffe5\046\uffe5\047" +
    "\uffe5\057\uffe5\001\002\000\136\002\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\043\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000\066\002" +
    "\000\004\024\005\022\011\013\012\031\013\016\014\007" +
    "\016\020\021\042\025\025\037\014\046\030\047\044\053" +
    "\033\054\037\055\034\056\040\057\023\064\011\065\010" +
    "\066\012\067\032\070\027\071\015\073\036\074\035\001" +
    "\002\000\136\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\042\uffc8\043\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\066\002\ufffb\004\ufffb\005" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\021\ufffb" +
    "\025\ufffb\037\ufffb\046\ufffb\047\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\073\ufffb\074\ufffb\001\002\000\030\011" +
    "\053\012\051\013\016\014\007\016\020\021\042\025\025" +
    "\037\014\046\030\047\044\057\023\001\002\000\136\002" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\001\002\000\030\011\053\012\051\013\016\014\007\016" +
    "\020\021\042\025\025\037\014\046\030\047\044\057\023" +
    "\001\002\000\030\011\053\012\051\013\016\014\007\016" +
    "\020\021\042\025\025\037\014\046\030\047\044\057\023" +
    "\001\002\000\042\006\066\007\071\010\067\024\072\025" +
    "\062\026\070\027\056\030\073\031\063\032\057\033\065" +
    "\034\064\035\060\036\061\050\074\075\160\001\002\000" +
    "\032\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6" +
    "\025\uffe6\037\uffe6\041\uffe6\046\uffe6\047\uffe6\057\uffe6\001" +
    "\002\000\136\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\001\002\000\074\006\uffca\007\uffca\010" +
    "\uffca\011\053\012\051\013\016\014\007\015\152\016\020" +
    "\021\042\024\uffca\025\025\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\014" +
    "\041\047\043\151\046\030\047\044\050\uffca\057\023\075" +
    "\uffca\001\002\000\032\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\021\uffe9\025\uffe9\037\uffe9\041\uffe9\046\uffe9\047" +
    "\uffe9\057\uffe9\001\002\000\004\012\144\001\002\000\032" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\021\uffe8\025" +
    "\uffe8\037\uffe8\041\uffe8\046\uffe8\047\uffe8\057\uffe8\001\002" +
    "\000\032\011\053\012\051\013\016\014\007\016\020\021" +
    "\042\025\025\037\014\041\140\046\030\047\044\057\023" +
    "\001\002\000\032\011\053\012\051\013\016\014\007\016" +
    "\020\021\042\025\025\037\014\041\134\046\030\047\044" +
    "\057\023\001\002\000\030\011\053\012\051\013\016\014" +
    "\007\016\020\021\042\025\025\037\014\046\030\047\044" +
    "\057\023\001\002\000\032\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\021\uffe7\025\uffe7\037\uffe7\041\uffe7\046\uffe7" +
    "\047\uffe7\057\uffe7\001\002\000\066\002\ufffa\004\ufffa\005" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\021\ufffa" +
    "\025\ufffa\037\ufffa\046\ufffa\047\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\073\ufffa\074\ufffa\001\002\000\030\011" +
    "\053\012\051\013\016\014\007\016\020\021\042\025\025" +
    "\037\014\046\030\047\044\057\023\001\002\000\066\002" +
    "\ufffd\004\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\016\ufffd\021\ufffd\025\ufffd\037\ufffd\046\ufffd\047\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\070\ufffd\071\ufffd\073\ufffd\074\ufffd\001" +
    "\002\000\136\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\073\uffd5" +
    "\074\uffd5\075\uffd5\001\002\000\004\002\130\001\002\000" +
    "\032\011\053\012\051\013\016\014\007\016\020\021\042" +
    "\025\025\037\014\041\047\046\030\047\044\057\023\001" +
    "\002\000\032\011\053\012\051\013\016\014\007\016\020" +
    "\021\042\025\025\037\014\041\047\046\030\047\044\057" +
    "\023\001\002\000\074\002\ufff2\004\ufff2\005\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\023" +
    "\ufff2\025\ufff2\037\ufff2\042\ufff2\046\ufff2\047\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\073\ufff2\074\ufff2\001\002" +
    "\000\136\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\042\uffca\043\uffca\046\uffca\047\uffca\050" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\073\uffca\074" +
    "\uffca\075\uffca\001\002\000\074\002\ufff4\004\ufff4\005\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\023\124\025\ufff4\037\ufff4\042\ufff4\046\ufff4\047\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073\ufff4\074\ufff4" +
    "\001\002\000\062\004\024\005\022\011\053\012\031\013" +
    "\016\014\007\016\020\021\042\025\025\037\014\046\030" +
    "\047\044\054\037\055\034\056\040\057\023\064\011\065" +
    "\010\066\012\067\032\070\027\071\015\073\036\074\035" +
    "\001\002\000\070\002\uffee\004\uffee\005\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\021\uffee\023\114\025\uffee" +
    "\037\uffee\046\uffee\047\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\073\uffee\074\uffee\001\002\000\132\002\uffe2\004" +
    "\uffe2\005\uffe2\006\066\007\071\010\067\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024" +
    "\072\025\062\026\070\027\056\030\073\031\063\032\057" +
    "\033\065\034\064\035\060\036\061\037\uffe2\042\uffe2\043" +
    "\uffe2\046\uffe2\047\uffe2\050\074\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\073\uffe2\074\uffe2\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\030\011\053" +
    "\012\051\013\016\014\007\016\020\021\042\025\025\037" +
    "\014\046\030\047\044\057\023\001\002\000\136\002\uffd8" +
    "\004\uffd8\005\uffd8\006\066\007\071\010\067\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\060\036\061\037\uffd8" +
    "\042\uffd8\043\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\073\uffd8\074\uffd8\075\uffd8\001" +
    "\002\000\136\002\uffdc\004\uffdc\005\uffdc\006\066\007\071" +
    "\010\067\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\064\035" +
    "\060\036\061\037\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc" +
    "\050\074\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\001\002\000\136\002\uffe0\004\uffe0\005" +
    "\uffe0\006\066\007\071\010\067\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\070\027\056\030\073\031\063\032\057" +
    "\033\065\034\064\035\060\036\061\037\uffe0\042\uffe0\043" +
    "\uffe0\046\uffe0\047\uffe0\050\074\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000\136" +
    "\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\071\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\042\uffd0\043\uffd0\046\uffd0\047\uffd0\050\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\136\002\uffde\004\uffde\005\uffde\006\066" +
    "\007\071\010\067\011\uffde\012\uffde\013\uffde\014\uffde\016" +
    "\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\073\031\063\032\057\033\065\034" +
    "\064\035\060\036\061\037\uffde\042\uffde\043\uffde\046\uffde" +
    "\047\uffde\050\074\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\073\uffde\074\uffde\075\uffde\001\002\000\136\002\uffd1\004" +
    "\uffd1\005\uffd1\006\066\007\071\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\042" +
    "\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002" +
    "\000\136\002\uffcf\004\uffcf\005\uffcf\006\066\007\071\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\042\uffcf\043\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\001\002\000\136\002\uffd9\004\uffd9\005\uffd9" +
    "\006\066\007\071\010\067\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\064\035\060\036\061\037\uffd9\042\uffd9\043\uffd9" +
    "\046\uffd9\047\uffd9\050\074\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\071\uffd9\073\uffd9\074\uffd9\075\uffd9\001\002\000\136\002" +
    "\uffd7\004\uffd7\005\uffd7\006\066\007\071\010\067\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\060\036\061\037" +
    "\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\001\002\000\136\002\uffdb\004\uffdb\005\uffdb\006\066\007" +
    "\071\010\067\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\064" +
    "\035\060\036\061\037\uffdb\042\uffdb\043\uffdb\046\uffdb\047" +
    "\uffdb\050\074\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\001\002\000\136\002\uffdf\004\uffdf" +
    "\005\uffdf\006\066\007\071\010\067\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\070\027\056\030\073\031\063\032" +
    "\057\033\065\034\064\035\060\036\061\037\uffdf\042\uffdf" +
    "\043\uffdf\046\uffdf\047\uffdf\050\074\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\001\002\000" +
    "\136\002\uffd3\004\uffd3\005\uffd3\006\066\007\071\010\067" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\073\uffd3\074\uffd3" +
    "\075\uffd3\001\002\000\136\002\uffd4\004\uffd4\005\uffd4\006" +
    "\066\007\071\010\067\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4\043\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\001\002\000\136\002\uffda" +
    "\004\uffda\005\uffda\006\066\007\071\010\067\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\064\035\060\036\061\037\uffda" +
    "\042\uffda\043\uffda\046\uffda\047\uffda\050\074\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\070\uffda\071\uffda\073\uffda\074\uffda\075\uffda\001" +
    "\002\000\136\002\uffdd\004\uffdd\005\uffdd\006\066\007\071" +
    "\010\067\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\073\031\063\032\057\033\065\034\064\035" +
    "\060\036\061\037\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd" +
    "\050\074\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\001\002\000\032\011\053\012\051\013" +
    "\016\014\007\016\020\021\042\025\025\037\014\041\047" +
    "\046\030\047\044\057\023\001\002\000\074\002\ufff6\004" +
    "\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\023\ufff6\025\ufff6\037\ufff6\042\ufff6\046" +
    "\ufff6\047\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\073" +
    "\ufff6\074\ufff6\001\002\000\004\011\uffc4\001\002\000\004" +
    "\011\uffc6\001\002\000\004\011\uffc7\001\002\000\004\011" +
    "\123\001\002\000\004\011\uffc5\001\002\000\136\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\042\uffc9\043\uffc9\046\uffc9\047\uffc9\050\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\073\uffc9\074\uffc9\075\uffc9\001" +
    "\002\000\030\011\053\012\051\013\016\014\007\016\020" +
    "\021\042\025\025\037\014\046\030\047\044\057\023\001" +
    "\002\000\074\002\ufff3\004\ufff3\005\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\017\ufff3\021\ufff3\023\ufff3\025" +
    "\ufff3\037\ufff3\042\ufff3\046\ufff3\047\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\064\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\071\ufff3\073\ufff3\074\ufff3\001\002\000\006" +
    "\023\114\042\127\001\002\000\074\002\ufff5\004\ufff5\005" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5" +
    "\021\ufff5\023\ufff5\025\ufff5\037\ufff5\042\ufff5\046\ufff5\047" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\073\ufff5\074" +
    "\ufff5\001\002\000\004\002\001\001\002\000\042\006\066" +
    "\007\071\010\067\022\132\024\072\025\062\026\070\027" +
    "\056\030\073\031\063\032\057\033\065\034\064\035\060" +
    "\036\061\050\074\001\002\000\136\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\042\uffe1\043" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\073\uffe1\074\uffe1\075\uffe1\001\002\000\066" +
    "\002\uffef\004\uffef\005\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\016\uffef\021\uffef\025\uffef\037\uffef\046\uffef\047\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\073\uffef\074\uffef" +
    "\001\002\000\030\011\053\012\051\013\016\014\007\016" +
    "\020\021\042\025\025\037\014\046\030\047\044\057\023" +
    "\001\002\000\070\002\uffbe\004\uffbe\005\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\016\uffbe\021\uffbe\023\124\025\uffbe" +
    "\037\uffbe\046\uffbe\047\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\073\uffbe\074\uffbe\001\002\000\006\023\124\042" +
    "\137\001\002\000\066\002\uffbf\004\uffbf\005\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\016\uffbf\021\uffbf\025\uffbf\037" +
    "\uffbf\046\uffbf\047\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\073\uffbf\074\uffbf\001\002\000\030\011\053\012\051" +
    "\013\016\014\007\016\020\021\042\025\025\037\014\046" +
    "\030\047\044\057\023\001\002\000\070\002\uffc0\004\uffc0" +
    "\005\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\021" +
    "\uffc0\023\124\025\uffc0\037\uffc0\046\uffc0\047\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\073\uffc0\074\uffc0\001\002" +
    "\000\006\023\124\042\143\001\002\000\066\002\uffc1\004" +
    "\uffc1\005\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1" +
    "\021\uffc1\025\uffc1\037\uffc1\046\uffc1\047\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\073\uffc1\074\uffc1\001\002\000" +
    "\004\020\145\001\002\000\032\011\053\012\051\013\016" +
    "\014\007\016\020\021\042\025\025\037\014\041\047\046" +
    "\030\047\044\057\023\001\002\000\070\002\ufff8\004\ufff8" +
    "\005\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\021" +
    "\ufff8\023\114\025\ufff8\037\ufff8\046\ufff8\047\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\073\ufff8\074\ufff8\001\002" +
    "\000\070\002\uffed\004\uffed\005\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\021\uffed\025\uffed\037\uffed\043\156" +
    "\046\uffed\047\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed" +
    "\073\uffed\074\uffed\001\002\000\070\002\ufff0\004\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\021\ufff0" +
    "\023\114\025\ufff0\037\ufff0\046\ufff0\047\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\073\ufff0\074\ufff0\001\002\000" +
    "\030\011\053\012\051\013\016\014\007\016\020\021\042" +
    "\025\025\037\014\046\030\047\044\057\023\001\002\000" +
    "\032\011\053\012\051\013\016\014\007\016\020\021\042" +
    "\025\025\037\014\041\047\046\030\047\044\057\023\001" +
    "\002\000\006\017\154\023\114\001\002\000\066\002\ufff1" +
    "\004\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\021\ufff1\025\ufff1\037\ufff1\046\ufff1\047\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\057\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\073\ufff1\074\ufff1\001\002" +
    "\000\070\002\uffe3\004\uffe3\005\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\016\uffe3\021\uffe3\025\uffe3\037\uffe3\043\uffe3" +
    "\046\uffe3\047\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\073\uffe3\074\uffe3\001\002\000\030\011\053\012\051\013" +
    "\016\014\007\016\020\021\042\025\025\037\014\046\030" +
    "\047\044\057\023\001\002\000\070\002\uffe4\004\uffe4\005" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\021\uffe4" +
    "\025\uffe4\037\uffe4\043\uffe4\046\uffe4\047\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\073\uffe4\074\uffe4\001\002\000" +
    "\030\011\053\012\051\013\016\014\007\016\020\021\042" +
    "\025\025\037\014\046\030\047\044\057\023\001\002\000" +
    "\122\002\uffbd\004\uffbd\005\uffbd\006\066\007\071\010\067" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\021\uffbd\024" +
    "\072\025\uffbd\026\070\027\056\030\073\031\063\032\057" +
    "\033\065\034\064\035\060\036\061\037\uffbd\046\uffbd\047" +
    "\uffbd\050\074\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\001\002\000\136\002\uffce\004\uffce\005\uffce" +
    "\006\066\007\071\010\067\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\016\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\070\027\056\030\073\031\063\032\057\033" +
    "\065\034\064\035\060\036\061\037\uffce\042\uffce\043\uffce" +
    "\046\uffce\047\uffce\050\074\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\073\uffce\074\uffce\075\uffce\001\002\000\122\002" +
    "\uffc3\004\uffc3\005\uffc3\006\066\007\071\010\067\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\024\072\025" +
    "\062\026\070\027\056\030\073\031\063\032\057\033\065" +
    "\034\064\035\060\036\061\037\uffc3\046\uffc3\047\uffc3\050" +
    "\074\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3\074" +
    "\uffc3\001\002\000\122\002\uffc2\004\uffc2\005\uffc2\006\066" +
    "\007\071\010\067\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016" +
    "\uffc2\021\uffc2\024\072\025\062\026\070\027\056\030\073" +
    "\031\063\032\057\033\065\034\064\035\060\036\061\037" +
    "\uffc2\046\uffc2\047\uffc2\050\074\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\073\uffc2\074\uffc2\001\002\000\066\002\uffff" +
    "\004\uffff\005\uffff\011\uffff\012\uffff\013\uffff\014\uffff\016" +
    "\uffff\021\uffff\025\uffff\037\uffff\046\uffff\047\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\064\uffff\065\uffff\066" +
    "\uffff\067\uffff\070\uffff\071\uffff\073\uffff\074\uffff\001\002" +
    "\000\136\002\uffd2\004\uffd2\005\uffd2\006\066\007\071\010" +
    "\067\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\042\uffd2\043\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\001\002\000\004\012\170\001\002\000\004" +
    "\020\171\001\002\000\032\011\053\012\051\013\016\014" +
    "\007\016\020\021\042\025\025\037\014\041\047\046\030" +
    "\047\044\057\023\001\002\000\006\011\173\023\114\001" +
    "\002\000\066\002\ufff7\004\ufff7\005\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\016\ufff7\021\ufff7\025\ufff7\037\ufff7\046" +
    "\ufff7\047\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\073" +
    "\ufff7\074\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\026\002\044\004\025\005\005\006\016\007" +
    "\042\011\040\013\020\014\003\015\045\017\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\025\011\121\013\117\014\115\015" +
    "\045\017\116\020\120\001\001\000\004\004\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\025\005" +
    "\164\007\042\011\040\013\020\014\003\015\045\017\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\163\001\001\000\002\001\001\000\004\004\162\001\001" +
    "\000\004\004\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\047\004\054\010\051" +
    "\012\147\016\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\047\004\054\010\140" +
    "\001\001\000\010\003\047\004\054\010\134\001\001\000" +
    "\006\003\132\004\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\047\004\054" +
    "\010\051\012\053\001\001\000\012\003\047\004\054\010" +
    "\051\012\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\025\011\121\013\117\014" +
    "\115\015\045\017\116\020\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\112\001\001\000\004\004" +
    "\111\001\001\000\004\004\110\001\001\000\004\004\107" +
    "\001\001\000\004\004\106\001\001\000\004\004\105\001" +
    "\001\000\004\004\104\001\001\000\004\004\103\001\001" +
    "\000\004\004\102\001\001\000\004\004\101\001\001\000" +
    "\004\004\100\001\001\000\004\004\077\001\001\000\004" +
    "\004\076\001\001\000\004\004\075\001\001\000\004\004" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\047\004\054\010\051\012\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\124\004\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\047" +
    "\004\054\010\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\047\004\054\010\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\047\004\054\010\051" +
    "\012\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\154\004\054\001\001\000\012" +
    "\003\047\004\054\010\051\012\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\156" +
    "\004\054\001\001\000\002\001\001\000\004\004\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\047\004\054" +
    "\010\051\012\171\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHK$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHK$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHK$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHK$actions {



  private final SintacticoHK parser;

  /** Constructor */
  CUP$SintacticoHK$actions(SintacticoHK parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHK$do_action_part00000000(
    int                        CUP$SintacticoHK$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHK$parser,
    java.util.Stack            CUP$SintacticoHK$stack,
    int                        CUP$SintacticoHK$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHK$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHK$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHK$parser.done_parsing();
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INICIO");
    E.insertar(n.nodo);
    RESULT.nodo = E;
    EjecutarHK.raiz=E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(m.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= LISTA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= OPERACION_LISTA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= EXTRAS 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CALCULAR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= LLAMADA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA ::= let id igual MATRIZ 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= dollar let id igual MATRIZ dollar 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MATRIZ ::= MATRIZ coma MATRIZ 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    //E.insertar(m.nodo);  E.insertar(new Nodo(",")); E.insertar(new Nodo("[")); E.insertar(n.nodo); E.insertar(new Nodo("]"));
    E.insertar(m.nodo);  E.insertar(new Nodo(",")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MATRIZ ::= corcheteA MATRIZ corcheteC 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(new Nodo("[")); E.insertar(m.nodo); E.insertar(new Nodo("]"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MATRIZ ::= ELEMENTO 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("MATRIZ",8, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO ::= ELEMENTO coma OP 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(a.nodo);  E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("ELEMENTO",6, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA ::= id llaveA MATRIZ llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("LLAMADA");
     E.insertar(new Nodo(i)); E.insertar(new Nodo("{")); E.insertar(n.nodo); E.insertar(new Nodo("}"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("LLAMADA",13, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LLAMADA ::= id MATRIZ 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("LLAMADA");
    E.insertar(new Nodo(i));E.insertar(n.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("LLAMADA",13, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CALCULAR ::= calcular OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("CALCULAR");
    E.insertar(new Nodo("Calcular")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACION_LISTA ::= NOMBRE_OP MATRIZ 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(n.nodo); E.insertar(m.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACION_LISTA ::= id POSICION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(new Nodo(i)); E.insertar(p.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOMBRE_OP ::= sum 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOMBRE_OP ::= product 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOMBRE_OP ::= revers 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOMBRE_OP ::= impr 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOMBRE_OP ::= asc 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NOMBRE_OP ::= desc 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NOMBRE_OP ::= par 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NOMBRE_OP ::= length 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",11, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // POSICION ::= POSICION posicion OP 
            {
              Caracter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter o = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(p.nodo); E.insertar(new Nodo("!!"));E.insertar(o.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("POSICION",12, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // POSICION ::= posicion OP 
            {
              Caracter RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter o = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(new Nodo("!!")); E.insertar(o.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("POSICION",12, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP ::= E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo OP = new Nodo("OP");
    RESULT = new Caracter();
    OP.insertar(a.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OP",1, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("(")); E.insertar(a.nodo); E.insertar(new Nodo(")"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("+")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("*")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E div E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("/")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("true","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("false","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("%%")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("!")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E mod E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'mod'")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E sqrt E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'sqrt'")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E pot E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'pot'")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= menos E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"cadena"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("'","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"caracter"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= numero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"numero"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(i,"id"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= dollar OPCION dollar 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= porcentaje 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo("%"));
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPCION ::= EXTRAS 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPCION ::= LLAMADA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPCION ::= CALCULAR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPCION ::= OPERACION_LISTA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("OPCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXTRAS ::= succ E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Succ")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXTRAS ::= decc E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Decc")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXTRAS ::= min corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Min")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXTRAS ::= min ELEMENTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXTRAS ::= max corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXTRAS ::= max ELEMENTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXTRAS ::= E concatenar E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoHK$stack.peek()).value;
		
    RESULT = new Caracter();
    Nodo EXTRAS =new Nodo("EXTRAS");
    EXTRAS.insertar((a.nodo)); EXTRAS.insertar(new Nodo("++")); EXTRAS.insertar(b.nodo);
    RESULT.nodo = EXTRAS;

              CUP$SintacticoHK$result = parser.getSymbolFactory().newSymbol("EXTRAS",9, ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.elementAt(CUP$SintacticoHK$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHK$stack.peek()), RESULT);
            }
          return CUP$SintacticoHK$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHK$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHK$do_action(
    int                        CUP$SintacticoHK$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHK$parser,
    java.util.Stack            CUP$SintacticoHK$stack,
    int                        CUP$SintacticoHK$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHK$do_action_part00000000(
                               CUP$SintacticoHK$act_num,
                               CUP$SintacticoHK$parser,
                               CUP$SintacticoHK$stack,
                               CUP$SintacticoHK$top);
    }
}

}
