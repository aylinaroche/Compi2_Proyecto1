package Haskell.Ejecutar;
import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import Haskell.Ejecutar.Nodo;

init with {:

:};
parser code
{:
// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}
:}

action code
{:
:}

terminal String succ,decc,pot,sqrt,mod,dollar,id,numero,cadena,llaveA,porcentaje,
llaveC,igual,parentesisA,parentesisC,coma,mas,menos,por,div,mayor,menor,mayorIgual,
menorIgual,diferente,or,and,not,puntoComa,corcheteA,corcheteC,posicion,salto,
dosPuntos,verdadero,falso,igualDoble,decimal,end,let,calcular,asc,desc,caracter,
si,sino,interrumpir,caso,sum,product,revers,impr,par,length,entonces,max,min,
concatenar,ERROR;


non terminal Caracter INICIO,OP,E,INSTRUCCION,INSTRUCCIONES,LISTA,ELEMENTO,
CALCULAR,MATRIZ,EXTRAS,OPERACION_LISTA,NOMBRE_OP,POSICION,LLAMADA,OPCION,ELEM;

precedence left mas, menos;
precedence left por, div;
precedence left mayor,menor,mayorIgual,menorIgual;
precedence left igual,diferente,igualDoble;
precedence left or,and,not;
precedence left mod,concatenar;
precedence right pot;
precedence right sqrt;
precedence left sino,dosPuntos,posicion,coma,salto;
precedence right caso;

start with INICIO;

INICIO::=INSTRUCCIONES:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INICIO");
    E.insertar(n.nodo);
    RESULT.nodo = E;
    EjecutarHK.raiz=E;
:};

INSTRUCCIONES::=INSTRUCCIONES:m INSTRUCCION:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(m.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|INSTRUCCION:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCIONES");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


INSTRUCCION::=LISTA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|OPERACION_LISTA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|EXTRAS:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|CALCULAR:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|LLAMADA:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("INSTRUCCION");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


LISTA::= let id:i igual MATRIZ:m{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:}
|dollar let id:i igual MATRIZ:m dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("LISTA");
    E.insertar(new Nodo("let")); E.insertar(new Nodo(i)); E.insertar(new Nodo("="));  E.insertar(m.nodo);
    RESULT.nodo = E;
:};


MATRIZ::=MATRIZ:m coma MATRIZ:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    //E.insertar(m.nodo);  E.insertar(new Nodo(",")); E.insertar(new Nodo("[")); E.insertar(n.nodo); E.insertar(new Nodo("]"));
    E.insertar(m.nodo);  E.insertar(new Nodo(",")); E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|corcheteA MATRIZ:m corcheteC{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(new Nodo("[")); E.insertar(m.nodo); E.insertar(new Nodo("]"));
    RESULT.nodo = E;
:}
|ELEMENTO:m{:
    RESULT = new Caracter();
    Nodo E = new Nodo("MATRIZ");
    E.insertar(m.nodo);
    RESULT.nodo = E;
:};


ELEMENTO::= ELEMENTO:a coma OP:b{:
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(a.nodo);  E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|OP:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("ELEMENTO");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


LLAMADA::=  id:i llaveA MATRIZ:n llaveC {:
    RESULT = new Caracter();
    Nodo E = new Nodo("LLAMADA");
     E.insertar(new Nodo(i)); E.insertar(new Nodo("{")); E.insertar(n.nodo); E.insertar(new Nodo("}"));
    RESULT.nodo = E;
:}
|id:i MATRIZ:n  {:
    RESULT = new Caracter();
    Nodo E = new Nodo("LLAMADA");
    E.insertar(new Nodo(i));E.insertar(n.nodo); 
    RESULT.nodo = E;
:};



CALCULAR::= calcular OP:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("CALCULAR");
    E.insertar(new Nodo("Calcular")); E.insertar(n.nodo);
    RESULT.nodo = E;
:};


OPERACION_LISTA::= NOMBRE_OP:n MATRIZ:m {:
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(n.nodo); E.insertar(m.nodo); 
    RESULT.nodo = E;
:}
| id:i POSICION:p {:
    RESULT = new Caracter();
    Nodo E = new Nodo("OPERACION_LISTA");
     E.insertar(new Nodo(i)); E.insertar(p.nodo); 
    RESULT.nodo = E;
:};


NOMBRE_OP ::= sum:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|product:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|revers:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|impr:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|asc:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|desc:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|par:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:}
|length:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("NOMBRE_OP");
    E.insertar(new Nodo(n));
    RESULT.nodo = E;
:};


POSICION::=POSICION:p posicion OP:o{:
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(p.nodo); E.insertar(new Nodo("!!"));E.insertar(o.nodo);
    RESULT.nodo = E;
:}
|posicion OP:o{:
    RESULT = new Caracter();
    Nodo E = new Nodo("POSICION");
    E.insertar(new Nodo("!!")); E.insertar(o.nodo);
    RESULT.nodo = E;
:};




OP::=E:a{:
    Nodo OP = new Nodo("OP");
    RESULT = new Caracter();
    OP.insertar(a.nodo);
    RESULT.nodo = OP;
:};

E::=parentesisA E:a parentesisC{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("(")); E.insertar(a.nodo); E.insertar(new Nodo(")"));
    RESULT.nodo = E;
:}
|E:a mas E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("+")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a menos E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a por E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("*")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a div E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("/")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a mayor E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a menor E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a mayorIgual E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a menorIgual E:b{: 
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a igualDoble E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a diferente E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|verdadero:t{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("true","bool"));
    RESULT.nodo = E;
 :}
|falso:f{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("false","bool"));
    RESULT.nodo = E;
 :}
|E:a or E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a and E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("%%")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|not E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("!")); E.insertar(b.nodo);
    RESULT.nodo = E;
 :}
|E:a mod E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'mod'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a sqrt E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'sqrt'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|E:a pot E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new Nodo("'pot'")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|menos E:b{:
    Nodo E = new Nodo("E");
    RESULT = new Caracter();
    E.insertar(new Nodo("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
:}
|cadena:n{:
    RESULT = new Caracter();
    n = n.replace("\"","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"cadena"));
    RESULT.nodo = E;
:}
|caracter:n{:
    RESULT = new Caracter();
    n = n.replace("'","");
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"caracter"));
    RESULT.nodo = E;
:}
|numero:n{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(n,"numero"));
    RESULT.nodo = E;
:}
|id:i{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo(i,"id"));
    RESULT.nodo = E;
:}
|dollar OPCION:m dollar{:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(m.nodo);
    RESULT.nodo = E;
:}
|porcentaje {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(new Nodo("%"));
    RESULT.nodo = E;
:};


OPCION::=EXTRAS:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|LLAMADA:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|CALCULAR:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:}
|OPERACION_LISTA:n {:
    RESULT = new Caracter();
    Nodo E = new Nodo("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;
:};


EXTRAS::=  succ E:e {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Succ")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
| decc E:e {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Decc")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
| min corcheteA ELEMENTO:e corcheteC {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Min")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;
:}
| min ELEMENTO:e {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
| max corcheteA ELEMENTO:e corcheteC {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(new Nodo("[")); EXTRAS.insertar(e.nodo); EXTRAS.insertar(new Nodo("]"));
    RESULT.nodo = EXTRAS;
:}
| max ELEMENTO:e {:
    RESULT = new Caracter();
    Nodo EXTRAS = new Nodo("EXTRAS");
    EXTRAS.insertar(new Nodo("Max")); EXTRAS.insertar(e.nodo);
    RESULT.nodo = EXTRAS;
:}
|E:a concatenar E:b{:
    RESULT = new Caracter();
    Nodo EXTRAS =new Nodo("EXTRAS");
    EXTRAS.insertar((a.nodo)); EXTRAS.insertar(new Nodo("++")); EXTRAS.insertar(b.nodo);
    RESULT.nodo = EXTRAS;
:};




