
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Graphik;

import java_cup.runtime.*;
import java.util.ArrayList;
import Graphik.Ejecutar.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoALS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoALS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoALS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoALS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\047\004\000\002\047\003" +
    "\000\002\004\004\000\002\004\003\000\002\040\007\000" +
    "\002\040\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\002\000\002\006" +
    "\004\000\002\006\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\041\010\000" +
    "\002\041\011\000\002\026\004\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\005\000\002\037\011\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\023\007\000\002\030\006\000\002\030\006\000\002" +
    "\024\006\000\002\024\007\000\002\024\004\000\002\024" +
    "\005\000\002\045\007\000\002\045\010\000\002\045\005" +
    "\000\002\045\006\000\002\025\005\000\002\025\006\000" +
    "\002\033\006\000\002\033\005\000\002\033\005\000\002" +
    "\033\004\000\002\035\004\000\002\035\004\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\022\005" +
    "\000\002\022\003\000\002\007\013\000\002\007\012\000" +
    "\002\017\006\000\002\017\004\000\002\013\011\000\002" +
    "\013\012\000\002\014\006\000\002\015\011\000\002\015" +
    "\013\000\002\016\011\000\002\016\012\000\002\016\011" +
    "\000\002\021\007\000\002\021\006\000\002\031\005\000" +
    "\002\036\015\000\002\036\016\000\002\012\006\000\002" +
    "\012\007\000\002\012\004\000\002\012\006\000\002\012" +
    "\007\000\002\043\013\000\002\043\012\000\002\042\004" +
    "\000\002\042\005\000\002\042\007\000\002\042\010\000" +
    "\002\044\006\000\002\044\005\000\002\020\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\004" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\005" +
    "\000\002\032\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\050" +
    "\006\000\002\051\011\000\002\052\004\000\002\052\003" +
    "\000\002\053\005\000\002\053\011\000\002\053\007\000" +
    "\002\053\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\010\007\011\112\012\114\010\001\002\000" +
    "\006\002\ufffc\114\ufffc\001\002\000\006\002\ufffe\114\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\u015d\001" +
    "\002\000\004\047\026\001\002\000\004\047\022\001\002" +
    "\000\004\047\020\001\002\000\010\007\ufffa\112\ufffa\114" +
    "\ufffa\001\002\000\010\007\011\112\012\114\010\001\002" +
    "\000\006\002\uffff\114\010\001\002\000\010\007\ufffb\112" +
    "\ufffb\114\ufffb\001\002\000\006\002\ufffd\114\ufffd\001\002" +
    "\000\004\065\021\001\002\000\010\007\ufff8\112\ufff8\114" +
    "\ufff8\001\002\000\004\101\023\001\002\000\004\110\024" +
    "\001\002\000\004\065\025\001\002\000\010\007\ufff9\112" +
    "\ufff9\114\ufff9\001\002\000\016\004\034\005\031\006\027" +
    "\055\032\063\ufff3\113\030\001\002\000\010\020\ufff6\063" +
    "\ufff6\065\ufff6\001\002\000\004\047\u0159\001\002\000\010" +
    "\020\ufff5\063\ufff5\065\ufff5\001\002\000\020\004\034\005" +
    "\031\006\027\020\ufff3\055\032\063\ufff3\065\ufff3\001\002" +
    "\000\004\063\035\001\002\000\010\020\ufff4\063\ufff4\065" +
    "\ufff4\001\002\000\022\010\050\011\047\012\036\013\042" +
    "\014\044\015\037\104\040\111\053\001\002\000\004\047" +
    "\uffd7\001\002\000\004\047\uffd4\001\002\000\004\047\uffd2" +
    "\001\002\000\024\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\064\uffed\104\uffed\111\uffed\001\002\000\004" +
    "\047\uffd6\001\002\000\024\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\064\uffee\104\uffee\111\uffee\001\002" +
    "\000\004\047\uffd5\001\002\000\004\047\u0146\001\002\000" +
    "\024\010\050\011\047\012\036\013\042\014\044\015\037" +
    "\064\u0144\104\040\111\053\001\002\000\004\047\uffd8\001" +
    "\002\000\010\047\uffd3\103\246\106\245\001\002\000\024" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\064" +
    "\ufff1\104\ufff1\111\ufff1\001\002\000\024\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\064\uffef\104\uffef\111" +
    "\uffef\001\002\000\020\010\055\011\047\012\036\013\042" +
    "\014\044\015\037\104\040\001\002\000\024\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\064\ufff0\104\ufff0" +
    "\111\ufff0\001\002\000\004\047\uffd3\001\002\000\004\047" +
    "\061\001\002\000\006\020\237\065\236\001\002\000\006" +
    "\020\231\065\230\001\002\000\022\004\034\005\031\006" +
    "\027\020\ufff3\041\066\050\062\055\032\065\ufff3\001\002" +
    "\000\034\016\107\034\076\046\071\047\102\051\226\057" +
    "\100\060\110\073\067\077\070\100\106\102\074\115\073" +
    "\116\075\001\002\000\006\020\uffcc\065\uffcc\001\002\000" +
    "\022\004\034\005\031\006\027\020\ufff3\041\066\050\220" +
    "\055\032\065\ufff3\001\002\000\016\004\034\005\031\006" +
    "\027\020\ufff3\055\032\065\ufff3\001\002\000\034\016\107" +
    "\034\076\046\071\047\102\057\100\060\110\063\101\073" +
    "\067\077\070\100\106\102\074\115\073\116\075\001\002" +
    "\000\074\004\uff85\005\uff85\006\uff85\017\uff85\020\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\051\uff85\052\uff85\054\uff85\055" +
    "\uff85\061\uff85\062\uff85\064\uff85\065\uff85\071\uff85\072\uff85" +
    "\075\uff85\117\uff85\120\uff85\121\uff85\001\002\000\074\004" +
    "\uff82\005\uff82\006\uff82\017\uff82\020\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\042\uff82\043\uff82\044" +
    "\uff82\045\uff82\051\uff82\052\uff82\054\uff82\055\uff82\061\uff82" +
    "\062\uff82\064\uff82\065\uff82\071\uff82\072\uff82\075\uff82\117" +
    "\uff82\120\uff82\121\uff82\001\002\000\032\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\073\067\077\070\100" +
    "\106\102\074\115\073\116\075\001\002\000\016\004\uffc0" +
    "\005\uffc0\006\uffc0\020\uffc0\055\uffc0\065\uffc0\001\002\000" +
    "\004\047\207\001\002\000\074\004\uff84\005\uff84\006\uff84" +
    "\017\uff84\020\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\042\uff84\043\uff84\044\uff84\045\uff84\051\uff84" +
    "\052\uff84\054\uff84\055\uff84\061\uff84\062\uff84\064\uff84\065" +
    "\uff84\071\uff84\072\uff84\075\uff84\117\uff84\120\uff84\121\uff84" +
    "\001\002\000\004\047\201\001\002\000\032\016\107\034" +
    "\076\046\071\047\102\057\100\060\110\073\067\077\070" +
    "\100\106\102\074\115\073\116\075\001\002\000\074\004" +
    "\uff9b\005\uff9b\006\uff9b\017\uff9b\020\uff9b\033\130\034\120" +
    "\035\131\036\123\037\113\040\126\042\125\043\116\044" +
    "\122\045\117\051\uff9b\052\121\054\127\055\uff9b\061\132" +
    "\062\112\064\uff9b\065\uff9b\071\124\072\115\075\uff9b\117" +
    "\uff9b\120\uff9b\121\uff9b\001\002\000\074\004\uff8d\005\uff8d" +
    "\006\uff8d\017\uff8d\020\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\051\uff8d\052\uff8d\054\uff8d\055\uff8d\061\uff8d\062\uff8d\064" +
    "\uff8d\065\uff8d\071\uff8d\072\uff8d\075\uff8d\117\uff8d\120\uff8d" +
    "\121\uff8d\001\002\000\034\016\107\034\076\046\071\047" +
    "\102\057\100\060\110\063\101\073\067\077\070\100\106" +
    "\102\074\115\073\116\075\001\002\000\100\004\uff81\005" +
    "\uff81\006\uff81\017\uff81\020\uff81\033\uff81\034\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\050\156\051\uff81\052\uff81\054\uff81\055\uff81\061\uff81" +
    "\062\uff81\064\uff81\065\uff81\071\uff81\072\uff81\075\uff81\101" +
    "\154\117\uff81\120\uff81\121\uff81\001\002\000\074\004\uff80" +
    "\005\uff80\006\uff80\017\uff80\020\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\042\uff80\043\uff80\044\uff80" +
    "\045\uff80\051\uff80\052\uff80\054\uff80\055\uff80\061\uff80\062" +
    "\uff80\064\uff80\065\uff80\071\uff80\072\uff80\075\uff80\117\uff80" +
    "\120\uff80\121\uff80\001\002\000\016\004\uffbf\005\uffbf\006" +
    "\uffbf\020\152\055\uffbf\065\uffbf\001\002\000\074\004\uff7e" +
    "\005\uff7e\006\uff7e\017\uff7e\020\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\045\uff7e\051\uff7e\052\uff7e\054\uff7e\055\uff7e\061\uff7e\062" +
    "\uff7e\064\uff7e\065\151\071\uff7e\072\uff7e\075\uff7e\117\uff7e" +
    "\120\uff7e\121\uff7e\001\002\000\074\004\uff83\005\uff83\006" +
    "\uff83\017\uff83\020\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\042\uff83\043\uff83\044\uff83\045\uff83\051" +
    "\uff83\052\uff83\054\uff83\055\uff83\061\uff83\062\uff83\064\uff83" +
    "\065\uff83\071\uff83\072\uff83\075\uff83\117\uff83\120\uff83\121" +
    "\uff83\001\002\000\032\016\107\034\076\046\071\047\102" +
    "\057\100\060\110\073\067\077\070\100\106\102\074\115" +
    "\073\116\075\001\002\000\074\004\uff8c\005\uff8c\006\uff8c" +
    "\017\uff8c\020\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\051\uff8c" +
    "\052\uff8c\054\uff8c\055\uff8c\061\uff8c\062\uff8c\064\uff8c\065" +
    "\uff8c\071\uff8c\072\uff8c\075\uff8c\117\uff8c\120\uff8c\121\uff8c" +
    "\001\002\000\044\017\114\033\130\034\120\035\131\036" +
    "\123\037\113\040\126\042\125\043\116\044\122\045\117" +
    "\052\121\054\127\061\132\062\112\071\124\072\115\001" +
    "\002\000\032\016\107\034\076\046\071\047\102\057\100" +
    "\060\110\073\067\077\070\100\106\102\074\115\073\116" +
    "\075\001\002\000\032\016\107\034\076\046\071\047\102" +
    "\057\100\060\110\073\067\077\070\100\106\102\074\115" +
    "\073\116\075\001\002\000\074\004\uff9a\005\uff9a\006\uff9a" +
    "\017\uff9a\020\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\051\uff9a" +
    "\052\uff9a\054\uff9a\055\uff9a\061\uff9a\062\uff9a\064\uff9a\065" +
    "\uff9a\071\uff9a\072\uff9a\075\uff9a\117\uff9a\120\uff9a\121\uff9a" +
    "\001\002\000\032\016\107\034\076\046\071\047\102\057" +
    "\100\060\110\073\067\077\070\100\106\102\074\115\073" +
    "\116\075\001\002\000\032\016\107\034\076\046\071\047" +
    "\102\057\100\060\110\073\067\077\070\100\106\102\074" +
    "\115\073\116\075\001\002\000\032\016\107\034\076\046" +
    "\071\047\102\057\100\060\110\073\067\077\070\100\106" +
    "\102\074\115\073\116\075\001\002\000\032\016\107\034" +
    "\076\046\071\047\102\057\100\060\110\073\067\077\070" +
    "\100\106\102\074\115\073\116\075\001\002\000\074\004" +
    "\uff94\005\uff94\006\uff94\017\uff94\020\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\051\uff94\052\uff94\054\uff94\055\uff94\061\uff94" +
    "\062\uff94\064\uff94\065\uff94\071\uff94\072\uff94\075\uff94\117" +
    "\uff94\120\uff94\121\uff94\001\002\000\032\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\073\067\077\070\100" +
    "\106\102\074\115\073\116\075\001\002\000\032\016\107" +
    "\034\076\046\071\047\102\057\100\060\110\073\067\077" +
    "\070\100\106\102\074\115\073\116\075\001\002\000\074" +
    "\004\uff95\005\uff95\006\uff95\017\uff95\020\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\051\uff95\052\uff95\054\uff95\055\uff95\061" +
    "\uff95\062\uff95\064\uff95\065\uff95\071\uff95\072\uff95\075\uff95" +
    "\117\uff95\120\uff95\121\uff95\001\002\000\032\016\107\034" +
    "\076\046\071\047\102\057\100\060\110\073\067\077\070" +
    "\100\106\102\074\115\073\116\075\001\002\000\032\016" +
    "\107\034\076\046\071\047\102\057\100\060\110\073\067" +
    "\077\070\100\106\102\074\115\073\116\075\001\002\000" +
    "\032\016\107\034\076\046\071\047\102\057\100\060\110" +
    "\073\067\077\070\100\106\102\074\115\073\116\075\001" +
    "\002\000\032\016\107\034\076\046\071\047\102\057\100" +
    "\060\110\073\067\077\070\100\106\102\074\115\073\116" +
    "\075\001\002\000\032\016\107\034\076\046\071\047\102" +
    "\057\100\060\110\073\067\077\070\100\106\102\074\115" +
    "\073\116\075\001\002\000\032\016\107\034\076\046\071" +
    "\047\102\057\100\060\110\073\067\077\070\100\106\102" +
    "\074\115\073\116\075\001\002\000\074\004\uff8f\005\uff8f" +
    "\006\uff8f\017\uff8f\020\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\051\uff8f\052\uff8f\054\uff8f\055\uff8f\061\uff8f\062\uff8f\064" +
    "\uff8f\065\uff8f\071\uff8f\072\uff8f\075\uff8f\117\uff8f\120\uff8f" +
    "\121\uff8f\001\002\000\074\004\uff93\005\uff93\006\uff93\017" +
    "\uff93\020\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\042\125\043\uff93\044\uff93\045\uff93\051\uff93\052" +
    "\121\054\uff93\055\uff93\061\132\062\uff93\064\uff93\065\uff93" +
    "\071\124\072\uff93\075\uff93\117\uff93\120\uff93\121\uff93\001" +
    "\002\000\074\004\uff99\005\uff99\006\uff99\017\uff99\020\uff99" +
    "\033\uff99\034\uff99\035\131\036\123\037\113\040\126\042" +
    "\125\043\116\044\122\045\117\051\uff99\052\121\054\127" +
    "\055\uff99\061\132\062\112\064\uff99\065\uff99\071\124\072" +
    "\115\075\uff99\117\uff99\120\uff99\121\uff99\001\002\000\074" +
    "\004\uff97\005\uff97\006\uff97\017\uff97\020\uff97\033\uff97\034" +
    "\uff97\035\131\036\123\037\113\040\126\042\125\043\116" +
    "\044\122\045\117\051\uff97\052\121\054\uff97\055\uff97\061" +
    "\132\062\112\064\uff97\065\uff97\071\124\072\uff97\075\uff97" +
    "\117\uff97\120\uff97\121\uff97\001\002\000\074\004\uff90\005" +
    "\uff90\006\uff90\017\uff90\020\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\042\125\043\uff90\044\uff90\045" +
    "\uff90\051\uff90\052\121\054\uff90\055\uff90\061\132\062\uff90" +
    "\064\uff90\065\uff90\071\124\072\uff90\075\uff90\117\uff90\120" +
    "\uff90\121\uff90\001\002\000\074\004\uff8e\005\uff8e\006\uff8e" +
    "\017\uff8e\020\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\051\uff8e" +
    "\052\uff8e\054\uff8e\055\uff8e\061\uff8e\062\uff8e\064\uff8e\065" +
    "\uff8e\071\uff8e\072\uff8e\075\uff8e\117\uff8e\120\uff8e\121\uff8e" +
    "\001\002\000\074\004\uff92\005\uff92\006\uff92\017\uff92\020" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\042\125\043\uff92\044\uff92\045\uff92\051\uff92\052\121\054" +
    "\uff92\055\uff92\061\132\062\uff92\064\uff92\065\uff92\071\124" +
    "\072\uff92\075\uff92\117\uff92\120\uff92\121\uff92\001\002\000" +
    "\074\004\uff8a\005\uff8a\006\uff8a\017\uff8a\020\uff8a\033\uff8a" +
    "\034\uff8a\035\131\036\123\037\113\040\126\042\125\043" +
    "\uff8a\044\uff8a\045\uff8a\051\uff8a\052\121\054\uff8a\055\uff8a" +
    "\061\132\062\uff8a\064\uff8a\065\uff8a\071\124\072\uff8a\075" +
    "\uff8a\117\uff8a\120\uff8a\121\uff8a\001\002\000\074\004\uff98" +
    "\005\uff98\006\uff98\017\uff98\020\uff98\033\uff98\034\uff98\035" +
    "\131\036\123\037\113\040\126\042\125\043\116\044\122" +
    "\045\117\051\uff98\052\121\054\127\055\uff98\061\132\062" +
    "\112\064\uff98\065\uff98\071\124\072\115\075\uff98\117\uff98" +
    "\120\uff98\121\uff98\001\002\000\074\004\uff89\005\uff89\006" +
    "\uff89\017\uff89\020\uff89\033\uff89\034\uff89\035\131\036\123" +
    "\037\113\040\126\042\125\043\uff89\044\uff89\045\uff89\051" +
    "\uff89\052\121\054\uff89\055\uff89\061\132\062\uff89\064\uff89" +
    "\065\uff89\071\124\072\uff89\075\uff89\117\uff89\120\uff89\121" +
    "\uff89\001\002\000\074\004\uff8b\005\uff8b\006\uff8b\017\uff8b" +
    "\020\uff8b\033\uff8b\034\uff8b\035\131\036\123\037\113\040" +
    "\126\042\125\043\uff8b\044\uff8b\045\uff8b\051\uff8b\052\121" +
    "\054\uff8b\055\uff8b\061\132\062\uff8b\064\uff8b\065\uff8b\071" +
    "\124\072\uff8b\075\uff8b\117\uff8b\120\uff8b\121\uff8b\001\002" +
    "\000\074\004\uff96\005\uff96\006\uff96\017\uff96\020\uff96\033" +
    "\uff96\034\uff96\035\131\036\123\037\113\040\126\042\125" +
    "\043\116\044\122\045\117\051\uff96\052\121\054\uff96\055" +
    "\uff96\061\132\062\112\064\uff96\065\uff96\071\124\072\uff96" +
    "\075\uff96\117\uff96\120\uff96\121\uff96\001\002\000\074\004" +
    "\uff91\005\uff91\006\uff91\017\uff91\020\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\042\125\043\uff91\044" +
    "\uff91\045\uff91\051\uff91\052\121\054\uff91\055\uff91\061\132" +
    "\062\uff91\064\uff91\065\uff91\071\124\072\uff91\075\uff91\117" +
    "\uff91\120\uff91\121\uff91\001\002\000\074\004\uff87\005\uff87" +
    "\006\uff87\017\uff87\020\uff87\033\uff87\034\uff87\035\131\036" +
    "\123\037\113\040\126\042\125\043\116\044\122\045\117" +
    "\051\uff87\052\121\054\uff87\055\uff87\061\132\062\uff87\064" +
    "\uff87\065\uff87\071\124\072\uff87\075\uff87\117\uff87\120\uff87" +
    "\121\uff87\001\002\000\074\004\uffa1\005\uffa1\006\uffa1\017" +
    "\uffa1\020\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\051\uffa1\052" +
    "\uffa1\054\uffa1\055\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1" +
    "\071\uffa1\072\uffa1\075\uffa1\117\uffa1\120\uffa1\121\uffa1\001" +
    "\002\000\004\063\101\001\002\000\020\004\uffbd\005\uffbd" +
    "\006\uffbd\020\uffbd\055\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\004\047\164\001\002\000\076\004\uff7f\005\uff7f\006\uff7f" +
    "\017\uff7f\020\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\050\161" +
    "\051\uff7f\052\uff7f\054\uff7f\055\uff7f\061\uff7f\062\uff7f\064" +
    "\uff7f\065\uff7f\071\uff7f\072\uff7f\075\uff7f\117\uff7f\120\uff7f" +
    "\121\uff7f\001\002\000\032\016\107\034\076\046\071\047" +
    "\102\057\100\060\110\073\067\077\070\100\106\102\074" +
    "\115\073\116\075\001\002\000\004\051\160\001\002\000" +
    "\100\004\uff9c\005\uff9c\006\uff9c\017\uff9c\020\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\054\uff9c\055\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\071" +
    "\uff9c\072\uff9c\075\uff9c\117\uff9c\120\uff9c\121\uff9c\001\002" +
    "\000\032\016\107\034\076\046\071\047\102\057\100\060" +
    "\110\073\067\077\070\100\106\102\074\115\073\116\075" +
    "\001\002\000\004\051\163\001\002\000\100\004\uff9d\005" +
    "\uff9d\006\uff9d\017\uff9d\020\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d" +
    "\061\uff9d\062\uff9d\064\uff9d\065\uff9d\071\uff9d\072\uff9d\075" +
    "\uff9d\117\uff9d\120\uff9d\121\uff9d\001\002\000\076\004\uffa0" +
    "\005\uffa0\006\uffa0\016\165\017\uffa0\020\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\061" +
    "\uffa0\062\uffa0\064\uffa0\065\uffa0\071\uffa0\072\uffa0\075\uffa0" +
    "\117\uffa0\120\uffa0\121\uffa0\001\002\000\034\016\107\017" +
    "\170\034\076\046\071\047\102\057\100\060\110\073\067" +
    "\077\070\100\106\102\074\115\073\116\075\001\002\000" +
    "\010\017\uffba\020\uffba\064\uffba\001\002\000\006\017\172" +
    "\020\171\001\002\000\074\004\uff9f\005\uff9f\006\uff9f\017" +
    "\uff9f\020\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\051\uff9f\052" +
    "\uff9f\054\uff9f\055\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f" +
    "\071\uff9f\072\uff9f\075\uff9f\117\uff9f\120\uff9f\121\uff9f\001" +
    "\002\000\032\016\107\034\076\046\071\047\102\057\100" +
    "\060\110\073\067\077\070\100\106\102\074\115\073\116" +
    "\075\001\002\000\074\004\uff9e\005\uff9e\006\uff9e\017\uff9e" +
    "\020\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\051\uff9e\052\uff9e" +
    "\054\uff9e\055\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\071" +
    "\uff9e\072\uff9e\075\uff9e\117\uff9e\120\uff9e\121\uff9e\001\002" +
    "\000\010\017\uffbb\020\uffbb\064\uffbb\001\002\000\006\020" +
    "\171\064\177\001\002\000\006\020\152\064\176\001\002" +
    "\000\020\004\uffbe\005\uffbe\006\uffbe\020\uffbe\055\uffbe\064" +
    "\uffbe\065\uffbe\001\002\000\020\004\uffbc\005\uffbc\006\uffbc" +
    "\020\uffbc\055\uffbc\064\uffbc\065\uffbc\001\002\000\074\004" +
    "\uff86\005\uff86\006\uff86\017\uff86\020\uff86\033\uff86\034\uff86" +
    "\035\131\036\123\037\113\040\126\042\125\043\116\044" +
    "\122\045\117\051\uff86\052\121\054\127\055\uff86\061\132" +
    "\062\112\064\uff86\065\uff86\071\124\072\115\075\uff86\117" +
    "\uff86\120\uff86\121\uff86\001\002\000\004\016\202\001\002" +
    "\000\034\016\107\017\204\034\076\046\071\047\102\057" +
    "\100\060\110\073\067\077\070\100\106\102\074\115\073" +
    "\116\075\001\002\000\006\017\205\020\171\001\002\000" +
    "\074\004\uffa5\005\uffa5\006\uffa5\017\uffa5\020\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5" +
    "\061\uffa5\062\uffa5\064\uffa5\065\uffa5\071\uffa5\072\uffa5\075" +
    "\uffa5\117\uffa5\120\uffa5\121\uffa5\001\002\000\074\004\uffa4" +
    "\005\uffa4\006\uffa4\017\uffa4\020\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\061\uffa4\062" +
    "\uffa4\064\uffa4\065\uffa4\071\uffa4\072\uffa4\075\uffa4\117\uffa4" +
    "\120\uffa4\121\uffa4\001\002\000\074\004\uffa6\005\uffa6\006" +
    "\uffa6\017\uffa6\020\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\051" +
    "\uffa6\052\uffa6\054\uffa6\055\uffa6\061\uffa6\062\uffa6\064\uffa6" +
    "\065\151\071\uffa6\072\uffa6\075\uffa6\117\uffa6\120\uffa6\121" +
    "\uffa6\001\002\000\006\016\210\101\154\001\002\000\034" +
    "\016\107\017\212\034\076\046\071\047\102\057\100\060" +
    "\110\073\067\077\070\100\106\102\074\115\073\116\075" +
    "\001\002\000\006\017\213\020\171\001\002\000\074\004" +
    "\uffa8\005\uffa8\006\uffa8\017\uffa8\020\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\051\uffa8\052\uffa8\054\uffa8\055\uffa8\061\uffa8" +
    "\062\uffa8\064\uffa8\065\uffa8\071\uffa8\072\uffa8\075\uffa8\117" +
    "\uffa8\120\uffa8\121\uffa8\001\002\000\074\004\uffa7\005\uffa7" +
    "\006\uffa7\017\uffa7\020\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\055\uffa7\061\uffa7\062\uffa7\064" +
    "\uffa7\065\uffa7\071\uffa7\072\uffa7\075\uffa7\117\uffa7\120\uffa7" +
    "\121\uffa7\001\002\000\074\004\uff88\005\uff88\006\uff88\017" +
    "\uff88\020\uff88\033\uff88\034\uff88\035\131\036\123\037\113" +
    "\040\126\042\125\043\uff88\044\uff88\045\uff88\051\uff88\052" +
    "\121\054\uff88\055\uff88\061\132\062\uff88\064\uff88\065\uff88" +
    "\071\124\072\uff88\075\uff88\117\uff88\120\uff88\121\uff88\001" +
    "\002\000\006\020\uffcb\065\uffcb\001\002\000\006\020\uffc8" +
    "\065\uffc8\001\002\000\016\004\034\005\031\006\027\020" +
    "\ufff3\055\032\065\ufff3\001\002\000\034\016\107\034\076" +
    "\046\071\047\102\051\222\057\100\060\110\073\067\077" +
    "\070\100\106\102\074\115\073\116\075\001\002\000\004" +
    "\051\223\001\002\000\022\004\uffc2\005\uffc2\006\uffc2\020" +
    "\uffc2\041\uffc2\050\uffc2\055\uffc2\065\uffc2\001\002\000\022" +
    "\004\uffc4\005\uffc4\006\uffc4\020\uffc4\041\uffc4\050\uffc4\055" +
    "\uffc4\065\uffc4\001\002\000\006\020\uffc7\065\uffc7\001\002" +
    "\000\004\051\227\001\002\000\022\004\uffc1\005\uffc1\006" +
    "\uffc1\020\uffc1\041\uffc1\050\uffc1\055\uffc1\065\uffc1\001\002" +
    "\000\022\004\uffc3\005\uffc3\006\uffc3\020\uffc3\041\uffc3\050" +
    "\uffc3\055\uffc3\065\uffc3\001\002\000\064\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\047\uffd0" +
    "\053\uffd0\055\uffd0\056\uffd0\064\uffd0\074\uffd0\104\uffd0\105" +
    "\uffd0\111\uffd0\115\uffd0\116\uffd0\001\002\000\004\047\232" +
    "\001\002\000\020\004\034\005\031\006\027\020\ufff3\041" +
    "\066\055\032\065\ufff3\001\002\000\006\020\uffce\065\uffce" +
    "\001\002\000\016\004\034\005\031\006\027\020\ufff3\055" +
    "\032\065\ufff3\001\002\000\006\020\uffcd\065\uffcd\001\002" +
    "\000\064\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\047\uffcf\053\uffcf\055\uffcf\056\uffcf\064" +
    "\uffcf\074\uffcf\104\uffcf\105\uffcf\111\uffcf\115\uffcf\116\uffcf" +
    "\001\002\000\004\047\240\001\002\000\004\050\062\001" +
    "\002\000\022\004\034\005\031\006\027\020\ufff3\041\066" +
    "\050\220\055\032\065\ufff3\001\002\000\006\020\uffca\065" +
    "\uffca\001\002\000\016\004\034\005\031\006\027\020\ufff3" +
    "\055\032\065\ufff3\001\002\000\006\020\uffc9\065\uffc9\001" +
    "\002\000\004\016\u0129\001\002\000\004\016\247\001\002" +
    "\000\004\017\250\001\002\000\004\063\251\001\002\000" +
    "\036\021\273\022\302\024\277\027\257\030\262\031\270" +
    "\047\274\053\254\056\256\074\252\105\276\111\300\115" +
    "\073\116\075\001\002\000\004\016\u0126\001\002\000\040" +
    "\021\273\022\302\024\277\027\257\030\262\031\270\047" +
    "\274\053\254\056\256\064\u0125\074\252\105\276\111\300" +
    "\115\073\116\075\001\002\000\004\016\u0111\001\002\000" +
    "\044\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\047\uffe1\053\uffe1\056\uffe1\064\uffe1\074" +
    "\uffe1\105\uffe1\111\uffe1\115\uffe1\116\uffe1\001\002\000\004" +
    "\016\u010d\001\002\000\004\016\u0107\001\002\000\044\021" +
    "\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\047\uffe8\053\uffe8\056\uffe8\064\uffe8\074\uffe8\105" +
    "\uffe8\111\uffe8\115\uffe8\116\uffe8\001\002\000\044\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\047\uffe7\053\uffe7\056\uffe7\064\uffe7\074\uffe7\105\uffe7" +
    "\111\uffe7\115\uffe7\116\uffe7\001\002\000\004\063\377\001" +
    "\002\000\044\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\047\uffe4\053\uffe4\056\uffe4\064" +
    "\uffe4\074\uffe4\105\uffe4\111\uffe4\115\uffe4\116\uffe4\001\002" +
    "\000\044\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\047\uffe5\053\uffe5\056\uffe5\064\uffe5" +
    "\074\uffe5\105\uffe5\111\uffe5\115\uffe5\116\uffe5\001\002\000" +
    "\044\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\047\uffe2\053\uffe2\056\uffe2\064\uffe2\074" +
    "\uffe2\105\uffe2\111\uffe2\115\uffe2\116\uffe2\001\002\000\004" +
    "\065\376\001\002\000\044\021\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\047\uffe6\053\uffe6" +
    "\056\uffe6\064\uffe6\074\uffe6\105\uffe6\111\uffe6\115\uffe6\116" +
    "\uffe6\001\002\000\004\065\375\001\002\000\044\021\uffe9" +
    "\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\047\uffe9\053\uffe9\056\uffe9\064\uffe9\074\uffe9\105\uffe9" +
    "\111\uffe9\115\uffe9\116\uffe9\001\002\000\044\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\047\uffe3\053\uffe3\056\uffe3\064\uffe3\074\uffe3\105\uffe3\111" +
    "\uffe3\115\uffe3\116\uffe3\001\002\000\034\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\065\373\073\067\077" +
    "\070\100\106\102\074\115\073\116\075\001\002\000\010" +
    "\041\066\047\357\050\156\001\002\000\004\065\355\001" +
    "\002\000\004\065\354\001\002\000\004\016\327\001\002" +
    "\000\022\010\055\011\047\012\036\013\042\014\044\015" +
    "\037\047\317\104\040\001\002\000\044\021\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\047" +
    "\uffe0\053\uffe0\056\uffe0\064\uffe0\074\uffe0\105\uffe0\111\uffe0" +
    "\115\uffe0\116\uffe0\001\002\000\004\016\303\001\002\000" +
    "\032\016\107\034\076\046\071\047\102\057\100\060\110" +
    "\073\067\077\070\100\106\102\074\115\073\116\075\001" +
    "\002\000\004\017\305\001\002\000\004\063\306\001\002" +
    "\000\036\021\273\022\302\024\277\027\257\030\262\031" +
    "\270\047\274\053\254\056\256\074\252\105\276\111\300" +
    "\115\073\116\075\001\002\000\040\021\273\022\302\024" +
    "\277\027\257\030\262\031\270\047\274\053\254\056\256" +
    "\064\311\074\252\105\276\111\300\115\073\116\075\001" +
    "\002\000\044\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\047\uffea\053\uffea\056\uffea\064" +
    "\uffea\074\uffea\105\uffea\111\uffea\115\uffea\116\uffea\001\002" +
    "\000\046\021\uffb5\022\uffb5\023\312\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\047\uffb5\053\uffb5\056\uffb5" +
    "\064\uffb5\074\uffb5\105\uffb5\111\uffb5\115\uffb5\116\uffb5\001" +
    "\002\000\004\063\314\001\002\000\044\021\uffb4\022\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\047" +
    "\uffb4\053\uffb4\056\uffb4\064\uffb4\074\uffb4\105\uffb4\111\uffb4" +
    "\115\uffb4\116\uffb4\001\002\000\036\021\273\022\302\024" +
    "\277\027\257\030\262\031\270\047\274\053\254\056\256" +
    "\074\252\105\276\111\300\115\073\116\075\001\002\000" +
    "\040\021\273\022\302\024\277\027\257\030\262\031\270" +
    "\047\274\053\254\056\256\064\316\074\252\105\276\111" +
    "\300\115\073\116\075\001\002\000\044\021\uffb3\022\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\047" +
    "\uffb3\053\uffb3\056\uffb3\064\uffb3\074\uffb3\105\uffb3\111\uffb3" +
    "\115\uffb3\116\uffb3\001\002\000\004\047\320\001\002\000" +
    "\004\041\321\001\002\000\004\107\322\001\002\000\004" +
    "\047\323\001\002\000\004\016\324\001\002\000\004\017" +
    "\325\001\002\000\004\065\326\001\002\000\044\021\uffa3" +
    "\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\047\uffa3\053\uffa3\056\uffa3\064\uffa3\074\uffa3\105\uffa3" +
    "\111\uffa3\115\uffa3\116\uffa3\001\002\000\032\016\107\034" +
    "\076\046\071\047\102\057\100\060\110\073\067\077\070" +
    "\100\106\102\074\115\073\116\075\001\002\000\004\017" +
    "\331\001\002\000\004\063\332\001\002\000\006\025\334" +
    "\026\335\001\002\000\004\064\353\001\002\000\032\016" +
    "\107\034\076\046\071\047\102\057\100\060\110\073\067" +
    "\077\070\100\106\102\074\115\073\116\075\001\002\000" +
    "\004\055\346\001\002\000\010\025\341\026\335\064\337" +
    "\001\002\000\044\021\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\047\uffb0\053\uffb0\056\uffb0" +
    "\064\uffb0\074\uffb0\105\uffb0\111\uffb0\115\uffb0\116\uffb0\001" +
    "\002\000\004\064\345\001\002\000\032\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\073\067\077\070\100" +
    "\106\102\074\115\073\116\075\001\002\000\004\055\343" +
    "\001\002\000\036\021\273\022\302\024\277\027\257\030" +
    "\262\031\270\047\274\053\254\056\256\074\252\105\276" +
    "\111\300\115\073\116\075\001\002\000\044\021\273\022" +
    "\302\024\277\025\uffad\026\uffad\027\257\030\262\031\270" +
    "\047\274\053\254\056\256\064\uffad\074\252\105\276\111" +
    "\300\115\073\116\075\001\002\000\044\021\uffaf\022\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\047" +
    "\uffaf\053\uffaf\056\uffaf\064\uffaf\074\uffaf\105\uffaf\111\uffaf" +
    "\115\uffaf\116\uffaf\001\002\000\036\021\273\022\302\024" +
    "\277\027\257\030\262\031\270\047\274\053\254\056\256" +
    "\074\252\105\276\111\300\115\073\116\075\001\002\000" +
    "\040\021\273\022\302\024\277\027\257\030\262\031\270" +
    "\047\274\053\254\056\256\064\uffab\074\252\105\276\111" +
    "\300\115\073\116\075\001\002\000\004\055\351\001\002" +
    "\000\036\021\273\022\302\024\277\027\257\030\262\031" +
    "\270\047\274\053\254\056\256\074\252\105\276\111\300" +
    "\115\073\116\075\001\002\000\044\021\273\022\302\024" +
    "\277\025\uffac\026\uffac\027\257\030\262\031\270\047\274" +
    "\053\254\056\256\064\uffac\074\252\105\276\111\300\115" +
    "\073\116\075\001\002\000\044\021\uffae\022\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\047\uffae\053" +
    "\uffae\056\uffae\064\uffae\074\uffae\105\uffae\111\uffae\115\uffae" +
    "\116\uffae\001\002\000\044\021\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\047\uffdc\053\uffdc" +
    "\056\uffdc\064\uffdc\074\uffdc\105\uffdc\111\uffdc\115\uffdc\116" +
    "\uffdc\001\002\000\044\021\uffdf\022\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\047\uffdf\053\uffdf\056" +
    "\uffdf\064\uffdf\074\uffdf\105\uffdf\111\uffdf\115\uffdf\116\uffdf" +
    "\001\002\000\004\065\371\001\002\000\004\041\363\001" +
    "\002\000\006\041\066\050\161\001\002\000\004\065\362" +
    "\001\002\000\044\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\047\uffc5\053\uffc5\056\uffc5" +
    "\064\uffc5\074\uffc5\105\uffc5\111\uffc5\115\uffc5\116\uffc5\001" +
    "\002\000\004\107\364\001\002\000\004\047\365\001\002" +
    "\000\004\016\366\001\002\000\004\017\367\001\002\000" +
    "\004\065\370\001\002\000\044\021\uffa2\022\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\047\uffa2\053" +
    "\uffa2\056\uffa2\064\uffa2\074\uffa2\105\uffa2\111\uffa2\115\uffa2" +
    "\116\uffa2\001\002\000\044\021\uffc6\022\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\047\uffc6\053\uffc6" +
    "\056\uffc6\064\uffc6\074\uffc6\105\uffc6\111\uffc6\115\uffc6\116" +
    "\uffc6\001\002\000\004\065\374\001\002\000\044\021\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\047\uffdb\053\uffdb\056\uffdb\064\uffdb\074\uffdb\105\uffdb" +
    "\111\uffdb\115\uffdb\116\uffdb\001\002\000\044\021\uffda\022" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\047\uffda\053\uffda\056\uffda\064\uffda\074\uffda\105\uffda\111" +
    "\uffda\115\uffda\116\uffda\001\002\000\044\021\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\047" +
    "\uffdd\053\uffdd\056\uffdd\064\uffdd\074\uffdd\105\uffdd\111\uffdd" +
    "\115\uffdd\116\uffdd\001\002\000\044\021\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\047\uffde" +
    "\053\uffde\056\uffde\064\uffde\074\uffde\105\uffde\111\uffde\115" +
    "\uffde\116\uffde\001\002\000\036\021\273\022\302\024\277" +
    "\027\257\030\262\031\270\047\274\053\254\056\256\074" +
    "\252\105\276\111\300\115\073\116\075\001\002\000\040" +
    "\021\273\022\302\024\277\027\257\030\262\031\270\047" +
    "\274\053\254\056\256\064\u0101\074\252\105\276\111\300" +
    "\115\073\116\075\001\002\000\004\027\u0102\001\002\000" +
    "\004\016\u0103\001\002\000\032\016\107\034\076\046\071" +
    "\047\102\057\100\060\110\073\067\077\070\100\106\102" +
    "\074\115\073\116\075\001\002\000\004\017\u0105\001\002" +
    "\000\004\065\u0106\001\002\000\044\021\uffb1\022\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\047\uffb1" +
    "\053\uffb1\056\uffb1\064\uffb1\074\uffb1\105\uffb1\111\uffb1\115" +
    "\uffb1\116\uffb1\001\002\000\032\016\107\034\076\046\071" +
    "\047\102\057\100\060\110\073\067\077\070\100\106\102" +
    "\074\115\073\116\075\001\002\000\004\017\u0109\001\002" +
    "\000\004\063\u010a\001\002\000\036\021\273\022\302\024" +
    "\277\027\257\030\262\031\270\047\274\053\254\056\256" +
    "\074\252\105\276\111\300\115\073\116\075\001\002\000" +
    "\040\021\273\022\302\024\277\027\257\030\262\031\270" +
    "\047\274\053\254\056\256\064\u010c\074\252\105\276\111" +
    "\300\115\073\116\075\001\002\000\044\021\uffb2\022\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\047" +
    "\uffb2\053\uffb2\056\uffb2\064\uffb2\074\uffb2\105\uffb2\111\uffb2" +
    "\115\uffb2\116\uffb2\001\002\000\032\016\107\034\076\046" +
    "\071\047\102\057\100\060\110\073\067\077\070\100\106" +
    "\102\074\115\073\116\075\001\002\000\004\017\u010f\001" +
    "\002\000\004\065\u0110\001\002\000\044\021\uffd1\022\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\047" +
    "\uffd1\053\uffd1\056\uffd1\064\uffd1\074\uffd1\105\uffd1\111\uffd1" +
    "\115\uffd1\116\uffd1\001\002\000\006\047\u0112\111\053\001" +
    "\002\000\004\041\066\001\002\000\004\055\u0114\001\002" +
    "\000\032\016\107\034\076\046\071\047\102\057\100\060" +
    "\110\073\067\077\070\100\106\102\074\115\073\116\075" +
    "\001\002\000\004\055\u0116\001\002\000\032\016\107\034" +
    "\076\046\071\047\102\057\100\060\110\073\067\077\070" +
    "\100\106\102\074\115\073\116\075\001\002\000\004\017" +
    "\u0118\001\002\000\004\063\u0119\001\002\000\036\021\273" +
    "\022\302\024\277\027\257\030\262\031\270\047\274\053" +
    "\254\056\256\074\252\105\276\111\300\115\073\116\075" +
    "\001\002\000\040\021\273\022\302\024\277\027\257\030" +
    "\262\031\270\047\274\053\254\056\256\064\u011b\074\252" +
    "\105\276\111\300\115\073\116\075\001\002\000\044\021" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\047\uffaa\053\uffaa\056\uffaa\064\uffaa\074\uffaa\105" +
    "\uffaa\111\uffaa\115\uffaa\116\uffaa\001\002\000\004\055\u011d" +
    "\001\002\000\032\016\107\034\076\046\071\047\102\057" +
    "\100\060\110\073\067\077\070\100\106\102\074\115\073" +
    "\116\075\001\002\000\004\055\u011f\001\002\000\032\016" +
    "\107\034\076\046\071\047\102\057\100\060\110\073\067" +
    "\077\070\100\106\102\074\115\073\116\075\001\002\000" +
    "\004\017\u0121\001\002\000\004\063\u0122\001\002\000\036" +
    "\021\273\022\302\024\277\027\257\030\262\031\270\047" +
    "\274\053\254\056\256\074\252\105\276\111\300\115\073" +
    "\116\075\001\002\000\040\021\273\022\302\024\277\027" +
    "\257\030\262\031\270\047\274\053\254\056\256\064\u0124" +
    "\074\252\105\276\111\300\115\073\116\075\001\002\000" +
    "\044\021\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\047\uffa9\053\uffa9\056\uffa9\064\uffa9\074" +
    "\uffa9\105\uffa9\111\uffa9\115\uffa9\116\uffa9\001\002\000\024" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\064" +
    "\uffd9\104\uffd9\111\uffd9\001\002\000\004\017\u0127\001\002" +
    "\000\004\065\u0128\001\002\000\004\065\uff7d\001\002\000" +
    "\004\017\u012a\001\002\000\004\063\u012b\001\002\000\012" +
    "\075\u0130\117\u012e\120\u012c\121\u012d\001\002\000\004\016" +
    "\u0140\001\002\000\004\016\u013c\001\002\000\004\016\u0136" +
    "\001\002\000\014\064\uff7a\075\uff7a\117\uff7a\120\uff7a\121" +
    "\uff7a\001\002\000\004\041\u0134\001\002\000\014\064\u0132" +
    "\075\u0130\117\u012e\120\u012c\121\u012d\001\002\000\024\010" +
    "\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\064\uff7c" +
    "\104\uff7c\111\uff7c\001\002\000\014\064\uff7b\075\uff7b\117" +
    "\uff7b\120\uff7b\121\uff7b\001\002\000\032\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\073\067\077\070\100" +
    "\106\102\074\115\073\116\075\001\002\000\014\064\uff79" +
    "\075\uff79\117\uff79\120\uff79\121\uff79\001\002\000\032\016" +
    "\107\034\076\046\071\047\102\057\100\060\110\073\067" +
    "\077\070\100\106\102\074\115\073\116\075\001\002\000" +
    "\004\017\u0138\001\002\000\004\041\u0139\001\002\000\032" +
    "\016\107\034\076\046\071\047\102\057\100\060\110\073" +
    "\067\077\070\100\106\102\074\115\073\116\075\001\002" +
    "\000\004\065\u013b\001\002\000\014\064\uff78\075\uff78\117" +
    "\uff78\120\uff78\121\uff78\001\002\000\032\016\107\034\076" +
    "\046\071\047\102\057\100\060\110\073\067\077\070\100" +
    "\106\102\074\115\073\116\075\001\002\000\004\017\u013e" +
    "\001\002\000\004\065\u013f\001\002\000\014\064\uff76\075" +
    "\uff76\117\uff76\120\uff76\121\uff76\001\002\000\032\016\107" +
    "\034\076\046\071\047\102\057\100\060\110\073\067\077" +
    "\070\100\106\102\074\115\073\116\075\001\002\000\004" +
    "\017\u0142\001\002\000\004\065\u0143\001\002\000\014\064" +
    "\uff77\075\uff77\117\uff77\120\uff77\121\uff77\001\002\000\006" +
    "\002\uffec\114\uffec\001\002\000\024\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\064\ufff2\104\ufff2\111\ufff2" +
    "\001\002\000\004\016\u0147\001\002\000\022\010\055\011" +
    "\047\012\036\013\042\014\044\015\037\017\u0148\104\040" +
    "\001\002\000\014\004\034\005\031\006\027\055\032\063" +
    "\ufff3\001\002\000\004\047\u0153\001\002\000\006\017\u014c" +
    "\020\u014b\001\002\000\020\010\055\011\047\012\036\013" +
    "\042\014\044\015\037\104\040\001\002\000\014\004\034" +
    "\005\031\006\027\055\032\063\ufff3\001\002\000\004\063" +
    "\u014e\001\002\000\036\021\273\022\302\024\277\027\257" +
    "\030\262\031\270\047\274\053\254\056\256\074\252\105" +
    "\276\111\300\115\073\116\075\001\002\000\040\021\273" +
    "\022\302\024\277\027\257\030\262\031\270\047\274\053" +
    "\254\056\256\064\u0150\074\252\105\276\111\300\115\073" +
    "\116\075\001\002\000\024\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\064\uffb9\104\uffb9\111\uffb9\001\002" +
    "\000\004\047\u0152\001\002\000\006\017\uffb7\020\uffb7\001" +
    "\002\000\006\017\uffb6\020\uffb6\001\002\000\004\063\u0155" +
    "\001\002\000\036\021\273\022\302\024\277\027\257\030" +
    "\262\031\270\047\274\053\254\056\256\074\252\105\276" +
    "\111\300\115\073\116\075\001\002\000\040\021\273\022" +
    "\302\024\277\027\257\030\262\031\270\047\274\053\254" +
    "\056\256\064\u0157\074\252\105\276\111\300\115\073\116" +
    "\075\001\002\000\024\010\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\064\uffb8\104\uffb8\111\uffb8\001\002\000" +
    "\010\020\ufff7\063\ufff7\065\ufff7\001\002\000\004\063\u015a" +
    "\001\002\000\022\010\050\011\047\012\036\013\042\014" +
    "\044\015\037\104\040\111\053\001\002\000\024\010\050" +
    "\011\047\012\036\013\042\014\044\015\037\064\u015c\104" +
    "\040\111\053\001\002\000\006\002\uffeb\114\uffeb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\016\002\006\003\005\004\013\040\012\041" +
    "\003\047\004\001\001\000\002\001\001\000\004\041\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\015\041\003\047\014\001\001\000\004\041" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\045\007\051\010\044\030\042\037" +
    "\053\046\050\051\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\051\010\044\030\042\037\053\046\u0144\051" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\057\045\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\062\033\063\035\064\001\001\000\012\012\102\020\224" +
    "\032\076\042\104\001\001\000\002\001\001\000\006\005" +
    "\215\035\216\001\001\000\004\005\214\001\001\000\014" +
    "\012\102\020\071\032\076\034\103\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\102\032\213" +
    "\042\104\001\001\000\002\001\001\000\004\042\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\102" +
    "\032\177\042\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\102\020\165\022\173\032\076\034\174" +
    "\042\104\001\001\000\004\044\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\102\032\110\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\102\032\147\042\104" +
    "\001\001\000\010\012\102\032\146\042\104\001\001\000" +
    "\002\001\001\000\010\012\102\032\145\042\104\001\001" +
    "\000\010\012\102\032\144\042\104\001\001\000\010\012" +
    "\102\032\143\042\104\001\001\000\010\012\102\032\142" +
    "\042\104\001\001\000\002\001\001\000\010\012\102\032" +
    "\141\042\104\001\001\000\010\012\102\032\140\042\104" +
    "\001\001\000\002\001\001\000\010\012\102\032\137\042" +
    "\104\001\001\000\010\012\102\032\136\042\104\001\001" +
    "\000\010\012\102\032\135\042\104\001\001\000\010\012" +
    "\102\032\134\042\104\001\001\000\010\012\102\032\133" +
    "\042\104\001\001\000\010\012\102\032\132\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\102\020\156\032\076\042\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\102\020" +
    "\161\032\076\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\102\020\165\022" +
    "\166\032\076\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\102\020\172\032" +
    "\076\042\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\102\020\165\022\202\032\076\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\102\020\165\022" +
    "\210\032\076\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\223\001\001\000\012" +
    "\012\102\020\220\032\076\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\232\035\233" +
    "\001\001\000\002\001\001\000\004\005\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\240\001\001\000\006\005\241\035\242\001\001\000" +
    "\002\001\001\000\004\005\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\254\012\274\013\263\015\266" +
    "\016\260\023\257\025\271\026\252\027\270\030\262\036" +
    "\264\043\300\050\265\001\001\000\002\001\001\000\032" +
    "\011\254\012\274\013\263\015\266\016\260\023\257\025" +
    "\271\027\307\030\262\036\264\043\300\050\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\102\020" +
    "\371\032\076\042\104\001\001\000\006\035\355\044\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\102\020\303\032\076\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\254" +
    "\012\274\013\263\015\266\016\260\023\257\025\271\026" +
    "\306\027\270\030\262\036\264\043\300\050\265\001\001" +
    "\000\032\011\254\012\274\013\263\015\266\016\260\023" +
    "\257\025\271\027\307\030\262\036\264\043\300\050\265" +
    "\001\001\000\002\001\001\000\004\014\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\011\254\012\274" +
    "\013\263\015\266\016\260\023\257\025\271\026\314\027" +
    "\270\030\262\036\264\043\300\050\265\001\001\000\032" +
    "\011\254\012\274\013\263\015\266\016\260\023\257\025" +
    "\271\027\307\030\262\036\264\043\300\050\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\102\020\327\032\076\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\335\031\332\001\001\000" +
    "\002\001\001\000\012\012\102\020\347\032\076\042\104" +
    "\001\001\000\002\001\001\000\004\031\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\102\020\341" +
    "\032\076\042\104\001\001\000\002\001\001\000\034\011" +
    "\254\012\274\013\263\015\266\016\260\023\257\025\271" +
    "\026\343\027\270\030\262\036\264\043\300\050\265\001" +
    "\001\000\032\011\254\012\274\013\263\015\266\016\260" +
    "\023\257\025\271\027\307\030\262\036\264\043\300\050" +
    "\265\001\001\000\002\001\001\000\034\011\254\012\274" +
    "\013\263\015\266\016\260\023\257\025\271\026\346\027" +
    "\270\030\262\036\264\043\300\050\265\001\001\000\032" +
    "\011\254\012\274\013\263\015\266\016\260\023\257\025" +
    "\271\027\307\030\262\036\264\043\300\050\265\001\001" +
    "\000\002\001\001\000\034\011\254\012\274\013\263\015" +
    "\266\016\260\023\257\025\271\026\351\027\270\030\262" +
    "\036\264\043\300\050\265\001\001\000\032\011\254\012" +
    "\274\013\263\015\266\016\260\023\257\025\271\027\307" +
    "\030\262\036\264\043\300\050\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\011\254\012\274\013\263\015\266\016\260" +
    "\023\257\025\271\026\377\027\270\030\262\036\264\043" +
    "\300\050\265\001\001\000\032\011\254\012\274\013\263" +
    "\015\266\016\260\023\257\025\271\027\307\030\262\036" +
    "\264\043\300\050\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\102\020\u0103\032\076\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\102\020\u0107\032\076\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\011\254\012\274" +
    "\013\263\015\266\016\260\023\257\025\271\026\u010a\027" +
    "\270\030\262\036\264\043\300\050\265\001\001\000\032" +
    "\011\254\012\274\013\263\015\266\016\260\023\257\025" +
    "\271\027\307\030\262\036\264\043\300\050\265\001\001" +
    "\000\002\001\001\000\012\012\102\020\u010d\032\076\042" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u0112\001\001\000\004\035\u011b\001" +
    "\001\000\002\001\001\000\012\012\102\020\u0114\032\076" +
    "\042\104\001\001\000\002\001\001\000\012\012\102\020" +
    "\u0116\032\076\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\254\012\274\013\263\015\266\016" +
    "\260\023\257\025\271\026\u0119\027\270\030\262\036\264" +
    "\043\300\050\265\001\001\000\032\011\254\012\274\013" +
    "\263\015\266\016\260\023\257\025\271\027\307\030\262" +
    "\036\264\043\300\050\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\102\020\u011d\032\076\042\104" +
    "\001\001\000\002\001\001\000\012\012\102\020\u011f\032" +
    "\076\042\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\011\254\012\274\013\263\015\266\016\260\023" +
    "\257\025\271\026\u0122\027\270\030\262\036\264\043\300" +
    "\050\265\001\001\000\032\011\254\012\274\013\263\015" +
    "\266\016\260\023\257\025\271\027\307\030\262\036\264" +
    "\043\300\050\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\u0130\053" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\102\020\u0134\032\076\042\104\001\001\000\002\001" +
    "\001\000\012\012\102\020\u0136\032\076\042\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\102\020" +
    "\u0139\032\076\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\102\020\u013c\032\076\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\102\020\u0140\032\076\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\u0148\017\u0149\001\001\000\004\005\u0153\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0150\001\001\000" +
    "\004\005\u014c\001\001\000\002\001\001\000\034\011\254" +
    "\012\274\013\263\015\266\016\260\023\257\025\271\026" +
    "\u014e\027\270\030\262\036\264\043\300\050\265\001\001" +
    "\000\032\011\254\012\274\013\263\015\266\016\260\023" +
    "\257\025\271\027\307\030\262\036\264\043\300\050\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\254" +
    "\012\274\013\263\015\266\016\260\023\257\025\271\026" +
    "\u0155\027\270\030\262\036\264\043\300\050\265\001\001" +
    "\000\032\011\254\012\274\013\263\015\266\016\260\023" +
    "\257\025\271\027\307\030\262\036\264\043\300\050\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\u015a\007\051\010\044\030\042\037\053" +
    "\046\050\051\040\001\001\000\016\007\051\010\044\030" +
    "\042\037\053\046\u0144\051\040\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoALS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoALS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoALS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoALS$actions {



  private final SintacticoALS parser;

  /** Constructor */
  CUP$SintacticoALS$actions(SintacticoALS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action_part00000000(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoALS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoALS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoALS$parser.done_parsing();
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTRADA 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENTRADA ::= IMPORT A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENTRADA ::= A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= A ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= IMPORT I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORT ::= I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= importar id punto extension signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    if(paradigmas.Paradigmas.interfaz!=null){
        paradigmas.Paradigmas.interfaz.importarArchivo(i); 
    }

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= incluir id signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VISIBILIDAD ::= dosPuntos VISIBILIDAD 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(n.nodo); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VISIBILIDAD ::= protegido 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("protegido")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VISIBILIDAD ::= privado 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("privado")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= publico 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= INSTRUCCIONES GLOBAL 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= GLOBAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GLOBAL ::= PRINCIPAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBAL ::= METODO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GLOBAL ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;
    VariableG.variableGlobal.add(n.nodo);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GLOBAL ::= DATOS 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALS ::= als id VISIBILIDAD llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ALS");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i));E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,v.nodo.texto);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",31, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALS ::= als id hereda id llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i)); E.insertar(new NodoG("hereda")); E.insertar(new NodoG(j));
    E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,"publico");

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",31, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCION ::= ACCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPCION ::= CrearASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCION ::= INSTANCIA signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCION ::= GRAFICAR signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCION ::= salir signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Terminar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCION ::= continuar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Continuar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCION ::= retornar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCION ::= retornar OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(n.nodo); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRINCIPAL ::= tipoVoid inicio parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("PRINCIPAL");
    RESULT = new Caracter();
    E.insertar(n.nodo);
    RESULT.nodo = E;
    ArrayList parametros = new ArrayList();
    //Metodo_FuncionG.agregarMF("inicio","vacio",n.nodo,parametros);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",29, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= tipoString 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("cadena")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= tipoInt 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("entero")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= tipoChar 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("char")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= tipoBool 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("bool")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= tipoDouble 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("decimal")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= tipoVoid 
            {
              Caracter RESULT =null;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("vacio")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= tipoFloat 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= imprimir parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG IMPRIMIR = new NodoG("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoG("imprimir")); IMPRIMIR.insertar(new NodoG("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoG(")")); IMPRIMIR.insertar(new NodoG("?")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE ::= var TIPO MasVARIABLE signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//6
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo);V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE ::= var TIPO MasMATRIZ signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo); V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasVARIABLE ::= MasVARIABLE coma id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasVARIABLE ::= MasVARIABLE coma id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MasVARIABLE ::= id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MasVARIABLE ::= id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //6
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MasMATRIZ ::= id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MasMATRIZ ::= id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= id ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //2 (?)
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= id ARREGLO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i)); ASIGNACION.insertar(m.nodo);  ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoG("?")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MATRIZ ::= MATRIZ corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(m.nodo);MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo); MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MATRIZ ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MATRIZ ::= MATRIZ corcheteA corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("["));
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));  
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNAR ::= igual OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNAR ::= igual ValorMATRIZ 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(v.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ValorMATRIZ ::= llaveA ValorMATRIZ llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//1
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ValorMATRIZ ::= ValorMATRIZ coma ValorMATRIZ 
            {
              Caracter RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v1.nodo); ValorMATRIZ.insertar(v2.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ValorMATRIZ ::= llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//3
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(new NodoG("{"));  ValorMATRIZ.insertar(v.nodo); ValorMATRIZ.insertar(new NodoG("}")); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoG(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= TIPO id parentesisA PARAMETROS parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //9
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(p.nodo); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;

   // Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO ::= TIPO id parentesisA parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    //Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROS ::= PARAMETROS coma TIPO id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		  //3
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(n.nodo); PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
    //Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS ::= TIPO id 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
   // Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoG("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		//8
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoG("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ELSE = new NodoG("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoG("else")); ELSE.insertar(new NodoG("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoG("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("while")); CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLO ::= hacer llaveA INSTRUCCION llaveC mientras parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		 //9
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("do")); CICLO.insertar(new NodoG("{")); CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}")); CICLO.insertar(new NodoG("while")); 
    CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("?"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG DEFECTO = new NodoG("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoG("default")); DEFECTO.insertar(new NodoG(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DEFECTO",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARA ::= para parentesisA VARIABLE dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //11
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("(")); PARA.insertar(a.nodo);  PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo); PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARA ::= para parentesisA id ASIGNAR dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //12
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("("));  PARA.insertar(new NodoG(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTANCIA ::= llamar id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTANCIA ::= llamar id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTANCIA ::= llamar AccesoASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar"));INSTANCIA.insertar(n.nodo);
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTANCIA ::= llamarHK id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTANCIA ::= llamarHK id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CrearASL ::= var id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("var")); E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CrearASL ::= id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AccesoASL ::= AccesoASL signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AccesoASL ::= id punto id 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(new NodoG("."));  E.insertar(new NodoG(b)); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AccesoASL ::= id punto id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(new NodoG("."));  E.insertar(new NodoG(b)); E.insertar(new NodoG("("));E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AccesoASL ::= id punto id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(new NodoG("."));  E.insertar(new NodoG(b)); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARREGLO ::= ARREGLO corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARREGLO ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(new NodoG("[")); E.insertar(n.nodo); E.insertar(new NodoG("]"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OP = new NodoG("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("(")); E.insertar(a.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("+")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("*")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("/")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("++"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("--"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("verdadero","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("falso","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E xor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&|")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&&")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("!")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("^")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= menos E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"cadena"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("'","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"caracter"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"entero"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"decimal"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i,"id"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= INSTANCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= id ARREGLO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i));E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= AccesoASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // GRAFICAR ::= graphikar parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("GRAFICAR");
    E.insertar(new NodoG("graphikar")); E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GRAFICAR",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DATOS ::= tipoVoid datos parentesisA parentesisC llaveA SENTENCIAS llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DATOS");
    E.insertar(new NodoG("vacio")); E.insertar(new NodoG("datos"));  E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DATOS",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(n.nodo); E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIAS ::= SENTENCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= procesar igual OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIA");
    E.insertar(new NodoG("Procesar")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA ::= donde parentesisA OP parentesisC igual OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIA");
    E.insertar(new NodoG("Donde")); E.insertar(n.nodo); E.insertar(m.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA ::= dondeCada parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIA");
    E.insertar(new NodoG("DondeCada"));E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= dondeTodo parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIA");
    E.insertar(new NodoG("DondeTodo")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoALS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoALS$do_action_part00000000(
                               CUP$SintacticoALS$act_num,
                               CUP$SintacticoALS$parser,
                               CUP$SintacticoALS$stack,
                               CUP$SintacticoALS$top);
    }
}

}
