
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Graphik;

import java_cup.runtime.*;
import java.util.ArrayList;
import Graphik.Ejecutar.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoALS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoALS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoALS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoALS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\052\004\000\002\052\003" +
    "\000\002\004\004\000\002\004\003\000\002\041\007\000" +
    "\002\041\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\002\000\002\006" +
    "\004\000\002\006\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\044\010\000" +
    "\002\044\012\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\004\000\002\030\003\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\040\011\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\023\007\000\002\031\006\000\002\031\006\000\002" +
    "\024\006\000\002\024\007\000\002\024\004\000\002\024" +
    "\005\000\002\050\007\000\002\050\010\000\002\050\005" +
    "\000\002\050\006\000\002\025\005\000\002\025\006\000" +
    "\002\025\006\000\002\034\006\000\002\034\005\000\002" +
    "\034\005\000\002\034\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\007\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\022\005\000\002\022\003\000" +
    "\002\007\013\000\002\007\012\000\002\017\006\000\002" +
    "\017\004\000\002\013\011\000\002\013\012\000\002\014" +
    "\006\000\002\015\011\000\002\015\013\000\002\016\011" +
    "\000\002\016\012\000\002\016\011\000\002\021\007\000" +
    "\002\021\006\000\002\032\005\000\002\037\015\000\002" +
    "\037\016\000\002\012\006\000\002\012\006\000\002\012" +
    "\007\000\002\012\006\000\002\012\007\000\002\012\004" +
    "\000\002\046\012\000\002\046\011\000\002\045\004\000" +
    "\002\045\006\000\002\045\007\000\002\011\004\000\002" +
    "\011\003\000\002\042\004\000\002\042\005\000\002\042" +
    "\006\000\002\042\007\000\002\047\006\000\002\047\005" +
    "\000\002\020\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\004\000\002\033\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\004\000\002\033\005\000\002\033\004\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\004\000" +
    "\002\033\003\000\002\053\011\000\002\054\011\000\002" +
    "\055\004\000\002\055\003\000\002\026\012\000\002\026" +
    "\012\000\002\056\010\000\002\056\006\000\002\043\011" +
    "\000\002\043\007\000\002\043\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\010\007\011\111\012\113\010\001\002\000" +
    "\006\002\ufffc\113\ufffc\001\002\000\006\002\ufffe\113\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\u017f\001" +
    "\002\000\004\046\026\001\002\000\004\046\022\001\002" +
    "\000\004\046\020\001\002\000\010\007\ufffa\111\ufffa\113" +
    "\ufffa\001\002\000\010\007\011\111\012\113\010\001\002" +
    "\000\006\002\uffff\113\010\001\002\000\010\007\ufffb\111" +
    "\ufffb\113\ufffb\001\002\000\006\002\ufffd\113\ufffd\001\002" +
    "\000\004\064\021\001\002\000\010\007\ufff8\111\ufff8\113" +
    "\ufff8\001\002\000\004\100\023\001\002\000\004\107\024" +
    "\001\002\000\004\064\025\001\002\000\010\007\ufff9\111" +
    "\ufff9\113\ufff9\001\002\000\016\004\033\005\030\006\027" +
    "\054\031\062\ufff3\112\ufff3\001\002\000\014\020\ufff6\040" +
    "\ufff6\062\ufff6\064\ufff6\112\ufff6\001\002\000\014\020\ufff5" +
    "\040\ufff5\062\ufff5\064\ufff5\112\ufff5\001\002\000\024\004" +
    "\033\005\030\006\027\020\ufff3\040\ufff3\054\031\062\ufff3" +
    "\064\ufff3\112\ufff3\001\002\000\006\062\035\112\034\001" +
    "\002\000\014\020\ufff4\040\ufff4\062\ufff4\064\ufff4\112\ufff4" +
    "\001\002\000\004\046\u017a\001\002\000\024\010\051\011" +
    "\050\012\036\013\043\014\045\015\040\046\037\103\041" +
    "\110\054\001\002\000\004\046\uffd8\001\002\000\004\046" +
    "\uffd2\001\002\000\004\046\uffd5\001\002\000\004\046\uffd3" +
    "\001\002\000\026\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\046\uffed\063\uffed\103\uffed\110\uffed\001\002" +
    "\000\004\046\uffd7\001\002\000\026\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\046\uffee\063\uffee\103\uffee" +
    "\110\uffee\001\002\000\004\046\uffd6\001\002\000\004\046" +
    "\u0168\001\002\000\026\010\051\011\050\012\036\013\043" +
    "\014\045\015\040\046\037\063\u0166\103\041\110\054\001" +
    "\002\000\004\046\uffd9\001\002\000\010\046\uffd4\102\263" +
    "\105\262\001\002\000\026\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\046\ufff1\063\ufff1\103\ufff1\110\ufff1" +
    "\001\002\000\026\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\046\uffef\063\uffef\103\uffef\110\uffef\001\002" +
    "\000\022\010\057\011\050\012\036\013\043\014\045\015" +
    "\040\046\037\103\041\001\002\000\026\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\046\ufff0\063\ufff0\103" +
    "\ufff0\110\ufff0\001\002\000\004\046\062\001\002\000\004" +
    "\046\uffd4\001\002\000\006\020\255\064\254\001\002\000" +
    "\006\020\250\064\247\001\002\000\022\004\033\005\030" +
    "\006\027\020\ufff3\040\ufff3\047\065\054\031\064\ufff3\001" +
    "\002\000\010\020\uffcc\040\227\064\uffcc\001\002\000\022" +
    "\004\033\005\030\006\027\020\ufff3\040\ufff3\047\223\054" +
    "\031\064\ufff3\001\002\000\034\016\070\033\075\045\071" +
    "\046\067\050\105\056\077\057\076\072\072\076\073\077" +
    "\102\101\100\114\074\115\101\001\002\000\004\050\221" +
    "\001\002\000\064\016\215\017\uff79\020\uff79\032\uff79\033" +
    "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\041\uff79\042\uff79" +
    "\043\uff79\044\uff79\047\175\050\uff79\051\uff79\053\uff79\054" +
    "\uff79\060\uff79\061\uff79\063\uff79\064\uff79\070\uff79\071\uff79" +
    "\100\161\001\002\000\032\016\070\033\075\045\071\046" +
    "\067\056\077\057\076\072\072\076\073\077\102\101\100" +
    "\114\074\115\101\001\002\000\032\016\070\033\075\045" +
    "\071\046\067\056\077\057\076\072\072\076\073\077\102" +
    "\101\100\114\074\115\101\001\002\000\056\017\uff7d\020" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\050\uff7d\051\uff7d\053" +
    "\uff7d\054\uff7d\060\uff7d\061\uff7d\063\uff7d\064\uff7d\070\uff7d" +
    "\071\uff7d\001\002\000\056\017\uff7a\020\uff7a\032\uff7a\033" +
    "\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\050\uff7a\051\uff7a\053\uff7a\054\uff7a\060" +
    "\uff7a\061\uff7a\063\uff7a\064\uff7a\070\uff7a\071\uff7a\001\002" +
    "\000\006\046\160\105\156\001\002\000\032\016\070\033" +
    "\075\045\071\046\067\056\077\057\076\072\072\076\073" +
    "\077\102\101\100\114\074\115\101\001\002\000\056\017" +
    "\uff84\020\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\041\uff84\042\uff84\043\uff84\044\uff84\050\uff84\051" +
    "\uff84\053\uff84\054\uff84\060\uff84\061\uff84\063\uff84\064\uff84" +
    "\070\uff84\071\uff84\001\002\000\056\017\uff85\020\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\050\uff85\051\uff85\053\uff85\054" +
    "\uff85\060\uff85\061\uff85\063\uff85\064\uff85\070\uff85\071\uff85" +
    "\001\002\000\056\017\uff7c\020\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\050\uff7c\051\uff7c\053\uff7c\054\uff7c\060\uff7c\061" +
    "\uff7c\063\uff7c\064\uff7c\070\uff7c\071\uff7c\001\002\000\004" +
    "\046\145\001\002\000\056\017\uff7b\020\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\050\uff7b\051\uff7b\053\uff7b\054\uff7b\060" +
    "\uff7b\061\uff7b\063\uff7b\064\uff7b\070\uff7b\071\uff7b\001\002" +
    "\000\056\017\uff78\020\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\037\uff78\041\uff78\042\uff78\043\uff78\044\uff78" +
    "\050\uff78\051\uff78\053\uff78\054\uff78\060\uff78\061\uff78\063" +
    "\uff78\064\uff78\070\uff78\071\uff78\001\002\000\056\017\uff76" +
    "\020\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\050\uff76\051\uff76" +
    "\053\uff76\054\uff76\060\uff76\061\uff76\063\uff76\064\uff76\070" +
    "\uff76\071\uff76\001\002\000\022\004\uffc0\005\uffc0\006\uffc0" +
    "\020\uffc0\040\uffc0\047\uffc0\054\uffc0\064\uffc0\001\002\000" +
    "\056\017\uff93\020\uff93\032\124\033\113\034\125\035\120" +
    "\036\110\037\122\041\121\042\112\043\116\044\114\050" +
    "\uff93\051\115\053\123\054\uff93\060\126\061\107\063\uff93" +
    "\064\uff93\070\117\071\111\001\002\000\032\016\070\033" +
    "\075\045\071\046\067\056\077\057\076\072\072\076\073" +
    "\077\102\101\100\114\074\115\101\001\002\000\032\016" +
    "\070\033\075\045\071\046\067\056\077\057\076\072\072" +
    "\076\073\077\102\101\100\114\074\115\101\001\002\000" +
    "\032\016\070\033\075\045\071\046\067\056\077\057\076" +
    "\072\072\076\073\077\102\101\100\114\074\115\101\001" +
    "\002\000\032\016\070\033\075\045\071\046\067\056\077" +
    "\057\076\072\072\076\073\077\102\101\100\114\074\115" +
    "\101\001\002\000\032\016\070\033\075\045\071\046\067" +
    "\056\077\057\076\072\072\076\073\077\102\101\100\114" +
    "\074\115\101\001\002\000\032\016\070\033\075\045\071" +
    "\046\067\056\077\057\076\072\072\076\073\077\102\101" +
    "\100\114\074\115\101\001\002\000\056\017\uff8c\020\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\050\uff8c\051\uff8c\053\uff8c" +
    "\054\uff8c\060\uff8c\061\uff8c\063\uff8c\064\uff8c\070\uff8c\071" +
    "\uff8c\001\002\000\032\016\070\033\075\045\071\046\067" +
    "\056\077\057\076\072\072\076\073\077\102\101\100\114" +
    "\074\115\101\001\002\000\056\017\uff8d\020\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\050\uff8d\051\uff8d\053\uff8d\054\uff8d" +
    "\060\uff8d\061\uff8d\063\uff8d\064\uff8d\070\uff8d\071\uff8d\001" +
    "\002\000\032\016\070\033\075\045\071\046\067\056\077" +
    "\057\076\072\072\076\073\077\102\101\100\114\074\115" +
    "\101\001\002\000\032\016\070\033\075\045\071\046\067" +
    "\056\077\057\076\072\072\076\073\077\102\101\100\114" +
    "\074\115\101\001\002\000\032\016\070\033\075\045\071" +
    "\046\067\056\077\057\076\072\072\076\073\077\102\101" +
    "\100\114\074\115\101\001\002\000\032\016\070\033\075" +
    "\045\071\046\067\056\077\057\076\072\072\076\073\077" +
    "\102\101\100\114\074\115\101\001\002\000\032\016\070" +
    "\033\075\045\071\046\067\056\077\057\076\072\072\076" +
    "\073\077\102\101\100\114\074\115\101\001\002\000\032" +
    "\016\070\033\075\045\071\046\067\056\077\057\076\072" +
    "\072\076\073\077\102\101\100\114\074\115\101\001\002" +
    "\000\032\016\070\033\075\045\071\046\067\056\077\057" +
    "\076\072\072\076\073\077\102\101\100\114\074\115\101" +
    "\001\002\000\056\017\uff87\020\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\041\uff87\042\uff87\043\uff87" +
    "\044\uff87\050\uff87\051\uff87\053\uff87\054\uff87\060\uff87\061" +
    "\uff87\063\uff87\064\uff87\070\uff87\071\uff87\001\002\000\056" +
    "\017\uff8b\020\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\041\121\042\uff8b\043\uff8b\044\uff8b\050\uff8b" +
    "\051\115\053\uff8b\054\uff8b\060\126\061\uff8b\063\uff8b\064" +
    "\uff8b\070\117\071\uff8b\001\002\000\056\017\uff91\020\uff91" +
    "\032\uff91\033\uff91\034\125\035\120\036\110\037\122\041" +
    "\121\042\112\043\116\044\114\050\uff91\051\115\053\123" +
    "\054\uff91\060\126\061\107\063\uff91\064\uff91\070\117\071" +
    "\111\001\002\000\056\017\uff8f\020\uff8f\032\uff8f\033\uff8f" +
    "\034\125\035\120\036\110\037\122\041\121\042\112\043" +
    "\116\044\114\050\uff8f\051\115\053\uff8f\054\uff8f\060\126" +
    "\061\107\063\uff8f\064\uff8f\070\117\071\uff8f\001\002\000" +
    "\056\017\uff88\020\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\041\121\042\uff88\043\uff88\044\uff88\050" +
    "\uff88\051\115\053\uff88\054\uff88\060\126\061\uff88\063\uff88" +
    "\064\uff88\070\117\071\uff88\001\002\000\056\017\uff86\020" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\050\uff86\051\uff86\053" +
    "\uff86\054\uff86\060\uff86\061\uff86\063\uff86\064\uff86\070\uff86" +
    "\071\uff86\001\002\000\056\017\uff8a\020\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\041\121\042\uff8a" +
    "\043\uff8a\044\uff8a\050\uff8a\051\115\053\uff8a\054\uff8a\060" +
    "\126\061\uff8a\063\uff8a\064\uff8a\070\117\071\uff8a\001\002" +
    "\000\056\017\uff82\020\uff82\032\uff82\033\uff82\034\125\035" +
    "\120\036\110\037\122\041\121\042\uff82\043\uff82\044\uff82" +
    "\050\uff82\051\115\053\uff82\054\uff82\060\126\061\uff82\063" +
    "\uff82\064\uff82\070\117\071\uff82\001\002\000\056\017\uff81" +
    "\020\uff81\032\uff81\033\uff81\034\125\035\120\036\110\037" +
    "\122\041\121\042\uff81\043\uff81\044\uff81\050\uff81\051\115" +
    "\053\uff81\054\uff81\060\126\061\uff81\063\uff81\064\uff81\070" +
    "\117\071\uff81\001\002\000\056\017\uff90\020\uff90\032\uff90" +
    "\033\uff90\034\125\035\120\036\110\037\122\041\121\042" +
    "\112\043\116\044\114\050\uff90\051\115\053\123\054\uff90" +
    "\060\126\061\107\063\uff90\064\uff90\070\117\071\111\001" +
    "\002\000\056\017\uff83\020\uff83\032\uff83\033\uff83\034\125" +
    "\035\120\036\110\037\122\041\121\042\uff83\043\uff83\044" +
    "\uff83\050\uff83\051\115\053\uff83\054\uff83\060\126\061\uff83" +
    "\063\uff83\064\uff83\070\117\071\uff83\001\002\000\056\017" +
    "\uff8e\020\uff8e\032\uff8e\033\uff8e\034\125\035\120\036\110" +
    "\037\122\041\121\042\112\043\116\044\114\050\uff8e\051" +
    "\115\053\uff8e\054\uff8e\060\126\061\107\063\uff8e\064\uff8e" +
    "\070\117\071\uff8e\001\002\000\056\017\uff89\020\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\041\121" +
    "\042\uff89\043\uff89\044\uff89\050\uff89\051\115\053\uff89\054" +
    "\uff89\060\126\061\uff89\063\uff89\064\uff89\070\117\071\uff89" +
    "\001\002\000\056\017\uff7f\020\uff7f\032\uff7f\033\uff7f\034" +
    "\125\035\120\036\110\037\122\041\121\042\112\043\116" +
    "\044\114\050\uff7f\051\115\053\uff7f\054\uff7f\060\126\061" +
    "\uff7f\063\uff7f\064\uff7f\070\117\071\uff7f\001\002\000\004" +
    "\016\146\001\002\000\034\016\070\017\151\033\075\045" +
    "\071\046\067\056\077\057\076\072\072\076\073\077\102" +
    "\101\100\114\074\115\101\001\002\000\010\017\uffb8\020" +
    "\uffb8\063\uffb8\001\002\000\006\017\153\020\152\001\002" +
    "\000\056\017\uffa3\020\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\050\uffa3\051\uffa3\053\uffa3\054\uffa3\060\uffa3\061\uffa3\063" +
    "\uffa3\064\uffa3\070\uffa3\071\uffa3\001\002\000\032\016\070" +
    "\033\075\045\071\046\067\056\077\057\076\072\072\076" +
    "\073\077\102\101\100\114\074\115\101\001\002\000\056" +
    "\017\uffa2\020\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\050\uffa2" +
    "\051\uffa2\053\uffa2\054\uffa2\060\uffa2\061\uffa2\063\uffa2\064" +
    "\uffa2\070\uffa2\071\uffa2\001\002\000\010\017\uffb9\020\uffb9" +
    "\063\uffb9\001\002\000\056\017\uff7e\020\uff7e\032\uff7e\033" +
    "\uff7e\034\125\035\120\036\110\037\122\041\121\042\112" +
    "\043\116\044\114\050\uff7e\051\115\053\123\054\uff7e\060" +
    "\126\061\107\063\uff7e\064\uff7e\070\117\071\111\001\002" +
    "\000\004\016\207\001\002\000\056\017\uffa1\020\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\050\uffa1\051\uffa1\053\uffa1\054" +
    "\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1\070\uffa1\071\uffa1" +
    "\001\002\000\006\016\164\100\161\001\002\000\004\046" +
    "\173\001\002\000\060\017\uff9e\020\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\060\uff9e" +
    "\061\uff9e\063\uff9e\064\uff9e\070\uff9e\071\uff9e\100\161\001" +
    "\002\000\060\017\uff9a\020\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a\060\uff9a\061\uff9a" +
    "\063\uff9a\064\uff9a\070\uff9a\071\uff9a\100\uff9a\001\002\000" +
    "\034\016\070\017\166\033\075\045\071\046\067\056\077" +
    "\057\076\072\072\076\073\077\102\101\100\114\074\115" +
    "\101\001\002\000\006\017\171\020\152\001\002\000\060" +
    "\017\uffa5\020\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\050\uffa5" +
    "\051\uffa5\053\uffa5\054\uffa5\060\uffa5\061\uffa5\063\uffa5\064" +
    "\uffa5\070\uffa5\071\uffa5\100\161\001\002\000\060\017\uff9d" +
    "\020\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\050\uff9d\051\uff9d" +
    "\053\uff9d\054\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\070" +
    "\uff9d\071\uff9d\100\161\001\002\000\060\017\uff9b\020\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\050\uff9b\051\uff9b\053\uff9b" +
    "\054\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b\070\uff9b\071" +
    "\uff9b\100\uff9b\001\002\000\060\017\uffa4\020\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4" +
    "\060\uffa4\061\uffa4\063\uffa4\064\uffa4\070\uffa4\071\uffa4\100" +
    "\161\001\002\000\060\017\uff9c\020\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\050\uff9c\051\uff9c\053\uff9c\054\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\064\uff9c\070\uff9c\071\uff9c\100\161\001" +
    "\002\000\066\016\176\017\uff99\020\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\047\175\050\uff99\051\uff99\053\uff99" +
    "\054\uff99\060\uff99\061\uff99\063\uff99\064\uff99\070\uff99\071" +
    "\uff99\100\uff99\001\002\000\064\017\uff98\020\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\047\204\050\uff98\051\uff98" +
    "\053\uff98\054\uff98\060\uff98\061\uff98\063\uff98\064\uff98\070" +
    "\uff98\071\uff98\100\uff98\001\002\000\032\016\070\033\075" +
    "\045\071\046\067\056\077\057\076\072\072\076\073\077" +
    "\102\101\100\114\074\115\101\001\002\000\034\016\070" +
    "\017\200\033\075\045\071\046\067\056\077\057\076\072" +
    "\072\076\073\077\102\101\100\114\074\115\101\001\002" +
    "\000\006\017\201\020\152\001\002\000\062\017\uff97\020" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\050\uff97\051" +
    "\uff97\053\uff97\054\uff97\060\uff97\061\uff97\063\uff97\064\uff97" +
    "\070\uff97\071\uff97\100\uff97\001\002\000\062\017\uff96\020" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\050\uff96\051" +
    "\uff96\053\uff96\054\uff96\060\uff96\061\uff96\063\uff96\064\uff96" +
    "\070\uff96\071\uff96\100\uff96\001\002\000\004\050\203\001" +
    "\002\000\064\017\uff94\020\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\047\uff94\050\uff94\051\uff94\053\uff94\054\uff94" +
    "\060\uff94\061\uff94\063\uff94\064\uff94\070\uff94\071\uff94\100" +
    "\uff94\001\002\000\032\016\070\033\075\045\071\046\067" +
    "\056\077\057\076\072\072\076\073\077\102\101\100\114" +
    "\074\115\101\001\002\000\004\050\206\001\002\000\064" +
    "\017\uff95\020\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\047\uff95\050\uff95\051\uff95\053\uff95\054\uff95\060\uff95\061" +
    "\uff95\063\uff95\064\uff95\070\uff95\071\uff95\100\uff95\001\002" +
    "\000\004\017\210\001\002\000\056\017\uffa6\020\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\050\uffa6\051\uffa6\053\uffa6\054" +
    "\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6\070\uffa6\071\uffa6" +
    "\001\002\000\056\017\uff80\020\uff80\032\uff80\033\uff80\034" +
    "\125\035\120\036\110\037\122\041\121\042\uff80\043\uff80" +
    "\044\uff80\050\uff80\051\115\053\uff80\054\uff80\060\126\061" +
    "\uff80\063\uff80\064\uff80\070\117\071\uff80\001\002\000\044" +
    "\017\213\032\124\033\113\034\125\035\120\036\110\037" +
    "\122\041\121\042\112\043\116\044\114\051\115\053\123" +
    "\060\126\061\107\070\117\071\111\001\002\000\056\017" +
    "\uff92\020\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\041\uff92\042\uff92\043\uff92\044\uff92\050\uff92\051" +
    "\uff92\053\uff92\054\uff92\060\uff92\061\uff92\063\uff92\064\uff92" +
    "\070\uff92\071\uff92\001\002\000\060\017\uff77\020\uff77\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\047\204\050\uff77\051\uff77\053" +
    "\uff77\054\uff77\060\uff77\061\uff77\063\uff77\064\uff77\070\uff77" +
    "\071\uff77\001\002\000\034\016\070\017\217\033\075\045" +
    "\071\046\067\056\077\057\076\072\072\076\073\077\102" +
    "\101\100\114\074\115\101\001\002\000\006\017\220\020" +
    "\152\001\002\000\004\100\161\001\002\000\004\100\161" +
    "\001\002\000\022\004\uffc2\005\uffc2\006\uffc2\020\uffc2\040" +
    "\uffc2\047\uffc2\054\uffc2\064\uffc2\001\002\000\010\020\uffc8" +
    "\040\227\064\uffc8\001\002\000\034\016\070\033\075\045" +
    "\071\046\067\050\225\056\077\057\076\072\072\076\073" +
    "\077\102\101\100\114\074\115\101\001\002\000\004\050" +
    "\226\001\002\000\022\004\uffc1\005\uffc1\006\uffc1\020\uffc1" +
    "\040\uffc1\047\uffc1\054\uffc1\064\uffc1\001\002\000\022\004" +
    "\uffc3\005\uffc3\006\uffc3\020\uffc3\040\uffc3\047\uffc3\054\uffc3" +
    "\064\uffc3\001\002\000\036\016\070\033\075\045\071\046" +
    "\067\056\077\057\076\062\232\072\072\076\073\077\102" +
    "\101\100\106\234\114\074\115\101\001\002\000\006\020" +
    "\uffc7\064\uffc7\001\002\000\010\020\uffbf\054\uffbf\064\uffbf" +
    "\001\002\000\034\016\070\033\075\045\071\046\067\056" +
    "\077\057\076\062\232\072\072\076\073\077\102\101\100" +
    "\114\074\115\101\001\002\000\010\020\240\054\uffbe\064" +
    "\uffbe\001\002\000\004\046\235\001\002\000\004\016\236" +
    "\001\002\000\004\017\237\001\002\000\010\020\uffbd\054" +
    "\uffbd\064\uffbd\001\002\000\004\062\232\001\002\000\012" +
    "\020\uffbb\054\uffbb\063\uffbb\064\uffbb\001\002\000\006\020" +
    "\152\063\245\001\002\000\006\020\240\063\244\001\002" +
    "\000\012\020\uffbc\054\uffbc\063\uffbc\064\uffbc\001\002\000" +
    "\012\020\uffba\054\uffba\063\uffba\064\uffba\001\002\000\006" +
    "\020\uffcb\064\uffcb\001\002\000\064\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\022\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\046\uffd0\052" +
    "\uffd0\054\uffd0\055\uffd0\063\uffd0\073\uffd0\103\uffd0\104\uffd0" +
    "\110\uffd0\114\uffd0\115\uffd0\001\002\000\004\046\251\001" +
    "\002\000\020\004\033\005\030\006\027\020\ufff3\040\ufff3" +
    "\054\031\064\ufff3\001\002\000\010\020\uffce\040\227\064" +
    "\uffce\001\002\000\006\020\uffcd\064\uffcd\001\002\000\064" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\021" +
    "\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\046\uffcf\052\uffcf\054\uffcf\055\uffcf\063\uffcf\073" +
    "\uffcf\103\uffcf\104\uffcf\110\uffcf\114\uffcf\115\uffcf\001\002" +
    "\000\004\046\256\001\002\000\004\047\065\001\002\000" +
    "\022\004\033\005\030\006\027\020\ufff3\040\ufff3\047\223" +
    "\054\031\064\ufff3\001\002\000\010\020\uffca\040\227\064" +
    "\uffca\001\002\000\006\020\uffc9\064\uffc9\001\002\000\004" +
    "\016\u0137\001\002\000\004\016\264\001\002\000\004\017" +
    "\265\001\002\000\004\062\266\001\002\000\036\021\307" +
    "\022\315\024\313\027\273\030\277\031\304\046\310\052" +
    "\271\055\272\073\267\104\312\110\054\114\074\115\101" +
    "\001\002\000\004\016\u0131\001\002\000\040\021\307\022" +
    "\315\024\313\027\273\030\277\031\304\046\310\052\271" +
    "\055\272\063\u0130\073\267\104\312\110\054\114\074\115" +
    "\101\001\002\000\004\016\u011c\001\002\000\004\016\u0118" +
    "\001\002\000\004\016\u0112\001\002\000\044\021\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\046\uffe8\052\uffe8\055\uffe8\063\uffe8\073\uffe8\104\uffe8\110" +
    "\uffe8\114\uffe8\115\uffe8\001\002\000\044\021\uffe7\022\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\046" +
    "\uffe7\052\uffe7\055\uffe7\063\uffe7\073\uffe7\104\uffe7\110\uffe7" +
    "\114\uffe7\115\uffe7\001\002\000\044\021\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\046\uffe4" +
    "\052\uffe4\055\uffe4\063\uffe4\073\uffe4\104\uffe4\110\uffe4\114" +
    "\uffe4\115\uffe4\001\002\000\004\062\u010a\001\002\000\044" +
    "\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\046\uffe5\052\uffe5\055\uffe5\063\uffe5\073\uffe5" +
    "\104\uffe5\110\uffe5\114\uffe5\115\uffe5\001\002\000\044\021" +
    "\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\046\uffe2\052\uffe2\055\uffe2\063\uffe2\073\uffe2\104" +
    "\uffe2\110\uffe2\114\uffe2\115\uffe2\001\002\000\044\021\uffdf" +
    "\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\046\uffdf\052\uffdf\055\uffdf\063\uffdf\073\uffdf\104\uffdf" +
    "\110\uffdf\114\uffdf\115\uffdf\001\002\000\044\021\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\046\uffe6\052\uffe6\055\uffe6\063\uffe6\073\uffe6\104\uffe6\110" +
    "\uffe6\114\uffe6\115\uffe6\001\002\000\004\064\u0109\001\002" +
    "\000\044\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\046\uffe9\052\uffe9\055\uffe9\063\uffe9" +
    "\073\uffe9\104\uffe9\110\uffe9\114\uffe9\115\uffe9\001\002\000" +
    "\044\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\046\uffe3\052\uffe3\055\uffe3\063\uffe3\073" +
    "\uffe3\104\uffe3\110\uffe3\114\uffe3\115\uffe3\001\002\000\034" +
    "\016\070\033\075\045\071\046\067\056\077\057\076\064" +
    "\u0107\072\072\076\073\077\102\101\100\114\074\115\101" +
    "\001\002\000\012\040\361\046\364\047\175\100\161\001" +
    "\002\000\004\064\360\001\002\000\004\064\357\001\002" +
    "\000\004\016\332\001\002\000\044\021\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\046\uffe1" +
    "\052\uffe1\055\uffe1\063\uffe1\073\uffe1\104\uffe1\110\uffe1\114" +
    "\uffe1\115\uffe1\001\002\000\004\016\316\001\002\000\032" +
    "\016\070\033\075\045\071\046\067\056\077\057\076\072" +
    "\072\076\073\077\102\101\100\114\074\115\101\001\002" +
    "\000\004\017\320\001\002\000\004\062\321\001\002\000" +
    "\036\021\307\022\315\024\313\027\273\030\277\031\304" +
    "\046\310\052\271\055\272\073\267\104\312\110\054\114" +
    "\074\115\101\001\002\000\040\021\307\022\315\024\313" +
    "\027\273\030\277\031\304\046\310\052\271\055\272\063" +
    "\324\073\267\104\312\110\054\114\074\115\101\001\002" +
    "\000\044\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\046\uffea\052\uffea\055\uffea\063\uffea" +
    "\073\uffea\104\uffea\110\uffea\114\uffea\115\uffea\001\002\000" +
    "\046\021\uffb3\022\uffb3\023\325\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\046\uffb3\052\uffb3\055\uffb3\063" +
    "\uffb3\073\uffb3\104\uffb3\110\uffb3\114\uffb3\115\uffb3\001\002" +
    "\000\004\062\327\001\002\000\044\021\uffb2\022\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\046\uffb2" +
    "\052\uffb2\055\uffb2\063\uffb2\073\uffb2\104\uffb2\110\uffb2\114" +
    "\uffb2\115\uffb2\001\002\000\036\021\307\022\315\024\313" +
    "\027\273\030\277\031\304\046\310\052\271\055\272\073" +
    "\267\104\312\110\054\114\074\115\101\001\002\000\040" +
    "\021\307\022\315\024\313\027\273\030\277\031\304\046" +
    "\310\052\271\055\272\063\331\073\267\104\312\110\054" +
    "\114\074\115\101\001\002\000\044\021\uffb1\022\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\046\uffb1" +
    "\052\uffb1\055\uffb1\063\uffb1\073\uffb1\104\uffb1\110\uffb1\114" +
    "\uffb1\115\uffb1\001\002\000\032\016\070\033\075\045\071" +
    "\046\067\056\077\057\076\072\072\076\073\077\102\101" +
    "\100\114\074\115\101\001\002\000\004\017\334\001\002" +
    "\000\004\062\335\001\002\000\006\025\337\026\340\001" +
    "\002\000\004\063\356\001\002\000\032\016\070\033\075" +
    "\045\071\046\067\056\077\057\076\072\072\076\073\077" +
    "\102\101\100\114\074\115\101\001\002\000\004\054\351" +
    "\001\002\000\010\025\344\026\340\063\342\001\002\000" +
    "\044\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\046\uffae\052\uffae\055\uffae\063\uffae\073" +
    "\uffae\104\uffae\110\uffae\114\uffae\115\uffae\001\002\000\004" +
    "\063\350\001\002\000\032\016\070\033\075\045\071\046" +
    "\067\056\077\057\076\072\072\076\073\077\102\101\100" +
    "\114\074\115\101\001\002\000\004\054\346\001\002\000" +
    "\036\021\307\022\315\024\313\027\273\030\277\031\304" +
    "\046\310\052\271\055\272\073\267\104\312\110\054\114" +
    "\074\115\101\001\002\000\044\021\307\022\315\024\313" +
    "\025\uffab\026\uffab\027\273\030\277\031\304\046\310\052" +
    "\271\055\272\063\uffab\073\267\104\312\110\054\114\074" +
    "\115\101\001\002\000\044\021\uffad\022\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\046\uffad\052\uffad" +
    "\055\uffad\063\uffad\073\uffad\104\uffad\110\uffad\114\uffad\115" +
    "\uffad\001\002\000\036\021\307\022\315\024\313\027\273" +
    "\030\277\031\304\046\310\052\271\055\272\073\267\104" +
    "\312\110\054\114\074\115\101\001\002\000\040\021\307" +
    "\022\315\024\313\027\273\030\277\031\304\046\310\052" +
    "\271\055\272\063\uffa9\073\267\104\312\110\054\114\074" +
    "\115\101\001\002\000\004\054\354\001\002\000\036\021" +
    "\307\022\315\024\313\027\273\030\277\031\304\046\310" +
    "\052\271\055\272\073\267\104\312\110\054\114\074\115" +
    "\101\001\002\000\044\021\307\022\315\024\313\025\uffaa" +
    "\026\uffaa\027\273\030\277\031\304\046\310\052\271\055" +
    "\272\063\uffaa\073\267\104\312\110\054\114\074\115\101" +
    "\001\002\000\044\021\uffac\022\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\046\uffac\052\uffac\055\uffac" +
    "\063\uffac\073\uffac\104\uffac\110\uffac\114\uffac\115\uffac\001" +
    "\002\000\044\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\046\uffdd\052\uffdd\055\uffdd\063" +
    "\uffdd\073\uffdd\104\uffdd\110\uffdd\114\uffdd\115\uffdd\001\002" +
    "\000\044\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\046\uffe0\052\uffe0\055\uffe0\063\uffe0" +
    "\073\uffe0\104\uffe0\110\uffe0\114\uffe0\115\uffe0\001\002\000" +
    "\036\016\070\033\075\045\071\046\067\056\077\057\076" +
    "\062\232\072\072\076\073\077\102\101\100\106\u0101\114" +
    "\074\115\101\001\002\000\004\064\u0100\001\002\000\004" +
    "\040\227\001\002\000\004\040\370\001\002\000\006\040" +
    "\227\047\204\001\002\000\004\064\367\001\002\000\044" +
    "\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\046\uffc5\052\uffc5\055\uffc5\063\uffc5\073\uffc5" +
    "\104\uffc5\110\uffc5\114\uffc5\115\uffc5\001\002\000\004\106" +
    "\371\001\002\000\004\046\372\001\002\000\004\016\373" +
    "\001\002\000\004\017\374\001\002\000\004\064\375\001" +
    "\002\000\044\021\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\046\uffa0\052\uffa0\055\uffa0\063" +
    "\uffa0\073\uffa0\104\uffa0\110\uffa0\114\uffa0\115\uffa0\001\002" +
    "\000\004\064\377\001\002\000\044\021\uffc4\022\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\046\uffc4" +
    "\052\uffc4\055\uffc4\063\uffc4\073\uffc4\104\uffc4\110\uffc4\114" +
    "\uffc4\115\uffc4\001\002\000\044\021\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\046\uffc6\052" +
    "\uffc6\055\uffc6\063\uffc6\073\uffc6\104\uffc6\110\uffc6\114\uffc6" +
    "\115\uffc6\001\002\000\004\046\u0102\001\002\000\004\016" +
    "\u0103\001\002\000\004\017\u0104\001\002\000\004\064\u0105" +
    "\001\002\000\044\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\046\uff9f\052\uff9f\055\uff9f" +
    "\063\uff9f\073\uff9f\104\uff9f\110\uff9f\114\uff9f\115\uff9f\001" +
    "\002\000\004\064\u0108\001\002\000\044\021\uffdc\022\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\046" +
    "\uffdc\052\uffdc\055\uffdc\063\uffdc\073\uffdc\104\uffdc\110\uffdc" +
    "\114\uffdc\115\uffdc\001\002\000\044\021\uffdb\022\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\046\uffdb" +
    "\052\uffdb\055\uffdb\063\uffdb\073\uffdb\104\uffdb\110\uffdb\114" +
    "\uffdb\115\uffdb\001\002\000\044\021\uffde\022\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\046\uffde\052" +
    "\uffde\055\uffde\063\uffde\073\uffde\104\uffde\110\uffde\114\uffde" +
    "\115\uffde\001\002\000\036\021\307\022\315\024\313\027" +
    "\273\030\277\031\304\046\310\052\271\055\272\073\267" +
    "\104\312\110\054\114\074\115\101\001\002\000\040\021" +
    "\307\022\315\024\313\027\273\030\277\031\304\046\310" +
    "\052\271\055\272\063\u010c\073\267\104\312\110\054\114" +
    "\074\115\101\001\002\000\004\027\u010d\001\002\000\004" +
    "\016\u010e\001\002\000\032\016\070\033\075\045\071\046" +
    "\067\056\077\057\076\072\072\076\073\077\102\101\100" +
    "\114\074\115\101\001\002\000\004\017\u0110\001\002\000" +
    "\004\064\u0111\001\002\000\044\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\046\uffaf\052" +
    "\uffaf\055\uffaf\063\uffaf\073\uffaf\104\uffaf\110\uffaf\114\uffaf" +
    "\115\uffaf\001\002\000\032\016\070\033\075\045\071\046" +
    "\067\056\077\057\076\072\072\076\073\077\102\101\100" +
    "\114\074\115\101\001\002\000\004\017\u0114\001\002\000" +
    "\004\062\u0115\001\002\000\036\021\307\022\315\024\313" +
    "\027\273\030\277\031\304\046\310\052\271\055\272\073" +
    "\267\104\312\110\054\114\074\115\101\001\002\000\040" +
    "\021\307\022\315\024\313\027\273\030\277\031\304\046" +
    "\310\052\271\055\272\063\u0117\073\267\104\312\110\054" +
    "\114\074\115\101\001\002\000\044\021\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\046\uffb0" +
    "\052\uffb0\055\uffb0\063\uffb0\073\uffb0\104\uffb0\110\uffb0\114" +
    "\uffb0\115\uffb0\001\002\000\032\016\070\033\075\045\071" +
    "\046\067\056\077\057\076\072\072\076\073\077\102\101" +
    "\100\114\074\115\101\001\002\000\004\017\u011a\001\002" +
    "\000\004\064\u011b\001\002\000\044\021\uffd1\022\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\046\uffd1" +
    "\052\uffd1\055\uffd1\063\uffd1\073\uffd1\104\uffd1\110\uffd1\114" +
    "\uffd1\115\uffd1\001\002\000\006\046\u011e\110\054\001\002" +
    "\000\004\054\u0128\001\002\000\004\040\227\001\002\000" +
    "\004\054\u0120\001\002\000\032\016\070\033\075\045\071" +
    "\046\067\056\077\057\076\072\072\076\073\077\102\101" +
    "\100\114\074\115\101\001\002\000\004\054\u0122\001\002" +
    "\000\032\016\070\033\075\045\071\046\067\056\077\057" +
    "\076\072\072\076\073\077\102\101\100\114\074\115\101" +
    "\001\002\000\004\017\u0124\001\002\000\004\062\u0125\001" +
    "\002\000\036\021\307\022\315\024\313\027\273\030\277" +
    "\031\304\046\310\052\271\055\272\073\267\104\312\110" +
    "\054\114\074\115\101\001\002\000\040\021\307\022\315" +
    "\024\313\027\273\030\277\031\304\046\310\052\271\055" +
    "\272\063\u0127\073\267\104\312\110\054\114\074\115\101" +
    "\001\002\000\044\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\046\uffa7\052\uffa7\055\uffa7" +
    "\063\uffa7\073\uffa7\104\uffa7\110\uffa7\114\uffa7\115\uffa7\001" +
    "\002\000\032\016\070\033\075\045\071\046\067\056\077" +
    "\057\076\072\072\076\073\077\102\101\100\114\074\115" +
    "\101\001\002\000\004\054\u012a\001\002\000\032\016\070" +
    "\033\075\045\071\046\067\056\077\057\076\072\072\076" +
    "\073\077\102\101\100\114\074\115\101\001\002\000\004" +
    "\017\u012c\001\002\000\004\062\u012d\001\002\000\036\021" +
    "\307\022\315\024\313\027\273\030\277\031\304\046\310" +
    "\052\271\055\272\073\267\104\312\110\054\114\074\115" +
    "\101\001\002\000\040\021\307\022\315\024\313\027\273" +
    "\030\277\031\304\046\310\052\271\055\272\063\u012f\073" +
    "\267\104\312\110\054\114\074\115\101\001\002\000\044" +
    "\021\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\046\uffa8\052\uffa8\055\uffa8\063\uffa8\073\uffa8" +
    "\104\uffa8\110\uffa8\114\uffa8\115\uffa8\001\002\000\026\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\046\uffda" +
    "\063\uffda\103\uffda\110\uffda\001\002\000\004\046\u0132\001" +
    "\002\000\004\020\u0133\001\002\000\004\046\u0134\001\002" +
    "\000\004\017\u0135\001\002\000\004\064\u0136\001\002\000" +
    "\044\021\uff75\022\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\031\uff75\046\uff75\052\uff75\055\uff75\063\uff75\073" +
    "\uff75\104\uff75\110\uff75\114\uff75\115\uff75\001\002\000\004" +
    "\017\u0138\001\002\000\004\062\u0139\001\002\000\004\074" +
    "\u013b\001\002\000\012\063\uff72\116\u0157\117\u0154\120\u0155" +
    "\001\002\000\004\040\u013e\001\002\000\004\063\u013d\001" +
    "\002\000\026\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\046\uff74\063\uff74\103\uff74\110\uff74\001\002\000" +
    "\006\114\u0140\115\u013f\001\002\000\004\046\u014f\001\002" +
    "\000\004\046\u0141\001\002\000\004\016\u0142\001\002\000" +
    "\004\075\u0143\001\002\000\004\016\u014c\001\002\000\006" +
    "\017\u0146\020\u0145\001\002\000\004\075\u0148\001\002\000" +
    "\004\064\u0147\001\002\000\012\063\uff70\116\uff70\117\uff70" +
    "\120\uff70\001\002\000\004\016\u0149\001\002\000\032\016" +
    "\070\033\075\045\071\046\067\056\077\057\076\072\072" +
    "\076\073\077\102\101\100\114\074\115\101\001\002\000" +
    "\004\017\u014b\001\002\000\006\017\uff6f\020\uff6f\001\002" +
    "\000\032\016\070\033\075\045\071\046\067\056\077\057" +
    "\076\072\072\076\073\077\102\101\100\114\074\115\101" +
    "\001\002\000\004\017\u014e\001\002\000\006\017\uff6e\020" +
    "\uff6e\001\002\000\004\016\u0150\001\002\000\004\075\u0143" +
    "\001\002\000\006\017\u0152\020\u0145\001\002\000\004\064" +
    "\u0153\001\002\000\012\063\uff71\116\uff71\117\uff71\120\uff71" +
    "\001\002\000\004\016\u0162\001\002\000\004\016\u015e\001" +
    "\002\000\004\063\uff73\001\002\000\004\016\u0158\001\002" +
    "\000\032\016\070\033\075\045\071\046\067\056\077\057" +
    "\076\072\072\076\073\077\102\101\100\114\074\115\101" +
    "\001\002\000\004\017\u015a\001\002\000\004\040\u015b\001" +
    "\002\000\032\016\070\033\075\045\071\046\067\056\077" +
    "\057\076\072\072\076\073\077\102\101\100\114\074\115" +
    "\101\001\002\000\004\064\u015d\001\002\000\004\063\uff6d" +
    "\001\002\000\032\016\070\033\075\045\071\046\067\056" +
    "\077\057\076\072\072\076\073\077\102\101\100\114\074" +
    "\115\101\001\002\000\004\017\u0160\001\002\000\004\064" +
    "\u0161\001\002\000\004\063\uff6b\001\002\000\032\016\070" +
    "\033\075\045\071\046\067\056\077\057\076\072\072\076" +
    "\073\077\102\101\100\114\074\115\101\001\002\000\004" +
    "\017\u0164\001\002\000\004\064\u0165\001\002\000\004\063" +
    "\uff6c\001\002\000\006\002\uffec\113\uffec\001\002\000\026" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\046" +
    "\ufff2\063\ufff2\103\ufff2\110\ufff2\001\002\000\004\016\u0169" +
    "\001\002\000\024\010\057\011\050\012\036\013\043\014" +
    "\045\015\040\017\u016a\046\037\103\041\001\002\000\014" +
    "\004\033\005\030\006\027\054\031\062\ufff3\001\002\000" +
    "\004\046\u0175\001\002\000\006\017\u016e\020\u016d\001\002" +
    "\000\022\010\057\011\050\012\036\013\043\014\045\015" +
    "\040\046\037\103\041\001\002\000\014\004\033\005\030" +
    "\006\027\054\031\062\ufff3\001\002\000\004\062\u0170\001" +
    "\002\000\036\021\307\022\315\024\313\027\273\030\277" +
    "\031\304\046\310\052\271\055\272\073\267\104\312\110" +
    "\054\114\074\115\101\001\002\000\040\021\307\022\315" +
    "\024\313\027\273\030\277\031\304\046\310\052\271\055" +
    "\272\063\u0172\073\267\104\312\110\054\114\074\115\101" +
    "\001\002\000\026\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\046\uffb7\063\uffb7\103\uffb7\110\uffb7\001\002" +
    "\000\004\046\u0174\001\002\000\006\017\uffb5\020\uffb5\001" +
    "\002\000\006\017\uffb4\020\uffb4\001\002\000\004\062\u0177" +
    "\001\002\000\036\021\307\022\315\024\313\027\273\030" +
    "\277\031\304\046\310\052\271\055\272\073\267\104\312" +
    "\110\054\114\074\115\101\001\002\000\040\021\307\022" +
    "\315\024\313\027\273\030\277\031\304\046\310\052\271" +
    "\055\272\063\u0179\073\267\104\312\110\054\114\074\115" +
    "\101\001\002\000\026\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\046\uffb6\063\uffb6\103\uffb6\110\uffb6\001" +
    "\002\000\004\062\u017b\001\002\000\024\010\051\011\050" +
    "\012\036\013\043\014\045\015\040\046\037\103\041\110" +
    "\054\001\002\000\026\010\051\011\050\012\036\013\043" +
    "\014\045\015\040\046\037\063\u017d\103\041\110\054\001" +
    "\002\000\006\002\uffeb\113\uffeb\001\002\000\014\020\ufff7" +
    "\040\ufff7\062\ufff7\064\ufff7\112\ufff7\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\016\002\006\003\005\004\013\041\012\044" +
    "\003\052\004\001\001\000\002\001\001\000\004\044\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\015\044\003\052\014\001\001\000\004\044" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\046\007\052\010\045\031\043\040" +
    "\054\051\051\054\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\052\010\045\031\043\040" +
    "\054\051\u0166\054\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\055\001\001\000\002\001\001\000\006\024\060\050\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\062\034\063\001\001\000\004\036\245" +
    "\001\001\000\004\005\221\001\001\000\012\012\102\020" +
    "\065\033\105\045\103\001\001\000\002\001\001\000\010" +
    "\011\161\042\162\047\213\001\001\000\010\012\102\033" +
    "\211\045\103\001\001\000\010\012\102\033\210\045\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\156\001\001\000\010\012\102\033\154\045\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\102\033\143\045\103\001\001\000\010\012\102\033\142" +
    "\045\103\001\001\000\010\012\102\033\141\045\103\001" +
    "\001\000\010\012\102\033\140\045\103\001\001\000\010" +
    "\012\102\033\137\045\103\001\001\000\010\012\102\033" +
    "\136\045\103\001\001\000\002\001\001\000\010\012\102" +
    "\033\135\045\103\001\001\000\002\001\001\000\010\012" +
    "\102\033\134\045\103\001\001\000\010\012\102\033\133" +
    "\045\103\001\001\000\010\012\102\033\132\045\103\001" +
    "\001\000\010\012\102\033\131\045\103\001\001\000\010" +
    "\012\102\033\130\045\103\001\001\000\010\012\102\033" +
    "\127\045\103\001\001\000\010\012\102\033\126\045\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\102\020\146\022\147\033\105\045\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\102\020\153\033\105\045\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\161\042\162\001\001\000\002" +
    "\001\001\000\004\042\167\001\001\000\002\001\001\000" +
    "\014\012\102\020\146\022\164\033\105\045\103\001\001" +
    "\000\002\001\001\000\006\011\166\042\162\001\001\000" +
    "\004\042\167\001\001\000\002\001\001\000\006\011\171" +
    "\042\162\001\001\000\004\042\167\001\001\000\004\047" +
    "\173\001\001\000\002\001\001\000\012\012\102\020\201" +
    "\033\105\045\103\001\001\000\014\012\102\020\146\022" +
    "\176\033\105\045\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\102\020\204\033\105\045\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\102\020\146\022" +
    "\215\033\105\045\103\001\001\000\002\001\001\000\006" +
    "\011\166\042\162\001\001\000\006\011\171\042\162\001" +
    "\001\000\002\001\001\000\004\036\227\001\001\000\012" +
    "\012\102\020\223\033\105\045\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\102" +
    "\020\230\033\105\035\232\045\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\102\020\146\022\241" +
    "\033\105\035\242\045\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\251\001\001\000\004\036\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\256\001\001\000\004\005\257\001\001\000\004" +
    "\036\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\310\013\277\015\302\016\274\023\273\025\305\027" +
    "\267\030\304\031\275\037\300\046\313\053\301\001\001" +
    "\000\002\001\001\000\030\012\310\013\277\015\302\016" +
    "\274\023\273\025\305\030\322\031\275\037\300\046\313" +
    "\053\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\102\020" +
    "\u0105\033\105\045\103\001\001\000\010\036\361\042\362" +
    "\047\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\102\020\316\033\105\045\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\310\013\277\015\302" +
    "\016\274\023\273\025\305\027\321\030\304\031\275\037" +
    "\300\046\313\053\301\001\001\000\030\012\310\013\277" +
    "\015\302\016\274\023\273\025\305\030\322\031\275\037" +
    "\300\046\313\053\301\001\001\000\002\001\001\000\004" +
    "\014\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\012\310\013\277\015\302\016\274\023\273\025\305" +
    "\027\327\030\304\031\275\037\300\046\313\053\301\001" +
    "\001\000\030\012\310\013\277\015\302\016\274\023\273" +
    "\025\305\030\322\031\275\037\300\046\313\053\301\001" +
    "\001\000\002\001\001\000\012\012\102\020\332\033\105" +
    "\045\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\340\032\335\001\001\000\002\001\001\000\012" +
    "\012\102\020\352\033\105\045\103\001\001\000\002\001" +
    "\001\000\004\032\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\102\020\344\033\105\045\103\001" +
    "\001\000\002\001\001\000\032\012\310\013\277\015\302" +
    "\016\274\023\273\025\305\027\346\030\304\031\275\037" +
    "\300\046\313\053\301\001\001\000\030\012\310\013\277" +
    "\015\302\016\274\023\273\025\305\030\322\031\275\037" +
    "\300\046\313\053\301\001\001\000\002\001\001\000\032" +
    "\012\310\013\277\015\302\016\274\023\273\025\305\027" +
    "\351\030\304\031\275\037\300\046\313\053\301\001\001" +
    "\000\030\012\310\013\277\015\302\016\274\023\273\025" +
    "\305\030\322\031\275\037\300\046\313\053\301\001\001" +
    "\000\002\001\001\000\032\012\310\013\277\015\302\016" +
    "\274\023\273\025\305\027\354\030\304\031\275\037\300" +
    "\046\313\053\301\001\001\000\030\012\310\013\277\015" +
    "\302\016\274\023\273\025\305\030\322\031\275\037\300" +
    "\046\313\053\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\102\020\230\033\105" +
    "\035\232\045\103\001\001\000\002\001\001\000\004\036" +
    "\375\001\001\000\002\001\001\000\004\036\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\310\013\277\015\302\016\274\023" +
    "\273\025\305\027\u010a\030\304\031\275\037\300\046\313" +
    "\053\301\001\001\000\030\012\310\013\277\015\302\016" +
    "\274\023\273\025\305\030\322\031\275\037\300\046\313" +
    "\053\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\102\020\u010e\033\105\045\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\102\020\u0112\033\105\045\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\012\310\013\277\015\302\016" +
    "\274\023\273\025\305\027\u0115\030\304\031\275\037\300" +
    "\046\313\053\301\001\001\000\030\012\310\013\277\015" +
    "\302\016\274\023\273\025\305\030\322\031\275\037\300" +
    "\046\313\053\301\001\001\000\002\001\001\000\012\012" +
    "\102\020\u0118\033\105\045\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u011c\001" +
    "\001\000\002\001\001\000\004\036\u011e\001\001\000\002" +
    "\001\001\000\012\012\102\020\u0120\033\105\045\103\001" +
    "\001\000\002\001\001\000\012\012\102\020\u0122\033\105" +
    "\045\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\012\310\013\277\015\302\016\274\023\273\025\305" +
    "\027\u0125\030\304\031\275\037\300\046\313\053\301\001" +
    "\001\000\030\012\310\013\277\015\302\016\274\023\273" +
    "\025\305\030\322\031\275\037\300\046\313\053\301\001" +
    "\001\000\002\001\001\000\012\012\102\020\u0128\033\105" +
    "\045\103\001\001\000\002\001\001\000\012\012\102\020" +
    "\u012a\033\105\045\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\310\013\277\015\302\016\274\023" +
    "\273\025\305\027\u012d\030\304\031\275\037\300\046\313" +
    "\053\301\001\001\000\030\012\310\013\277\015\302\016" +
    "\274\023\273\025\305\030\322\031\275\037\300\046\313" +
    "\053\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\u0139\055\u013b\001\001" +
    "\000\004\043\u0155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\102\020\u0149\033\105\045\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\102\020\u014c\033" +
    "\105\045\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\102\020\u0158\033\105\045\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\102\020\u015b\033" +
    "\105\045\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\102\020\u015e\033\105\045\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\102\020\u0162\033\105\045\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u016a\017" +
    "\u016b\001\001\000\004\005\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0172\001\001\000\004\005" +
    "\u016e\001\001\000\002\001\001\000\032\012\310\013\277" +
    "\015\302\016\274\023\273\025\305\027\u0170\030\304\031" +
    "\275\037\300\046\313\053\301\001\001\000\030\012\310" +
    "\013\277\015\302\016\274\023\273\025\305\030\322\031" +
    "\275\037\300\046\313\053\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\310\013\277\015\302\016\274" +
    "\023\273\025\305\027\u0177\030\304\031\275\037\300\046" +
    "\313\053\301\001\001\000\030\012\310\013\277\015\302" +
    "\016\274\023\273\025\305\030\322\031\275\037\300\046" +
    "\313\053\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\u017b\007\052\010\045\031\043\040\054\051" +
    "\051\054\041\001\001\000\016\007\052\010\045\031\043" +
    "\040\054\051\u0166\054\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoALS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoALS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoALS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoALS$actions {



  private final SintacticoALS parser;

  /** Constructor */
  CUP$SintacticoALS$actions(SintacticoALS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action_part00000000(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoALS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoALS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoALS$parser.done_parsing();
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTRADA 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENTRADA ::= IMPORT A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENTRADA ::= A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= A ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= IMPORT I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORT ::= I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= importar id punto extension signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    //if(paradigmas.Paradigmas.interfaz!=null){
      //  paradigmas.Paradigmas.interfaz.importarArchivo(i); 
    //}

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= incluir id signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VISIBILIDAD ::= dosPuntos VISIBILIDAD 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG(":")); VISIBILIDAD.insertar(n.nodo); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VISIBILIDAD ::= protegido 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("protegido")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VISIBILIDAD ::= privado 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("privado")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= publico 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= INSTRUCCIONES GLOBAL 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= GLOBAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GLOBAL ::= PRINCIPAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBAL ::= METODO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GLOBAL ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;
   // VariableG.variableGlobal.add(n.nodo);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GLOBAL ::= DATOS 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALS ::= als id VISIBILIDAD llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ALS");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i));E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,v.nodo.texto);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALS ::= als id VISIBILIDAD hereda id llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i)); E.insertar(v.nodo);E.insertar(new NodoG("hereda")); E.insertar(new NodoG(j));
    E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,"publico");

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCION ::= CrearASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPCION ::= INSTANCIA signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCION ::= GRAFICAR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCION ::= salir signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Terminar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCION ::= continuar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Continuar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCION ::= retornar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCION ::= retornar OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(n.nodo); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINCIPAL ::= tipoVoid inicio parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("PRINCIPAL");
    RESULT = new Caracter();
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",30, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tipoString 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("cadena")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= tipoInt 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("entero")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= tipoChar 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("char")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= tipoBool 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("bool")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= tipoDouble 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("decimal")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= tipoVoid 
            {
              Caracter RESULT =null;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("vacio")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= tipoFloat 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG(i)); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= imprimir parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG IMPRIMIR = new NodoG("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoG("imprimir")); IMPRIMIR.insertar(new NodoG("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoG(")")); IMPRIMIR.insertar(new NodoG("?")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE ::= var TIPO MasVARIABLE signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//6
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo);V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE ::= var TIPO MasMATRIZ signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo); V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasVARIABLE ::= MasVARIABLE coma id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasVARIABLE ::= MasVARIABLE coma id VISIBILIDAD ASIGNAR 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MasVARIABLE ::= id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MasVARIABLE ::= id VISIBILIDAD ASIGNAR 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ VISIBILIDAD ASIGNAR 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //6
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MasMATRIZ ::= id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MasMATRIZ ::= id MATRIZ VISIBILIDAD ASIGNAR 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= id ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //2 (?)
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= id ARREGLO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //3
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i)); ASIGNACION.insertar(m.nodo);  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION ::= id ATRIBUTO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(m.nodo); ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoG("?")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MATRIZ ::= MATRIZ corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(m.nodo);MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo); MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MATRIZ ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATRIZ ::= MATRIZ corcheteA corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("["));
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));  
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNAR ::= igual OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNAR ::= igual ValorMATRIZ 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(v.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNAR ::= igual nuevo id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG(i));ASIGNAR.insertar(new NodoG("("));ASIGNAR.insertar(new NodoG(")"));
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ValorMATRIZ ::= llaveA ValorMATRIZ llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//1
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ValorMATRIZ ::= ValorMATRIZ coma ValorMATRIZ 
            {
              Caracter RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v1.nodo); ValorMATRIZ.insertar(v2.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ValorMATRIZ ::= llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//3
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(new NodoG("{"));  ValorMATRIZ.insertar(v.nodo); ValorMATRIZ.insertar(new NodoG("}")); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoG(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= TIPO id parentesisA PARAMETROS parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //9
    NodoG E = new NodoG("METODO");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(p.nodo); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    // Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= TIPO id parentesisA parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG E = new NodoG("METODO");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    //Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROS ::= PARAMETROS coma TIPO id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		  //3
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(n.nodo); PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
    //Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMETROS ::= TIPO id 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
   // Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoG("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		//8
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoG("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ELSE = new NodoG("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoG("else")); ELSE.insertar(new NodoG("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoG("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("while")); CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CICLO ::= hacer llaveA INSTRUCCION llaveC mientras parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		 //9
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("do")); CICLO.insertar(new NodoG("{")); CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}")); CICLO.insertar(new NodoG("while")); 
    CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("?"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG DEFECTO = new NodoG("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoG("default")); DEFECTO.insertar(new NodoG(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DEFECTO",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARA ::= para parentesisA VARIABLE dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //11
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("(")); PARA.insertar(a.nodo);  PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo); PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",29, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARA ::= para parentesisA id ASIGNAR dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //12
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("("));  PARA.insertar(new NodoG(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",29, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTANCIA ::= llamar datos parentesisA parentesisC 
            {
              Caracter RESULT =null;
		 //4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar"));
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTANCIA ::= llamar id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		 //4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTANCIA ::= llamar id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //5
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTANCIA ::= llamarHK id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		//4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTANCIA ::= llamarHK id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//5
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTANCIA ::= llamar AccesoASL 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    E.insertar(new NodoG("llamar")); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CrearASL ::= id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CrearASL ::= id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AccesoASL ::= id ATRIBUTOS 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AccesoASL ::= id parentesisA parentesisC ATRIBUTOS 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("("));E.insertar(new NodoG(")")); E.insertar(a.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AccesoASL ::= id parentesisA VALORES parentesisC ATRIBUTOS 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")")); E.insertar(a.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATRIBUTOS ::= ATRIBUTOS ATRIBUTO 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTOS");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATRIBUTOS ::= ATRIBUTO 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTOS");
    RESULT = new Caracter();
    E.insertar(a.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATRIBUTO ::= punto id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(i)); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATRIBUTO ::= punto id ARREGLO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("ATRIBUTO");
    E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATRIBUTO ::= punto id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("("));E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ATRIBUTO ::= punto id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARREGLO ::= ARREGLO corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARREGLO ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(new NodoG("[")); E.insertar(n.nodo); E.insertar(new NodoG("]"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OP = new NodoG("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("(")); E.insertar(a.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("+")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("*")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("/")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("++"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("--"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("verdadero","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("falso","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E xor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&|")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&&")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("!")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("^")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= menos E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"cadena"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("'","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"caracter"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"entero"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"decimal"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i,"id"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= INSTANCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= id ARREGLO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i));E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= AccesoASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // GRAFICAR ::= graphikar parentesisA id coma id parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("GRAFICAR");
    E.insertar(new NodoG("graphikar")); E.insertar(new NodoG(i)); E.insertar(new NodoG(j)); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GRAFICAR",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DATOS ::= tipoVoid datos parentesisA parentesisC llaveA SENTENCIAS llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DATOS");
    E.insertar(new NodoG("datos"));  E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DATOS",42, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIAS ::= PROCESAR DONDE 
            {
              Caracter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(p.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",43, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIAS ::= PROCESAR 
            {
              Caracter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(p.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",43, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PROCESAR ::= procesar igual llamarHK id parentesisA COLUMNA parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("PROCESAR");
    E.insertar(new NodoG("ProcesarHK")); E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PROCESAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PROCESAR ::= procesar igual llamar id parentesisA COLUMNA parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("PROCESAR");
    E.insertar(new NodoG("Procesar")); E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PROCESAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COLUMNA ::= COLUMNA coma columna parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("COLUMNA");
    E.insertar(c.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("COLUMNA",44, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COLUMNA ::= columna parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("COLUMNA");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("COLUMNA",44, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DONDE ::= donde parentesisA OP parentesisC igual OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("Donde")); E.insertar(n.nodo); E.insertar(m.nodo); E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DONDE ::= dondeCada parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("DondeCada"));E.insertar(n.nodo);E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DONDE ::= dondeTodo parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("DondeTodo")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoALS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoALS$do_action_part00000000(
                               CUP$SintacticoALS$act_num,
                               CUP$SintacticoALS$parser,
                               CUP$SintacticoALS$stack,
                               CUP$SintacticoALS$top);
    }
}

}
