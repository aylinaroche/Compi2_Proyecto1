
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Graphik;

import java_cup.runtime.*;
import java.util.ArrayList;
import Graphik.Ejecutar.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoALS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoALS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoALS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoALS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\053\004\000\002\053\003" +
    "\000\002\004\004\000\002\004\003\000\002\042\007\000" +
    "\002\042\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\002\000\002\006" +
    "\004\000\002\006\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\045\010\000" +
    "\002\045\011\000\002\030\004\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\004\000\002\031\003\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\005\000\002\041\011\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\024\007\000\002\032\006\000\002\032\006\000\002" +
    "\025\006\000\002\025\007\000\002\025\004\000\002\025" +
    "\005\000\002\051\007\000\002\051\010\000\002\051\005" +
    "\000\002\051\006\000\002\026\005\000\002\026\006\000" +
    "\002\026\006\000\002\035\006\000\002\035\005\000\002" +
    "\035\005\000\002\035\004\000\002\037\004\000\002\037" +
    "\004\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\023\005\000\002\023\003\000\002\007\013\000" +
    "\002\007\012\000\002\020\006\000\002\020\004\000\002" +
    "\014\011\000\002\014\012\000\002\015\006\000\002\016" +
    "\011\000\002\016\013\000\002\017\011\000\002\017\012" +
    "\000\002\017\011\000\002\022\007\000\002\022\006\000" +
    "\002\033\005\000\002\040\015\000\002\040\016\000\002" +
    "\013\006\000\002\013\006\000\002\013\007\000\002\013" +
    "\006\000\002\013\007\000\002\013\004\000\002\047\013" +
    "\000\002\047\012\000\002\047\011\000\002\046\004\000" +
    "\002\012\004\000\002\012\003\000\002\043\004\000\002" +
    "\043\005\000\002\043\006\000\002\043\007\000\002\050" +
    "\006\000\002\050\005\000\002\021\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\004\000\002\034\004\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\004\000\002\034\005\000\002" +
    "\034\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\004\000\002\034\003\000\002\054\011\000" +
    "\002\055\011\000\002\056\004\000\002\056\003\000\002" +
    "\027\012\000\002\027\012\000\002\060\010\000\002\060" +
    "\006\000\002\044\011\000\002\044\007\000\002\044\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\010\007\011\112\012\114\010\001\002\000" +
    "\006\002\ufffc\114\ufffc\001\002\000\006\002\ufffe\114\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\u0182\001" +
    "\002\000\004\047\026\001\002\000\004\047\022\001\002" +
    "\000\004\047\020\001\002\000\010\007\ufffa\112\ufffa\114" +
    "\ufffa\001\002\000\010\007\011\112\012\114\010\001\002" +
    "\000\006\002\uffff\114\010\001\002\000\010\007\ufffb\112" +
    "\ufffb\114\ufffb\001\002\000\006\002\ufffd\114\ufffd\001\002" +
    "\000\004\065\021\001\002\000\010\007\ufff8\112\ufff8\114" +
    "\ufff8\001\002\000\004\101\023\001\002\000\004\110\024" +
    "\001\002\000\004\065\025\001\002\000\010\007\ufff9\112" +
    "\ufff9\114\ufff9\001\002\000\016\004\034\005\031\006\027" +
    "\055\032\063\ufff3\113\030\001\002\000\010\020\ufff6\063" +
    "\ufff6\065\ufff6\001\002\000\004\047\u017e\001\002\000\010" +
    "\020\ufff5\063\ufff5\065\ufff5\001\002\000\020\004\034\005" +
    "\031\006\027\020\ufff3\055\032\063\ufff3\065\ufff3\001\002" +
    "\000\004\063\035\001\002\000\010\020\ufff4\063\ufff4\065" +
    "\ufff4\001\002\000\024\010\051\011\050\012\036\013\043" +
    "\014\045\015\040\047\037\104\041\111\054\001\002\000" +
    "\004\047\uffd8\001\002\000\004\047\uffd2\001\002\000\004" +
    "\047\uffd5\001\002\000\004\047\uffd3\001\002\000\026\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\047\uffed" +
    "\064\uffed\104\uffed\111\uffed\001\002\000\004\047\uffd7\001" +
    "\002\000\026\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\047\uffee\064\uffee\104\uffee\111\uffee\001\002\000" +
    "\004\047\uffd6\001\002\000\004\047\u016b\001\002\000\026" +
    "\010\051\011\050\012\036\013\043\014\045\015\040\047" +
    "\037\064\u0169\104\041\111\054\001\002\000\004\047\uffd9" +
    "\001\002\000\010\047\uffd4\103\255\106\254\001\002\000" +
    "\026\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\047\ufff1\064\ufff1\104\ufff1\111\ufff1\001\002\000\026\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\047\uffef" +
    "\064\uffef\104\uffef\111\uffef\001\002\000\022\010\057\011" +
    "\050\012\036\013\043\014\045\015\040\047\037\104\041" +
    "\001\002\000\026\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\047\ufff0\064\ufff0\104\ufff0\111\ufff0\001\002" +
    "\000\004\047\062\001\002\000\004\047\uffd4\001\002\000" +
    "\006\020\246\065\245\001\002\000\006\020\240\065\237" +
    "\001\002\000\022\004\034\005\031\006\027\020\ufff3\041" +
    "\067\050\063\055\032\065\ufff3\001\002\000\034\016\110" +
    "\034\077\046\072\047\103\051\235\057\101\060\111\073" +
    "\070\077\071\100\107\102\075\115\074\116\076\001\002" +
    "\000\006\020\uffcc\065\uffcc\001\002\000\022\004\034\005" +
    "\031\006\027\020\ufff3\041\067\050\227\055\032\065\ufff3" +
    "\001\002\000\016\004\034\005\031\006\027\020\ufff3\055" +
    "\032\065\ufff3\001\002\000\034\016\110\034\077\046\072" +
    "\047\103\057\101\060\111\063\102\073\070\077\071\100" +
    "\107\102\075\115\074\116\076\001\002\000\064\004\uff7f" +
    "\005\uff7f\006\uff7f\017\uff7f\020\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\051\uff7f\052\uff7f\054\uff7f\055\uff7f\061\uff7f\062" +
    "\uff7f\064\uff7f\065\uff7f\071\uff7f\072\uff7f\001\002\000\064" +
    "\004\uff7c\005\uff7c\006\uff7c\017\uff7c\020\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\051\uff7c\052\uff7c\054\uff7c\055\uff7c\061" +
    "\uff7c\062\uff7c\064\uff7c\065\uff7c\071\uff7c\072\uff7c\001\002" +
    "\000\032\016\110\034\077\046\072\047\103\057\101\060" +
    "\111\073\070\077\071\100\107\102\075\115\074\116\076" +
    "\001\002\000\016\004\uffbf\005\uffbf\006\uffbf\020\uffbf\055" +
    "\uffbf\065\uffbf\001\002\000\006\047\214\106\212\001\002" +
    "\000\064\004\uff7e\005\uff7e\006\uff7e\017\uff7e\020\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\051\uff7e\052\uff7e\054\uff7e\055" +
    "\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\071\uff7e\072\uff7e" +
    "\001\002\000\004\047\205\001\002\000\032\016\110\034" +
    "\077\046\072\047\103\057\101\060\111\073\070\077\071" +
    "\100\107\102\075\115\074\116\076\001\002\000\064\004" +
    "\uff95\005\uff95\006\uff95\017\uff95\020\uff95\033\131\034\122" +
    "\035\132\036\123\037\115\040\127\042\126\043\117\044" +
    "\125\045\121\051\uff95\052\120\054\130\055\uff95\061\133" +
    "\062\113\064\uff95\065\uff95\071\124\072\116\001\002\000" +
    "\064\004\uff87\005\uff87\006\uff87\017\uff87\020\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\051\uff87\052\uff87\054\uff87\055\uff87" +
    "\061\uff87\062\uff87\064\uff87\065\uff87\071\uff87\072\uff87\001" +
    "\002\000\034\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\063\102\073\070\077\071\100\107\102\075\115" +
    "\074\116\076\001\002\000\070\004\uff7b\005\uff7b\006\uff7b" +
    "\017\uff7b\020\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\050\157" +
    "\051\uff7b\052\uff7b\054\uff7b\055\uff7b\061\uff7b\062\uff7b\064" +
    "\uff7b\065\uff7b\071\uff7b\072\uff7b\101\154\001\002\000\064" +
    "\004\uff7a\005\uff7a\006\uff7a\017\uff7a\020\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\042\uff7a\043\uff7a" +
    "\044\uff7a\045\uff7a\051\uff7a\052\uff7a\054\uff7a\055\uff7a\061" +
    "\uff7a\062\uff7a\064\uff7a\065\uff7a\071\uff7a\072\uff7a\001\002" +
    "\000\016\004\uffbe\005\uffbe\006\uffbe\020\152\055\uffbe\065" +
    "\uffbe\001\002\000\064\004\uff78\005\uff78\006\uff78\017\uff78" +
    "\020\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\042\uff78\043\uff78\044\uff78\045\uff78\051\uff78\052\uff78" +
    "\054\uff78\055\uff78\061\uff78\062\uff78\064\uff78\065\uff78\071" +
    "\uff78\072\uff78\001\002\000\064\004\uff7d\005\uff7d\006\uff7d" +
    "\017\uff7d\020\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\051\uff7d" +
    "\052\uff7d\054\uff7d\055\uff7d\061\uff7d\062\uff7d\064\uff7d\065" +
    "\uff7d\071\uff7d\072\uff7d\001\002\000\032\016\110\034\077" +
    "\046\072\047\103\057\101\060\111\073\070\077\071\100" +
    "\107\102\075\115\074\116\076\001\002\000\064\004\uff86" +
    "\005\uff86\006\uff86\017\uff86\020\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\051\uff86\052\uff86\054\uff86\055\uff86\061\uff86\062" +
    "\uff86\064\uff86\065\uff86\071\uff86\072\uff86\001\002\000\044" +
    "\017\114\033\131\034\122\035\132\036\123\037\115\040" +
    "\127\042\126\043\117\044\125\045\121\052\120\054\130" +
    "\061\133\062\113\071\124\072\116\001\002\000\032\016" +
    "\110\034\077\046\072\047\103\057\101\060\111\073\070" +
    "\077\071\100\107\102\075\115\074\116\076\001\002\000" +
    "\064\004\uff94\005\uff94\006\uff94\017\uff94\020\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\051\uff94\052\uff94\054\uff94\055\uff94" +
    "\061\uff94\062\uff94\064\uff94\065\uff94\071\uff94\072\uff94\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\032\016\110\034\077\046\072\047\103" +
    "\057\101\060\111\073\070\077\071\100\107\102\075\115" +
    "\074\116\076\001\002\000\032\016\110\034\077\046\072" +
    "\047\103\057\101\060\111\073\070\077\071\100\107\102" +
    "\075\115\074\116\076\001\002\000\064\004\uff8e\005\uff8e" +
    "\006\uff8e\017\uff8e\020\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\051\uff8e\052\uff8e\054\uff8e\055\uff8e\061\uff8e\062\uff8e\064" +
    "\uff8e\065\uff8e\071\uff8e\072\uff8e\001\002\000\032\016\110" +
    "\034\077\046\072\047\103\057\101\060\111\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\032" +
    "\016\110\034\077\046\072\047\103\057\101\060\111\073" +
    "\070\077\071\100\107\102\075\115\074\116\076\001\002" +
    "\000\032\016\110\034\077\046\072\047\103\057\101\060" +
    "\111\073\070\077\071\100\107\102\075\115\074\116\076" +
    "\001\002\000\064\004\uff8f\005\uff8f\006\uff8f\017\uff8f\020" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\051\uff8f\052\uff8f\054" +
    "\uff8f\055\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f\071\uff8f" +
    "\072\uff8f\001\002\000\032\016\110\034\077\046\072\047" +
    "\103\057\101\060\111\073\070\077\071\100\107\102\075" +
    "\115\074\116\076\001\002\000\032\016\110\034\077\046" +
    "\072\047\103\057\101\060\111\073\070\077\071\100\107" +
    "\102\075\115\074\116\076\001\002\000\032\016\110\034" +
    "\077\046\072\047\103\057\101\060\111\073\070\077\071" +
    "\100\107\102\075\115\074\116\076\001\002\000\032\016" +
    "\110\034\077\046\072\047\103\057\101\060\111\073\070" +
    "\077\071\100\107\102\075\115\074\116\076\001\002\000" +
    "\032\016\110\034\077\046\072\047\103\057\101\060\111" +
    "\073\070\077\071\100\107\102\075\115\074\116\076\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\032\016\110\034\077\046\072\047\103" +
    "\057\101\060\111\073\070\077\071\100\107\102\075\115" +
    "\074\116\076\001\002\000\064\004\uff89\005\uff89\006\uff89" +
    "\017\uff89\020\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\042\uff89\043\uff89\044\uff89\045\uff89\051\uff89" +
    "\052\uff89\054\uff89\055\uff89\061\uff89\062\uff89\064\uff89\065" +
    "\uff89\071\uff89\072\uff89\001\002\000\064\004\uff8d\005\uff8d" +
    "\006\uff8d\017\uff8d\020\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\042\126\043\uff8d\044\uff8d\045\uff8d" +
    "\051\uff8d\052\120\054\uff8d\055\uff8d\061\133\062\uff8d\064" +
    "\uff8d\065\uff8d\071\124\072\uff8d\001\002\000\064\004\uff93" +
    "\005\uff93\006\uff93\017\uff93\020\uff93\033\uff93\034\uff93\035" +
    "\132\036\123\037\115\040\127\042\126\043\117\044\125" +
    "\045\121\051\uff93\052\120\054\130\055\uff93\061\133\062" +
    "\113\064\uff93\065\uff93\071\124\072\116\001\002\000\064" +
    "\004\uff91\005\uff91\006\uff91\017\uff91\020\uff91\033\uff91\034" +
    "\uff91\035\132\036\123\037\115\040\127\042\126\043\117" +
    "\044\125\045\121\051\uff91\052\120\054\uff91\055\uff91\061" +
    "\133\062\113\064\uff91\065\uff91\071\124\072\uff91\001\002" +
    "\000\064\004\uff8a\005\uff8a\006\uff8a\017\uff8a\020\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\042\126" +
    "\043\uff8a\044\uff8a\045\uff8a\051\uff8a\052\120\054\uff8a\055" +
    "\uff8a\061\133\062\uff8a\064\uff8a\065\uff8a\071\124\072\uff8a" +
    "\001\002\000\064\004\uff88\005\uff88\006\uff88\017\uff88\020" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\051\uff88\052\uff88\054" +
    "\uff88\055\uff88\061\uff88\062\uff88\064\uff88\065\uff88\071\uff88" +
    "\072\uff88\001\002\000\064\004\uff84\005\uff84\006\uff84\017" +
    "\uff84\020\uff84\033\uff84\034\uff84\035\132\036\123\037\115" +
    "\040\127\042\126\043\uff84\044\uff84\045\uff84\051\uff84\052" +
    "\120\054\uff84\055\uff84\061\133\062\uff84\064\uff84\065\uff84" +
    "\071\124\072\uff84\001\002\000\064\004\uff8c\005\uff8c\006" +
    "\uff8c\017\uff8c\020\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\042\126\043\uff8c\044\uff8c\045\uff8c\051" +
    "\uff8c\052\120\054\uff8c\055\uff8c\061\133\062\uff8c\064\uff8c" +
    "\065\uff8c\071\124\072\uff8c\001\002\000\064\004\uff92\005" +
    "\uff92\006\uff92\017\uff92\020\uff92\033\uff92\034\uff92\035\132" +
    "\036\123\037\115\040\127\042\126\043\117\044\125\045" +
    "\121\051\uff92\052\120\054\130\055\uff92\061\133\062\113" +
    "\064\uff92\065\uff92\071\124\072\116\001\002\000\064\004" +
    "\uff83\005\uff83\006\uff83\017\uff83\020\uff83\033\uff83\034\uff83" +
    "\035\132\036\123\037\115\040\127\042\126\043\uff83\044" +
    "\uff83\045\uff83\051\uff83\052\120\054\uff83\055\uff83\061\133" +
    "\062\uff83\064\uff83\065\uff83\071\124\072\uff83\001\002\000" +
    "\064\004\uff85\005\uff85\006\uff85\017\uff85\020\uff85\033\uff85" +
    "\034\uff85\035\132\036\123\037\115\040\127\042\126\043" +
    "\uff85\044\uff85\045\uff85\051\uff85\052\120\054\uff85\055\uff85" +
    "\061\133\062\uff85\064\uff85\065\uff85\071\124\072\uff85\001" +
    "\002\000\064\004\uff90\005\uff90\006\uff90\017\uff90\020\uff90" +
    "\033\uff90\034\uff90\035\132\036\123\037\115\040\127\042" +
    "\126\043\117\044\125\045\121\051\uff90\052\120\054\uff90" +
    "\055\uff90\061\133\062\113\064\uff90\065\uff90\071\124\072" +
    "\uff90\001\002\000\064\004\uff8b\005\uff8b\006\uff8b\017\uff8b" +
    "\020\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\042\126\043\uff8b\044\uff8b\045\uff8b\051\uff8b\052\120" +
    "\054\uff8b\055\uff8b\061\133\062\uff8b\064\uff8b\065\uff8b\071" +
    "\124\072\uff8b\001\002\000\064\004\uff81\005\uff81\006\uff81" +
    "\017\uff81\020\uff81\033\uff81\034\uff81\035\132\036\123\037" +
    "\115\040\127\042\126\043\117\044\125\045\121\051\uff81" +
    "\052\120\054\uff81\055\uff81\061\133\062\uff81\064\uff81\065" +
    "\uff81\071\124\072\uff81\001\002\000\004\063\102\001\002" +
    "\000\020\004\uffbc\005\uffbc\006\uffbc\020\uffbc\055\uffbc\064" +
    "\uffbc\065\uffbc\001\002\000\004\047\167\001\002\000\066" +
    "\004\uff9e\005\uff9e\006\uff9e\017\uff9e\020\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\051\uff9e\052\uff9e\054\uff9e\055\uff9e\061" +
    "\uff9e\062\uff9e\064\uff9e\065\uff9e\071\uff9e\072\uff9e\101\154" +
    "\001\002\000\066\004\uff9c\005\uff9c\006\uff9c\017\uff9c\020" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\051\uff9c\052\uff9c\054" +
    "\uff9c\055\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\071\uff9c" +
    "\072\uff9c\101\uff9c\001\002\000\032\016\110\034\077\046" +
    "\072\047\103\057\101\060\111\073\070\077\071\100\107" +
    "\102\075\115\074\116\076\001\002\000\066\004\uff79\005" +
    "\uff79\006\uff79\017\uff79\020\uff79\033\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\050\161\051\uff79\052\uff79\054\uff79\055\uff79\061\uff79" +
    "\062\uff79\064\uff79\065\uff79\071\uff79\072\uff79\001\002\000" +
    "\032\016\110\034\077\046\072\047\103\057\101\060\111" +
    "\073\070\077\071\100\107\102\075\115\074\116\076\001" +
    "\002\000\004\051\163\001\002\000\072\004\uff97\005\uff97" +
    "\006\uff97\017\uff97\020\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\050\uff97\051\uff97\052\uff97\054\uff97\055\uff97\061" +
    "\uff97\062\uff97\064\uff97\065\uff97\071\uff97\072\uff97\101\uff97" +
    "\001\002\000\004\051\165\001\002\000\072\004\uff96\005" +
    "\uff96\006\uff96\017\uff96\020\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\050\uff96\051\uff96\052\uff96\054\uff96\055\uff96" +
    "\061\uff96\062\uff96\064\uff96\065\uff96\071\uff96\072\uff96\101" +
    "\uff96\001\002\000\066\004\uff9d\005\uff9d\006\uff9d\017\uff9d" +
    "\020\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051\uff9d\052\uff9d" +
    "\054\uff9d\055\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\071" +
    "\uff9d\072\uff9d\101\uff9d\001\002\000\074\004\uff9b\005\uff9b" +
    "\006\uff9b\016\170\017\uff9b\020\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\050\157\051\uff9b\052\uff9b\054\uff9b\055" +
    "\uff9b\061\uff9b\062\uff9b\064\uff9b\065\uff9b\071\uff9b\072\uff9b" +
    "\101\uff9b\001\002\000\034\016\110\017\174\034\077\046" +
    "\072\047\103\057\101\060\111\073\070\077\071\100\107" +
    "\102\075\115\074\116\076\001\002\000\072\004\uff9a\005" +
    "\uff9a\006\uff9a\017\uff9a\020\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\050\161\051\uff9a\052\uff9a\054\uff9a\055\uff9a" +
    "\061\uff9a\062\uff9a\064\uff9a\065\uff9a\071\uff9a\072\uff9a\101" +
    "\uff9a\001\002\000\010\017\uffb9\020\uffb9\064\uffb9\001\002" +
    "\000\006\017\176\020\175\001\002\000\070\004\uff99\005" +
    "\uff99\006\uff99\017\uff99\020\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\051\uff99\052\uff99\054\uff99\055\uff99\061\uff99" +
    "\062\uff99\064\uff99\065\uff99\071\uff99\072\uff99\101\uff99\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\070\004\uff98\005\uff98\006\uff98\017\uff98" +
    "\020\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\051\uff98" +
    "\052\uff98\054\uff98\055\uff98\061\uff98\062\uff98\064\uff98\065" +
    "\uff98\071\uff98\072\uff98\101\uff98\001\002\000\010\017\uffba" +
    "\020\uffba\064\uffba\001\002\000\006\020\175\064\203\001" +
    "\002\000\006\020\152\064\202\001\002\000\020\004\uffbd" +
    "\005\uffbd\006\uffbd\020\uffbd\055\uffbd\064\uffbd\065\uffbd\001" +
    "\002\000\020\004\uffbb\005\uffbb\006\uffbb\020\uffbb\055\uffbb" +
    "\064\uffbb\065\uffbb\001\002\000\064\004\uff80\005\uff80\006" +
    "\uff80\017\uff80\020\uff80\033\uff80\034\uff80\035\132\036\123" +
    "\037\115\040\127\042\126\043\117\044\125\045\121\051" +
    "\uff80\052\120\054\130\055\uff80\061\133\062\113\064\uff80" +
    "\065\uff80\071\124\072\116\001\002\000\004\016\206\001" +
    "\002\000\034\016\110\017\210\034\077\046\072\047\103" +
    "\057\101\060\111\073\070\077\071\100\107\102\075\115" +
    "\074\116\076\001\002\000\006\017\211\020\175\001\002" +
    "\000\064\004\uffa4\005\uffa4\006\uffa4\017\uffa4\020\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\051\uffa4\052\uffa4\054\uffa4\055" +
    "\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\071\uffa4\072\uffa4" +
    "\001\002\000\064\004\uffa3\005\uffa3\006\uffa3\017\uffa3\020" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\051\uffa3\052\uffa3\054" +
    "\uffa3\055\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\071\uffa3" +
    "\072\uffa3\001\002\000\004\016\221\001\002\000\064\004" +
    "\uffa2\005\uffa2\006\uffa2\017\uffa2\020\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\061\uffa2" +
    "\062\uffa2\064\uffa2\065\uffa2\071\uffa2\072\uffa2\001\002\000" +
    "\006\016\215\101\154\001\002\000\034\016\110\017\217" +
    "\034\077\046\072\047\103\057\101\060\111\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\006" +
    "\017\220\020\175\001\002\000\064\004\uffa6\005\uffa6\006" +
    "\uffa6\017\uffa6\020\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\051" +
    "\uffa6\052\uffa6\054\uffa6\055\uffa6\061\uffa6\062\uffa6\064\uffa6" +
    "\065\uffa6\071\uffa6\072\uffa6\001\002\000\064\004\uffa5\005" +
    "\uffa5\006\uffa5\017\uffa5\020\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\061\uffa5\062\uffa5" +
    "\064\uffa5\065\uffa5\071\uffa5\072\uffa5\001\002\000\004\017" +
    "\222\001\002\000\064\004\uffa7\005\uffa7\006\uffa7\017\uffa7" +
    "\020\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\051\uffa7\052\uffa7" +
    "\054\uffa7\055\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7\071" +
    "\uffa7\072\uffa7\001\002\000\064\004\uff82\005\uff82\006\uff82" +
    "\017\uff82\020\uff82\033\uff82\034\uff82\035\132\036\123\037" +
    "\115\040\127\042\126\043\uff82\044\uff82\045\uff82\051\uff82" +
    "\052\120\054\uff82\055\uff82\061\133\062\uff82\064\uff82\065" +
    "\uff82\071\124\072\uff82\001\002\000\006\020\uffcb\065\uffcb" +
    "\001\002\000\006\020\uffc8\065\uffc8\001\002\000\016\004" +
    "\034\005\031\006\027\020\ufff3\055\032\065\ufff3\001\002" +
    "\000\034\016\110\034\077\046\072\047\103\051\231\057" +
    "\101\060\111\073\070\077\071\100\107\102\075\115\074" +
    "\116\076\001\002\000\004\051\232\001\002\000\022\004" +
    "\uffc1\005\uffc1\006\uffc1\020\uffc1\041\uffc1\050\uffc1\055\uffc1" +
    "\065\uffc1\001\002\000\022\004\uffc3\005\uffc3\006\uffc3\020" +
    "\uffc3\041\uffc3\050\uffc3\055\uffc3\065\uffc3\001\002\000\006" +
    "\020\uffc7\065\uffc7\001\002\000\004\051\236\001\002\000" +
    "\022\004\uffc0\005\uffc0\006\uffc0\020\uffc0\041\uffc0\050\uffc0" +
    "\055\uffc0\065\uffc0\001\002\000\022\004\uffc2\005\uffc2\006" +
    "\uffc2\020\uffc2\041\uffc2\050\uffc2\055\uffc2\065\uffc2\001\002" +
    "\000\064\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\047\uffd0\053\uffd0\055\uffd0\056\uffd0\064" +
    "\uffd0\074\uffd0\104\uffd0\105\uffd0\111\uffd0\115\uffd0\116\uffd0" +
    "\001\002\000\004\047\241\001\002\000\020\004\034\005" +
    "\031\006\027\020\ufff3\041\067\055\032\065\ufff3\001\002" +
    "\000\006\020\uffce\065\uffce\001\002\000\016\004\034\005" +
    "\031\006\027\020\ufff3\055\032\065\ufff3\001\002\000\006" +
    "\020\uffcd\065\uffcd\001\002\000\064\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\021\uffcf\022\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\047\uffcf\053" +
    "\uffcf\055\uffcf\056\uffcf\064\uffcf\074\uffcf\104\uffcf\105\uffcf" +
    "\111\uffcf\115\uffcf\116\uffcf\001\002\000\004\047\247\001" +
    "\002\000\004\050\063\001\002\000\022\004\034\005\031" +
    "\006\027\020\ufff3\041\067\050\227\055\032\065\ufff3\001" +
    "\002\000\006\020\uffca\065\uffca\001\002\000\016\004\034" +
    "\005\031\006\027\020\ufff3\055\032\065\ufff3\001\002\000" +
    "\006\020\uffc9\065\uffc9\001\002\000\004\016\u013a\001\002" +
    "\000\004\016\256\001\002\000\004\017\257\001\002\000" +
    "\004\063\260\001\002\000\036\021\301\022\310\024\305" +
    "\027\265\030\267\031\276\047\302\053\263\056\264\074" +
    "\261\105\304\111\306\115\074\116\076\001\002\000\004" +
    "\016\u0134\001\002\000\040\021\301\022\310\024\305\027" +
    "\265\030\267\031\276\047\302\053\263\056\264\064\u0133" +
    "\074\261\105\304\111\306\115\074\116\076\001\002\000" +
    "\004\016\u011f\001\002\000\004\016\u011b\001\002\000\004" +
    "\016\u0115\001\002\000\044\021\uffe8\022\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\047\uffe8\053\uffe8" +
    "\056\uffe8\064\uffe8\074\uffe8\105\uffe8\111\uffe8\115\uffe8\116" +
    "\uffe8\001\002\000\004\063\u010d\001\002\000\044\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\047\uffe7\053\uffe7\056\uffe7\064\uffe7\074\uffe7\105\uffe7" +
    "\111\uffe7\115\uffe7\116\uffe7\001\002\000\044\021\uffe4\022" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\047\uffe4\053\uffe4\056\uffe4\064\uffe4\074\uffe4\105\uffe4\111" +
    "\uffe4\115\uffe4\116\uffe4\001\002\000\044\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\047" +
    "\uffe5\053\uffe5\056\uffe5\064\uffe5\074\uffe5\105\uffe5\111\uffe5" +
    "\115\uffe5\116\uffe5\001\002\000\044\021\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\047\uffe2" +
    "\053\uffe2\056\uffe2\064\uffe2\074\uffe2\105\uffe2\111\uffe2\115" +
    "\uffe2\116\uffe2\001\002\000\044\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\047\uffdf\053" +
    "\uffdf\056\uffdf\064\uffdf\074\uffdf\105\uffdf\111\uffdf\115\uffdf" +
    "\116\uffdf\001\002\000\044\021\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\047\uffe6\053\uffe6" +
    "\056\uffe6\064\uffe6\074\uffe6\105\uffe6\111\uffe6\115\uffe6\116" +
    "\uffe6\001\002\000\004\065\u010c\001\002\000\044\021\uffe9" +
    "\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\047\uffe9\053\uffe9\056\uffe9\064\uffe9\074\uffe9\105\uffe9" +
    "\111\uffe9\115\uffe9\116\uffe9\001\002\000\044\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\047\uffe3\053\uffe3\056\uffe3\064\uffe3\074\uffe3\105\uffe3\111" +
    "\uffe3\115\uffe3\116\uffe3\001\002\000\034\016\110\034\077" +
    "\046\072\047\103\057\101\060\111\065\u010a\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\012" +
    "\041\364\047\367\050\157\101\154\001\002\000\004\065" +
    "\363\001\002\000\004\065\362\001\002\000\004\016\335" +
    "\001\002\000\022\010\057\011\050\012\036\013\043\014" +
    "\045\015\040\047\325\104\041\001\002\000\044\021\uffe1" +
    "\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\047\uffe1\053\uffe1\056\uffe1\064\uffe1\074\uffe1\105\uffe1" +
    "\111\uffe1\115\uffe1\116\uffe1\001\002\000\004\016\311\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\004\017\313\001\002\000\004\063\314" +
    "\001\002\000\036\021\301\022\310\024\305\027\265\030" +
    "\267\031\276\047\302\053\263\056\264\074\261\105\304" +
    "\111\306\115\074\116\076\001\002\000\040\021\301\022" +
    "\310\024\305\027\265\030\267\031\276\047\302\053\263" +
    "\056\264\064\317\074\261\105\304\111\306\115\074\116" +
    "\076\001\002\000\044\021\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\047\uffea\053\uffea\056" +
    "\uffea\064\uffea\074\uffea\105\uffea\111\uffea\115\uffea\116\uffea" +
    "\001\002\000\046\021\uffb4\022\uffb4\023\321\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\047\uffb4\053\uffb4" +
    "\056\uffb4\064\uffb4\074\uffb4\105\uffb4\111\uffb4\115\uffb4\116" +
    "\uffb4\001\002\000\044\021\uffb3\022\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\047\uffb3\053\uffb3\056" +
    "\uffb3\064\uffb3\074\uffb3\105\uffb3\111\uffb3\115\uffb3\116\uffb3" +
    "\001\002\000\004\063\322\001\002\000\036\021\301\022" +
    "\310\024\305\027\265\030\267\031\276\047\302\053\263" +
    "\056\264\074\261\105\304\111\306\115\074\116\076\001" +
    "\002\000\040\021\301\022\310\024\305\027\265\030\267" +
    "\031\276\047\302\053\263\056\264\064\324\074\261\105" +
    "\304\111\306\115\074\116\076\001\002\000\044\021\uffb2" +
    "\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\047\uffb2\053\uffb2\056\uffb2\064\uffb2\074\uffb2\105\uffb2" +
    "\111\uffb2\115\uffb2\116\uffb2\001\002\000\004\047\uffd2\001" +
    "\002\000\004\041\327\001\002\000\004\107\330\001\002" +
    "\000\004\047\331\001\002\000\004\016\332\001\002\000" +
    "\004\017\333\001\002\000\004\065\334\001\002\000\044" +
    "\021\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\047\uffa1\053\uffa1\056\uffa1\064\uffa1\074\uffa1" +
    "\105\uffa1\111\uffa1\115\uffa1\116\uffa1\001\002\000\032\016" +
    "\110\034\077\046\072\047\103\057\101\060\111\073\070" +
    "\077\071\100\107\102\075\115\074\116\076\001\002\000" +
    "\004\017\337\001\002\000\004\063\340\001\002\000\006" +
    "\025\342\026\343\001\002\000\004\064\361\001\002\000" +
    "\032\016\110\034\077\046\072\047\103\057\101\060\111" +
    "\073\070\077\071\100\107\102\075\115\074\116\076\001" +
    "\002\000\004\055\354\001\002\000\010\025\347\026\343" +
    "\064\345\001\002\000\044\021\uffaf\022\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\047\uffaf\053\uffaf" +
    "\056\uffaf\064\uffaf\074\uffaf\105\uffaf\111\uffaf\115\uffaf\116" +
    "\uffaf\001\002\000\004\064\353\001\002\000\032\016\110" +
    "\034\077\046\072\047\103\057\101\060\111\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\004" +
    "\055\351\001\002\000\036\021\301\022\310\024\305\027" +
    "\265\030\267\031\276\047\302\053\263\056\264\074\261" +
    "\105\304\111\306\115\074\116\076\001\002\000\044\021" +
    "\301\022\310\024\305\025\uffac\026\uffac\027\265\030\267" +
    "\031\276\047\302\053\263\056\264\064\uffac\074\261\105" +
    "\304\111\306\115\074\116\076\001\002\000\044\021\uffae" +
    "\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\047\uffae\053\uffae\056\uffae\064\uffae\074\uffae\105\uffae" +
    "\111\uffae\115\uffae\116\uffae\001\002\000\036\021\301\022" +
    "\310\024\305\027\265\030\267\031\276\047\302\053\263" +
    "\056\264\074\261\105\304\111\306\115\074\116\076\001" +
    "\002\000\040\021\301\022\310\024\305\027\265\030\267" +
    "\031\276\047\302\053\263\056\264\064\uffaa\074\261\105" +
    "\304\111\306\115\074\116\076\001\002\000\004\055\357" +
    "\001\002\000\036\021\301\022\310\024\305\027\265\030" +
    "\267\031\276\047\302\053\263\056\264\074\261\105\304" +
    "\111\306\115\074\116\076\001\002\000\044\021\301\022" +
    "\310\024\305\025\uffab\026\uffab\027\265\030\267\031\276" +
    "\047\302\053\263\056\264\064\uffab\074\261\105\304\111" +
    "\306\115\074\116\076\001\002\000\044\021\uffad\022\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\047" +
    "\uffad\053\uffad\056\uffad\064\uffad\074\uffad\105\uffad\111\uffad" +
    "\115\uffad\116\uffad\001\002\000\044\021\uffdd\022\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\047\uffdd" +
    "\053\uffdd\056\uffdd\064\uffdd\074\uffdd\105\uffdd\111\uffdd\115" +
    "\uffdd\116\uffdd\001\002\000\044\021\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\047\uffe0\053" +
    "\uffe0\056\uffe0\064\uffe0\074\uffe0\105\uffe0\111\uffe0\115\uffe0" +
    "\116\uffe0\001\002\000\036\016\110\034\077\046\072\047" +
    "\103\057\101\060\111\063\102\073\070\077\071\100\107" +
    "\102\075\107\u0104\115\074\116\076\001\002\000\004\065" +
    "\u0103\001\002\000\004\041\067\001\002\000\004\041\373" +
    "\001\002\000\006\041\067\050\161\001\002\000\004\065" +
    "\372\001\002\000\044\021\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\047\uffc5\053\uffc5\056" +
    "\uffc5\064\uffc5\074\uffc5\105\uffc5\111\uffc5\115\uffc5\116\uffc5" +
    "\001\002\000\004\107\374\001\002\000\004\047\375\001" +
    "\002\000\004\016\376\001\002\000\004\017\377\001\002" +
    "\000\004\065\u0100\001\002\000\044\021\uffa0\022\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\047\uffa0" +
    "\053\uffa0\056\uffa0\064\uffa0\074\uffa0\105\uffa0\111\uffa0\115" +
    "\uffa0\116\uffa0\001\002\000\004\065\u0102\001\002\000\044" +
    "\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\047\uffc4\053\uffc4\056\uffc4\064\uffc4\074\uffc4" +
    "\105\uffc4\111\uffc4\115\uffc4\116\uffc4\001\002\000\044\021" +
    "\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\047\uffc6\053\uffc6\056\uffc6\064\uffc6\074\uffc6\105" +
    "\uffc6\111\uffc6\115\uffc6\116\uffc6\001\002\000\004\047\u0105" +
    "\001\002\000\004\016\u0106\001\002\000\004\017\u0107\001" +
    "\002\000\004\065\u0108\001\002\000\044\021\uff9f\022\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\047" +
    "\uff9f\053\uff9f\056\uff9f\064\uff9f\074\uff9f\105\uff9f\111\uff9f" +
    "\115\uff9f\116\uff9f\001\002\000\004\065\u010b\001\002\000" +
    "\044\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\047\uffdc\053\uffdc\056\uffdc\064\uffdc\074" +
    "\uffdc\105\uffdc\111\uffdc\115\uffdc\116\uffdc\001\002\000\044" +
    "\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\047\uffdb\053\uffdb\056\uffdb\064\uffdb\074\uffdb" +
    "\105\uffdb\111\uffdb\115\uffdb\116\uffdb\001\002\000\044\021" +
    "\uffde\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\047\uffde\053\uffde\056\uffde\064\uffde\074\uffde\105" +
    "\uffde\111\uffde\115\uffde\116\uffde\001\002\000\036\021\301" +
    "\022\310\024\305\027\265\030\267\031\276\047\302\053" +
    "\263\056\264\074\261\105\304\111\306\115\074\116\076" +
    "\001\002\000\040\021\301\022\310\024\305\027\265\030" +
    "\267\031\276\047\302\053\263\056\264\064\u010f\074\261" +
    "\105\304\111\306\115\074\116\076\001\002\000\004\027" +
    "\u0110\001\002\000\004\016\u0111\001\002\000\032\016\110" +
    "\034\077\046\072\047\103\057\101\060\111\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\004" +
    "\017\u0113\001\002\000\004\065\u0114\001\002\000\044\021" +
    "\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\047\uffb0\053\uffb0\056\uffb0\064\uffb0\074\uffb0\105" +
    "\uffb0\111\uffb0\115\uffb0\116\uffb0\001\002\000\032\016\110" +
    "\034\077\046\072\047\103\057\101\060\111\073\070\077" +
    "\071\100\107\102\075\115\074\116\076\001\002\000\004" +
    "\017\u0117\001\002\000\004\063\u0118\001\002\000\036\021" +
    "\301\022\310\024\305\027\265\030\267\031\276\047\302" +
    "\053\263\056\264\074\261\105\304\111\306\115\074\116" +
    "\076\001\002\000\040\021\301\022\310\024\305\027\265" +
    "\030\267\031\276\047\302\053\263\056\264\064\u011a\074" +
    "\261\105\304\111\306\115\074\116\076\001\002\000\044" +
    "\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\047\uffb1\053\uffb1\056\uffb1\064\uffb1\074\uffb1" +
    "\105\uffb1\111\uffb1\115\uffb1\116\uffb1\001\002\000\032\016" +
    "\110\034\077\046\072\047\103\057\101\060\111\073\070" +
    "\077\071\100\107\102\075\115\074\116\076\001\002\000" +
    "\004\017\u011d\001\002\000\004\065\u011e\001\002\000\044" +
    "\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\047\uffd1\053\uffd1\056\uffd1\064\uffd1\074\uffd1" +
    "\105\uffd1\111\uffd1\115\uffd1\116\uffd1\001\002\000\006\047" +
    "\u0121\111\054\001\002\000\004\055\u012b\001\002\000\004" +
    "\041\067\001\002\000\004\055\u0123\001\002\000\032\016" +
    "\110\034\077\046\072\047\103\057\101\060\111\073\070" +
    "\077\071\100\107\102\075\115\074\116\076\001\002\000" +
    "\004\055\u0125\001\002\000\032\016\110\034\077\046\072" +
    "\047\103\057\101\060\111\073\070\077\071\100\107\102" +
    "\075\115\074\116\076\001\002\000\004\017\u0127\001\002" +
    "\000\004\063\u0128\001\002\000\036\021\301\022\310\024" +
    "\305\027\265\030\267\031\276\047\302\053\263\056\264" +
    "\074\261\105\304\111\306\115\074\116\076\001\002\000" +
    "\040\021\301\022\310\024\305\027\265\030\267\031\276" +
    "\047\302\053\263\056\264\064\u012a\074\261\105\304\111" +
    "\306\115\074\116\076\001\002\000\044\021\uffa8\022\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\047" +
    "\uffa8\053\uffa8\056\uffa8\064\uffa8\074\uffa8\105\uffa8\111\uffa8" +
    "\115\uffa8\116\uffa8\001\002\000\032\016\110\034\077\046" +
    "\072\047\103\057\101\060\111\073\070\077\071\100\107" +
    "\102\075\115\074\116\076\001\002\000\004\055\u012d\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\004\017\u012f\001\002\000\004\063\u0130" +
    "\001\002\000\036\021\301\022\310\024\305\027\265\030" +
    "\267\031\276\047\302\053\263\056\264\074\261\105\304" +
    "\111\306\115\074\116\076\001\002\000\040\021\301\022" +
    "\310\024\305\027\265\030\267\031\276\047\302\053\263" +
    "\056\264\064\u0132\074\261\105\304\111\306\115\074\116" +
    "\076\001\002\000\044\021\uffa9\022\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\047\uffa9\053\uffa9\056" +
    "\uffa9\064\uffa9\074\uffa9\105\uffa9\111\uffa9\115\uffa9\116\uffa9" +
    "\001\002\000\026\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\047\uffda\064\uffda\104\uffda\111\uffda\001\002" +
    "\000\004\047\u0135\001\002\000\004\020\u0136\001\002\000" +
    "\004\047\u0137\001\002\000\004\017\u0138\001\002\000\004" +
    "\065\u0139\001\002\000\044\021\uff77\022\uff77\024\uff77\025" +
    "\uff77\026\uff77\027\uff77\030\uff77\031\uff77\047\uff77\053\uff77" +
    "\056\uff77\064\uff77\074\uff77\105\uff77\111\uff77\115\uff77\116" +
    "\uff77\001\002\000\004\017\u013b\001\002\000\004\063\u013c" +
    "\001\002\000\004\075\u013e\001\002\000\012\064\uff74\117" +
    "\u015a\120\u0157\121\u0158\001\002\000\004\041\u0141\001\002" +
    "\000\004\064\u0140\001\002\000\026\010\uff76\011\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\047\uff76\064\uff76\104\uff76" +
    "\111\uff76\001\002\000\006\115\u0143\116\u0142\001\002\000" +
    "\004\047\u0152\001\002\000\004\047\u0144\001\002\000\004" +
    "\016\u0145\001\002\000\004\076\u0146\001\002\000\004\016" +
    "\u014f\001\002\000\006\017\u0149\020\u0148\001\002\000\004" +
    "\076\u014b\001\002\000\004\065\u014a\001\002\000\012\064" +
    "\uff72\117\uff72\120\uff72\121\uff72\001\002\000\004\016\u014c" +
    "\001\002\000\032\016\110\034\077\046\072\047\103\057" +
    "\101\060\111\073\070\077\071\100\107\102\075\115\074" +
    "\116\076\001\002\000\004\017\u014e\001\002\000\006\017" +
    "\uff71\020\uff71\001\002\000\032\016\110\034\077\046\072" +
    "\047\103\057\101\060\111\073\070\077\071\100\107\102" +
    "\075\115\074\116\076\001\002\000\004\017\u0151\001\002" +
    "\000\006\017\uff70\020\uff70\001\002\000\004\016\u0153\001" +
    "\002\000\004\076\u0146\001\002\000\006\017\u0155\020\u0148" +
    "\001\002\000\004\065\u0156\001\002\000\012\064\uff73\117" +
    "\uff73\120\uff73\121\uff73\001\002\000\004\016\u0165\001\002" +
    "\000\004\016\u0161\001\002\000\004\064\uff75\001\002\000" +
    "\004\016\u015b\001\002\000\032\016\110\034\077\046\072" +
    "\047\103\057\101\060\111\073\070\077\071\100\107\102" +
    "\075\115\074\116\076\001\002\000\004\017\u015d\001\002" +
    "\000\004\041\u015e\001\002\000\032\016\110\034\077\046" +
    "\072\047\103\057\101\060\111\073\070\077\071\100\107" +
    "\102\075\115\074\116\076\001\002\000\004\065\u0160\001" +
    "\002\000\004\064\uff6f\001\002\000\032\016\110\034\077" +
    "\046\072\047\103\057\101\060\111\073\070\077\071\100" +
    "\107\102\075\115\074\116\076\001\002\000\004\017\u0163" +
    "\001\002\000\004\065\u0164\001\002\000\004\064\uff6d\001" +
    "\002\000\032\016\110\034\077\046\072\047\103\057\101" +
    "\060\111\073\070\077\071\100\107\102\075\115\074\116" +
    "\076\001\002\000\004\017\u0167\001\002\000\004\065\u0168" +
    "\001\002\000\004\064\uff6e\001\002\000\006\002\uffec\114" +
    "\uffec\001\002\000\026\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\047\ufff2\064\ufff2\104\ufff2\111\ufff2\001" +
    "\002\000\004\016\u016c\001\002\000\024\010\057\011\050" +
    "\012\036\013\043\014\045\015\040\017\u016d\047\037\104" +
    "\041\001\002\000\014\004\034\005\031\006\027\055\032" +
    "\063\ufff3\001\002\000\004\047\u0178\001\002\000\006\017" +
    "\u0171\020\u0170\001\002\000\022\010\057\011\050\012\036" +
    "\013\043\014\045\015\040\047\037\104\041\001\002\000" +
    "\014\004\034\005\031\006\027\055\032\063\ufff3\001\002" +
    "\000\004\063\u0173\001\002\000\036\021\301\022\310\024" +
    "\305\027\265\030\267\031\276\047\302\053\263\056\264" +
    "\074\261\105\304\111\306\115\074\116\076\001\002\000" +
    "\040\021\301\022\310\024\305\027\265\030\267\031\276" +
    "\047\302\053\263\056\264\064\u0175\074\261\105\304\111" +
    "\306\115\074\116\076\001\002\000\026\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\047\uffb8\064\uffb8\104" +
    "\uffb8\111\uffb8\001\002\000\004\047\u0177\001\002\000\006" +
    "\017\uffb6\020\uffb6\001\002\000\006\017\uffb5\020\uffb5\001" +
    "\002\000\004\063\u017a\001\002\000\036\021\301\022\310" +
    "\024\305\027\265\030\267\031\276\047\302\053\263\056" +
    "\264\074\261\105\304\111\306\115\074\116\076\001\002" +
    "\000\040\021\301\022\310\024\305\027\265\030\267\031" +
    "\276\047\302\053\263\056\264\064\u017c\074\261\105\304" +
    "\111\306\115\074\116\076\001\002\000\026\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\047\uffb7\064\uffb7" +
    "\104\uffb7\111\uffb7\001\002\000\010\020\ufff7\063\ufff7\065" +
    "\ufff7\001\002\000\004\063\u017f\001\002\000\024\010\051" +
    "\011\050\012\036\013\043\014\045\015\040\047\037\104" +
    "\041\111\054\001\002\000\026\010\051\011\050\012\036" +
    "\013\043\014\045\015\040\047\037\064\u0181\104\041\111" +
    "\054\001\002\000\006\002\uffeb\114\uffeb\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\016\002\006\003\005\004\013\042\012\045" +
    "\003\053\004\001\001\000\002\001\001\000\004\045\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\015\045\003\053\014\001\001\000\004\045" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u017c\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\046\007\052\010\045\032\043\041" +
    "\054\052\051\055\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\052\010\045\032\043\041" +
    "\054\052\u0169\055\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\055\001\001\000\002\001\001\000\006\025\060\051\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\063\035\064\037\065\001\001\000\012" +
    "\013\103\021\233\034\077\046\105\001\001\000\002\001" +
    "\001\000\006\005\224\037\225\001\001\000\004\005\223" +
    "\001\001\000\014\013\103\021\072\034\077\036\104\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\103\034\222\046\105\001\001\000\002\001\001\000" +
    "\004\046\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\103\034\203\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\103\021\171\023\177" +
    "\034\077\036\200\046\105\001\001\000\010\012\154\043" +
    "\155\050\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\103\034" +
    "\111\046\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\103\034\150\046\105\001\001\000\002\001" +
    "\001\000\010\013\103\034\147\046\105\001\001\000\010" +
    "\013\103\034\146\046\105\001\001\000\010\013\103\034" +
    "\145\046\105\001\001\000\002\001\001\000\010\013\103" +
    "\034\144\046\105\001\001\000\010\013\103\034\143\046" +
    "\105\001\001\000\010\013\103\034\142\046\105\001\001" +
    "\000\002\001\001\000\010\013\103\034\141\046\105\001" +
    "\001\000\010\013\103\034\140\046\105\001\001\000\010" +
    "\013\103\034\137\046\105\001\001\000\010\013\103\034" +
    "\136\046\105\001\001\000\010\013\103\034\135\046\105" +
    "\001\001\000\010\013\103\034\134\046\105\001\001\000" +
    "\010\013\103\034\133\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\165\001\001\000\002\001\001\000\012" +
    "\013\103\021\163\034\077\046\105\001\001\000\002\001" +
    "\001\000\012\013\103\021\161\034\077\046\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\170\001\001" +
    "\000\014\013\103\021\171\023\172\034\077\046\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\103\021\176\034\077\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\103" +
    "\021\171\023\206\034\077\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\154\043\155\001\001\000" +
    "\014\013\103\021\171\023\215\034\077\046\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\232\001\001\000" +
    "\012\013\103\021\227\034\077\046\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\241\037" +
    "\242\001\001\000\002\001\001\000\004\005\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\247\001\001\000\006\005\250\037\251\001\001" +
    "\000\002\001\001\000\004\005\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\302\014\271\016\274\017" +
    "\267\024\265\026\277\030\261\031\276\032\270\040\272" +
    "\047\306\054\273\001\001\000\002\001\001\000\030\013" +
    "\302\014\271\016\274\017\267\024\265\026\277\031\315" +
    "\032\270\040\272\047\306\054\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\103\021\u0108\034\077\046\105\001\001" +
    "\000\010\037\364\043\365\050\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\103\021\311\034\077\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\302\014\271\016\274\017" +
    "\267\024\265\026\277\030\314\031\276\032\270\040\272" +
    "\047\306\054\273\001\001\000\030\013\302\014\271\016" +
    "\274\017\267\024\265\026\277\031\315\032\270\040\272" +
    "\047\306\054\273\001\001\000\002\001\001\000\004\015" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\013\302\014\271\016\274\017\267\024\265\026\277\030" +
    "\322\031\276\032\270\040\272\047\306\054\273\001\001" +
    "\000\030\013\302\014\271\016\274\017\267\024\265\026" +
    "\277\031\315\032\270\040\272\047\306\054\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\103\021\335\034\077\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\343\033\340\001\001\000" +
    "\002\001\001\000\012\013\103\021\355\034\077\046\105" +
    "\001\001\000\002\001\001\000\004\033\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\103\021\347" +
    "\034\077\046\105\001\001\000\002\001\001\000\032\013" +
    "\302\014\271\016\274\017\267\024\265\026\277\030\351" +
    "\031\276\032\270\040\272\047\306\054\273\001\001\000" +
    "\030\013\302\014\271\016\274\017\267\024\265\026\277" +
    "\031\315\032\270\040\272\047\306\054\273\001\001\000" +
    "\002\001\001\000\032\013\302\014\271\016\274\017\267" +
    "\024\265\026\277\030\354\031\276\032\270\040\272\047" +
    "\306\054\273\001\001\000\030\013\302\014\271\016\274" +
    "\017\267\024\265\026\277\031\315\032\270\040\272\047" +
    "\306\054\273\001\001\000\002\001\001\000\032\013\302" +
    "\014\271\016\274\017\267\024\265\026\277\030\357\031" +
    "\276\032\270\040\272\047\306\054\273\001\001\000\030" +
    "\013\302\014\271\016\274\017\267\024\265\026\277\031" +
    "\315\032\270\040\272\047\306\054\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\103\021\072\034\077\036\104\046\105\001\001\000\002" +
    "\001\001\000\004\037\u0100\001\001\000\002\001\001\000" +
    "\004\037\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\013\302\014\271" +
    "\016\274\017\267\024\265\026\277\030\u010d\031\276\032" +
    "\270\040\272\047\306\054\273\001\001\000\030\013\302" +
    "\014\271\016\274\017\267\024\265\026\277\031\315\032" +
    "\270\040\272\047\306\054\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\103\021\u0111\034\077\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\103\021\u0115\034\077\046\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\302" +
    "\014\271\016\274\017\267\024\265\026\277\030\u0118\031" +
    "\276\032\270\040\272\047\306\054\273\001\001\000\030" +
    "\013\302\014\271\016\274\017\267\024\265\026\277\031" +
    "\315\032\270\040\272\047\306\054\273\001\001\000\002" +
    "\001\001\000\012\013\103\021\u011b\034\077\046\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u011f\001\001\000\002\001\001\000\004\037" +
    "\u0121\001\001\000\002\001\001\000\012\013\103\021\u0123" +
    "\034\077\046\105\001\001\000\002\001\001\000\012\013" +
    "\103\021\u0125\034\077\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\302\014\271\016\274\017" +
    "\267\024\265\026\277\030\u0128\031\276\032\270\040\272" +
    "\047\306\054\273\001\001\000\030\013\302\014\271\016" +
    "\274\017\267\024\265\026\277\031\315\032\270\040\272" +
    "\047\306\054\273\001\001\000\002\001\001\000\012\013" +
    "\103\021\u012b\034\077\046\105\001\001\000\002\001\001" +
    "\000\012\013\103\021\u012d\034\077\046\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\013\302\014\271" +
    "\016\274\017\267\024\265\026\277\030\u0130\031\276\032" +
    "\270\040\272\047\306\054\273\001\001\000\030\013\302" +
    "\014\271\016\274\017\267\024\265\026\277\031\315\032" +
    "\270\040\272\047\306\054\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u013c\056\u013e\001\001\000\004\044\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\103\021\u014c\034\077\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\103\021\u014f\034\077\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\103\021\u015b\034\077\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\103\021\u015e\034\077\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\103\021\u0161\034\077" +
    "\046\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\103\021\u0165\034\077\046\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u016d\020\u016e\001\001\000\004\005\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u0175" +
    "\001\001\000\004\005\u0171\001\001\000\002\001\001\000" +
    "\032\013\302\014\271\016\274\017\267\024\265\026\277" +
    "\030\u0173\031\276\032\270\040\272\047\306\054\273\001" +
    "\001\000\030\013\302\014\271\016\274\017\267\024\265" +
    "\026\277\031\315\032\270\040\272\047\306\054\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\013\302\014" +
    "\271\016\274\017\267\024\265\026\277\030\u017a\031\276" +
    "\032\270\040\272\047\306\054\273\001\001\000\030\013" +
    "\302\014\271\016\274\017\267\024\265\026\277\031\315" +
    "\032\270\040\272\047\306\054\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\u017f" +
    "\007\052\010\045\032\043\041\054\052\051\055\041\001" +
    "\001\000\016\007\052\010\045\032\043\041\054\052\u0169" +
    "\055\041\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoALS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoALS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoALS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoALS$actions {



  private final SintacticoALS parser;

  /** Constructor */
  CUP$SintacticoALS$actions(SintacticoALS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action_part00000000(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoALS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoALS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoALS$parser.done_parsing();
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTRADA 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENTRADA ::= IMPORT A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENTRADA ::= A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= A ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("A",41, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= IMPORT I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORT ::= I 
            {
              Caracter RESULT =null;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= importar id punto extension signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    //if(paradigmas.Paradigmas.interfaz!=null){
      //  paradigmas.Paradigmas.interfaz.importarArchivo(i); 
    //}

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= incluir id signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("I",32, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VISIBILIDAD ::= dosPuntos VISIBILIDAD 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG(":")); VISIBILIDAD.insertar(n.nodo); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VISIBILIDAD ::= protegido 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("protegido")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VISIBILIDAD ::= privado 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("privado")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= publico 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= INSTRUCCIONES GLOBAL 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= GLOBAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCIONES");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GLOBAL ::= PRINCIPAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBAL ::= METODO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GLOBAL ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;
   // VariableG.variableGlobal.add(n.nodo);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GLOBAL ::= DATOS 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GLOBAL",40, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALS ::= als id VISIBILIDAD llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ALS");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i));E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,v.nodo.texto);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALS ::= als id hereda id llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i)); E.insertar(new NodoG("hereda")); E.insertar(new NodoG(j));
    E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    ALS.agregarALS(i,n.nodo,"publico");

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ALS",35, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCION ::= CrearASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPCION ::= INSTANCIA signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCION ::= GRAFICAR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCION ::= salir signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Terminar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCION ::= continuar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Continuar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCION ::= retornar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCION ::= retornar OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(n.nodo); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OPCION",23, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINCIPAL ::= tipoVoid inicio parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("PRINCIPAL");
    RESULT = new Caracter();
    E.insertar(n.nodo);
    RESULT.nodo = E;
   // ArrayList parametros = new ArrayList();
    //Metodo_FuncionG.agregarMF("inicio","vacio",n.nodo,parametros);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",31, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tipoString 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("cadena")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= tipoInt 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("entero")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= tipoChar 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("char")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= tipoBool 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("bool")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= tipoDouble 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("decimal")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= tipoVoid 
            {
              Caracter RESULT =null;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("vacio")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= tipoFloat 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG(i)); 
    RESULT.nodo = TIPO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= imprimir parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG IMPRIMIR = new NodoG("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoG("imprimir")); IMPRIMIR.insertar(new NodoG("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoG(")")); IMPRIMIR.insertar(new NodoG("?")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",18, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE ::= var TIPO MasVARIABLE signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//6
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo);V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE ::= var TIPO MasMATRIZ signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo); V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VARIABLE",24, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasVARIABLE ::= MasVARIABLE coma id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasVARIABLE ::= MasVARIABLE coma id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MasVARIABLE ::= id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MasVARIABLE ::= id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",19, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //6
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MasMATRIZ ::= id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MasMATRIZ ::= id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",39, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= id ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //2 (?)
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= id ARREGLO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //3
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i)); ASIGNACION.insertar(m.nodo);  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION ::= id ATRIBUTO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(m.nodo); ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoG("?")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MATRIZ ::= MATRIZ corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(m.nodo);MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo); MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MATRIZ ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATRIZ ::= MATRIZ corcheteA corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(n.nodo);MATRIZ.insertar(new NodoG("["));
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));  
    RESULT.nodo = MATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("MATRIZ",27, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNAR ::= igual OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",29, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNAR ::= igual ValorMATRIZ 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(v.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",29, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ValorMATRIZ ::= llaveA ValorMATRIZ llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//1
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ValorMATRIZ ::= ValorMATRIZ coma ValorMATRIZ 
            {
              Caracter RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter v2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v1.nodo); ValorMATRIZ.insertar(v2.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ValorMATRIZ ::= llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//3
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(new NodoG("{"));  ValorMATRIZ.insertar(v.nodo); ValorMATRIZ.insertar(new NodoG("}")); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",28, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoG(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO ::= TIPO id parentesisA PARAMETROS parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //9
    NodoG E = new NodoG("METODO");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(p.nodo); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;

   // Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= TIPO id parentesisA parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG E = new NodoG("METODO");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    //Metodo_FuncionG.agregarMF(i,t.nodo.texto,n.nodo,Metodo_FuncionG.parametros);
    //Metodo_FuncionG.parametros.clear();

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS ::= PARAMETROS coma TIPO id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		  //3
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(n.nodo); PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
    //Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROS ::= TIPO id 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 //2
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(t.nodo); PARAMETROS.insertar(new NodoG(i)); 
    RESULT.nodo = PARAMETROS;
   // Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoG("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		//8
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoG("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //4
    NodoG ELSE = new NodoG("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoG("else")); ELSE.insertar(new NodoG("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoG("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ELSE",11, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("while")); CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CICLO ::= hacer llaveA INSTRUCCION llaveC mientras parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		 //9
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("do")); CICLO.insertar(new NodoG("{")); CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}")); CICLO.insertar(new NodoG("while")); 
    CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("?"));
    RESULT.nodo = CICLO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//8
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG DEFECTO = new NodoG("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoG("default")); DEFECTO.insertar(new NodoG(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DEFECTO",25, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARA ::= para parentesisA VARIABLE dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //11
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("(")); PARA.insertar(a.nodo);  PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo); PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARA ::= para parentesisA id ASIGNAR dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		  //12
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("("));  PARA.insertar(new NodoG(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTANCIA ::= llamar datos parentesisA parentesisC 
            {
              Caracter RESULT =null;
		 //4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar"));
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTANCIA ::= llamar id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		 //4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTANCIA ::= llamar id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 //5
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTANCIA ::= llamarHK id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		//4
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTANCIA ::= llamarHK id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		//5
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTANCIA ::= llamar AccesoASL 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    E.insertar(new NodoG("llamar")); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("INSTANCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CrearASL ::= var id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CrearASL ::= id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CrearASL ::= id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("CrearASL",37, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AccesoASL ::= id ATRIBUTOS 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("AccesoASL",36, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ATRIBUTOS ::= ATRIBUTOS ATRIBUTO 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTOS");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(b.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ATRIBUTOS ::= ATRIBUTO 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTOS");
    RESULT = new Caracter();
    E.insertar(a.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATRIBUTO ::= punto id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(i)); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATRIBUTO ::= punto id ARREGLO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("ATRIBUTO");
    E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATRIBUTO ::= punto id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("("));E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATRIBUTO ::= punto id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ATRIBUTO");
    RESULT = new Caracter();
    E.insertar(new NodoG(b)); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",33, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARREGLO ::= ARREGLO corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARREGLO ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(new NodoG("[")); E.insertar(n.nodo); E.insertar(new NodoG("]"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG OP = new NodoG("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("(")); E.insertar(a.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("+")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("*")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("/")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("++"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("--"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("verdadero","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("falso","bool"));
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E xor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&|")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&&")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("!")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("^")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= menos E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"cadena"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("'","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"caracter"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"entero"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"decimal"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i,"id"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= INSTANCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= id ARREGLO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i));E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= AccesoASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // GRAFICAR ::= graphikar parentesisA id coma id parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("GRAFICAR");
    E.insertar(new NodoG("graphikar")); E.insertar(new NodoG(i)); E.insertar(new NodoG(j)); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("GRAFICAR",42, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DATOS ::= tipoVoid datos parentesisA parentesisC llaveA SENTENCIAS llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DATOS");
    E.insertar(new NodoG("datos"));  E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DATOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIAS ::= PROCESAR DONDE 
            {
              Caracter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(p.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIAS ::= PROCESAR 
            {
              Caracter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("SENTENCIAS");
    E.insertar(p.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PROCESAR ::= procesar igual llamarHK id parentesisA COLUMNA parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("PROCESAR");
    E.insertar(new NodoG("ProcesarHK")); E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PROCESAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PROCESAR ::= procesar igual llamar id parentesisA COLUMNA parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("PROCESAR");
    E.insertar(new NodoG("Procesar")); E.insertar(new NodoG(i)); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("PROCESAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COLUMNA ::= COLUMNA coma columna parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("COLUMNA");
    E.insertar(c.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("COLUMNA",46, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COLUMNA ::= columna parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("COLUMNA");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("COLUMNA",46, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DONDE ::= donde parentesisA OP parentesisC igual OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-1)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("Donde")); E.insertar(n.nodo); E.insertar(m.nodo); E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DONDE ::= dondeCada parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("DondeCada"));E.insertar(n.nodo);E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DONDE ::= dondeTodo parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-2)).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("DONDE");
    E.insertar(new NodoG("DondeTodo")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoALS$result = parser.getSymbolFactory().newSymbol("DONDE",34, ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.elementAt(CUP$SintacticoALS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoALS$stack.peek()), RESULT);
            }
          return CUP$SintacticoALS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoALS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoALS$do_action(
    int                        CUP$SintacticoALS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoALS$parser,
    java.util.Stack            CUP$SintacticoALS$stack,
    int                        CUP$SintacticoALS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoALS$do_action_part00000000(
                               CUP$SintacticoALS$act_num,
                               CUP$SintacticoALS$parser,
                               CUP$SintacticoALS$stack,
                               CUP$SintacticoALS$top);
    }
}

}
