/* The following code was generated by JFlex 1.6.1 */

package Graphik;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Aylin/Documents/NetBeansProjects/Paradigmas/src/Graphik/LexicoALS.jflex</tt>
 */
public class LexicoALS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\73\1\73\1\6\22\0\1\17\1\57\1\3"+
    "\1\11\2\0\1\62\1\4\1\60\1\61\1\51\1\50\1\64\1\52"+
    "\1\71\1\12\1\2\11\2\1\63\1\0\1\55\1\56\1\54\1\72"+
    "\1\0\1\27\1\44\1\33\1\26\1\24\1\47\1\20\1\23\1\31"+
    "\1\1\1\22\1\37\1\40\1\32\1\34\1\43\1\1\1\25\1\42"+
    "\1\45\1\35\1\36\4\1\1\65\1\10\1\66\1\53\1\46\1\0"+
    "\1\27\1\44\1\33\1\26\1\24\1\47\1\20\1\23\1\31\1\1"+
    "\1\22\1\37\1\40\1\32\1\34\1\43\1\1\1\25\1\42\1\45"+
    "\1\35\1\36\4\1\1\67\1\5\1\70\7\0\1\73\73\0\1\1"+
    "\7\0\1\1\3\0\1\1\5\0\1\1\6\0\1\1\6\0\1\1"+
    "\7\0\1\1\3\0\1\1\5\0\1\1\6\0\1\1\65\0\2\30"+
    "\115\0\1\41\u1e98\0\1\13\1\14\2\0\1\15\1\16\12\0\1\73"+
    "\1\73\u0100\0\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\2\1\6\2\1\1\6\2\1\1\5\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\1\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\0\1\31\1\0\1\32\1\33\4\5\2\0"+
    "\1\32\2\0\1\31\2\34\11\2\2\0\10\2\1\0"+
    "\1\2\1\0\1\35\1\2\1\35\6\2\1\0\2\2"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\0\1\5\1\0\2\5\11\2\2\47\3\0"+
    "\6\2\1\0\4\2\1\50\2\2\1\0\1\2\2\0"+
    "\2\2\1\0\7\2\1\0\2\2\1\5\2\0\5\2"+
    "\1\0\4\2\4\0\7\2\2\51\3\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\52\1\2\1\52\1\0\3\2"+
    "\1\53\1\2\1\54\1\2\1\0\1\2\2\55\3\2"+
    "\1\56\2\2\1\0\2\2\2\57\1\60\4\0\4\2"+
    "\1\61\2\2\1\0\3\2\2\62\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\63\1\2\1\0\1\2\1\64\1\65\1\2\1\0"+
    "\4\2\1\66\3\0\1\66\4\2\1\67\1\0\3\2"+
    "\1\70\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\2\1\0\2\2\1\0\2\2\2\71"+
    "\1\72\2\2\3\0\4\2\1\0\1\2\1\73\2\2"+
    "\1\0\1\2\1\0\1\2\2\74\1\0\1\2\1\0"+
    "\1\2\2\75\1\0\2\2\1\0\1\2\1\76\2\2"+
    "\1\0\1\77\1\100\1\2\1\77\1\100\1\101\1\0"+
    "\2\2\2\102\2\103\1\0\1\2\2\104\1\0\1\2"+
    "\2\105\1\106\1\0\1\2\1\107\1\110\1\0\1\2"+
    "\2\111\1\112\2\113\2\114\1\0\1\2\2\115\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\74"+
    "\0\u01a4\0\74\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\74\0\u0708\0\74\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74"+
    "\0\74\0\u0834\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\u0870\0\360\0\74\0\u012c\0\74\0\74"+
    "\0\u08ac\0\u08e8\0\74\0\u0924\0\u01e0\0\u0960\0\u01e0\0\u021c"+
    "\0\u099c\0\u021c\0\74\0\170\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0870\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u1248\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\74\0\170\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\170\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\74\0\170\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\74\0\u2454\0\170\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\170\0\u2580\0\170\0\u25bc\0\u25f8"+
    "\0\u2634\0\74\0\170\0\u2670\0\u26ac\0\u26e8\0\170\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\74\0\170\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\170"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\74\0\170"+
    "\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\74\0\170\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\170\0\170\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\74\0\u30fc\0\u3138\0\u3174\0\170\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\170\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714"+
    "\0\u3750\0\u378c\0\74\0\170\0\170\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20"+
    "\0\170\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\74"+
    "\0\170\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\74\0\170\0\u3cb4"+
    "\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\170\0\u3de0\0\u3e1c\0\u3e58"+
    "\0\74\0\74\0\u3e94\0\170\0\170\0\170\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\74\0\170\0\74\0\170\0\u3f84\0\u3fc0\0\74"+
    "\0\170\0\u3ffc\0\u4038\0\74\0\170\0\170\0\u4074\0\u40b0"+
    "\0\170\0\170\0\u40ec\0\u4128\0\74\0\170\0\170\0\74"+
    "\0\170\0\74\0\170\0\u4164\0\u41a0\0\74\0\170\0\u41dc"+
    "\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc"+
    "\0\u43f8\0\u4434\0\u4470\0\74\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\2\2\14\1\10\1\15\1\2"+
    "\1\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\3\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\76\0\2\3\15\0\1\3\1\0\6\3\1\0\10\3"+
    "\1\0\6\3\26\0\1\4\66\0\1\63\2\0\3\64"+
    "\1\65\70\64\4\66\1\67\67\66\5\0\1\70\66\0"+
    "\5\71\1\0\1\72\1\73\2\71\1\74\61\71\4\75"+
    "\4\76\4\75\1\77\57\75\3\100\1\101\1\100\3\101"+
    "\6\100\1\102\55\100\1\0\2\3\15\0\1\3\1\103"+
    "\1\104\2\3\1\105\2\3\1\0\10\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\2\3\1\106\2\3"+
    "\1\107\1\0\10\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\1\3\1\110\6\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\2\3\1\111"+
    "\3\3\1\0\10\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\2\3\1\112\2\3\1\113\1\0\3\3"+
    "\1\114\4\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\6\3\1\115\1\3\1\0\6\3"+
    "\56\0\1\116\5\0\1\117\34\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\1\3\1\120\5\3\1\121\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\4\3\1\122\3\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\5\3\1\123\1\0\3\3\1\124\4\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\2\3"+
    "\1\125\2\3\1\126\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\6\3\1\127"+
    "\1\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\130\1\131\7\3\1\0\6\3\50\0\1\132"+
    "\3\0\2\133\43\0\2\3\15\0\1\3\1\0\2\3"+
    "\1\134\3\3\1\133\1\135\7\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\3\3\1\136\1\3\1\137"+
    "\1\0\4\3\1\140\3\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\3\3\1\141\4\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\2\3"+
    "\1\142\3\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\5\3\1\143\1\144\1\145\5\3"+
    "\1\146\1\3\1\0\6\3\74\0\1\147\75\0\1\150"+
    "\77\0\1\151\73\0\1\152\73\0\1\153\73\0\1\154"+
    "\22\0\1\155\54\0\1\156\13\0\1\157\71\0\5\71"+
    "\1\0\1\72\1\73\64\71\7\0\1\160\64\0\5\161"+
    "\1\162\1\163\1\164\2\161\1\71\61\161\14\76\1\67"+
    "\57\76\16\101\1\65\55\101\1\0\2\3\15\0\1\3"+
    "\1\0\5\3\1\165\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\3\3\1\166\2\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\2\3\1\167\5\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\10\3\1\0"+
    "\3\3\1\170\2\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\10\3\1\0\3\3\1\171\2\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\2\3\1\172"+
    "\5\3\1\0\5\3\1\173\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\10\3\1\0\3\3\1\174\2\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\1\3"+
    "\1\175\6\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\10\3\1\176\1\177\5\3\54\0"+
    "\2\200\1\0\1\201\103\0\1\202\31\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\200\1\203\1\3\1\204\5\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\10\3\1\0\1\3\1\205\4\3\25\0\2\3"+
    "\15\0\1\3\1\0\2\3\1\206\3\3\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\207\1\210\1\3\1\0\10\3\1\211\1\212\5\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\1\3"+
    "\1\213\4\3\1\214\1\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\215\2\3\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\216\2\3\1\0\2\3\1\217\5\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\5\3\1\220\1\0"+
    "\10\3\1\0\6\3\50\0\1\221\50\0\2\3\15\0"+
    "\1\3\1\0\2\3\1\222\3\3\1\0\10\3\1\0"+
    "\6\3\63\0\1\223\66\0\1\224\42\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\6\3\1\225\1\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\1\3\1\226\6\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\227\1\230\2\3\1\231\4\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\232\2\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\10\3\1\0\2\3"+
    "\1\233\3\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\3\3\1\234\4\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\235\2\3\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\6\3\1\236\1\3\1\0\6\3\63\0\1\237"+
    "\35\0\2\3\15\0\1\3\1\0\6\3\1\0\6\3"+
    "\1\240\1\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\3\3\1\241\4\3\1\0\6\3"+
    "\34\0\1\73\63\0\5\161\1\162\1\163\1\164\2\161"+
    "\1\242\61\161\12\162\1\243\70\162\1\244\2\162\1\243"+
    "\61\162\1\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\10\3\1\0\1\3\1\245\4\3\25\0\2\3\15\0"+
    "\1\3\1\0\2\3\1\246\3\3\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\2\3\1\247"+
    "\3\3\1\0\10\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\2\3\1\250\3\3\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\3\3\1\251\4\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\252\1\253\7\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\2\3\1\254\3\3"+
    "\1\0\10\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\3\3\1\255\4\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\4\3\1\256\1\3"+
    "\1\0\10\3\1\0\6\3\57\0\1\257\77\0\1\260"+
    "\61\0\1\261\6\0\1\262\40\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\2\3\1\263\5\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\6\3"+
    "\1\264\1\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\3\3\1\265\2\3\1\0\3\3\1\266\4\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\5\3\1\267\2\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\5\3\1\270\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\2\3\1\271"+
    "\3\3\1\0\10\3\1\0\6\3\60\0\1\272\40\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\3\3\1\273"+
    "\4\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\10\3\1\0\3\3\1\274\2\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\4\3\1\275"+
    "\3\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\4\3\1\276\1\3\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\277\1\300\7\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\7\3\1\301\1\0\6\3\56\0\1\302\42\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\1\3\1\303"+
    "\6\3\1\0\6\3\50\0\1\304\103\0\1\305\40\0"+
    "\2\3\15\0\1\3\1\0\2\3\1\306\3\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\3\3\1\307\4\3\1\0\6\3\62\0"+
    "\1\310\36\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\5\3\1\311\2\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\2\3\1\312\5\3\1\0"+
    "\3\3\1\313\2\3\25\0\2\3\15\0\1\3\1\0"+
    "\5\3\1\314\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\6\3\1\315\1\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\6\3\1\316\1\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\7\3\1\317\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\10\3\1\320\1\321\5\3\53\0\1\322\45\0\2\3"+
    "\15\0\1\3\1\0\5\3\1\323\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\10\3\1\0\3\3\1\324\2\3\24\0\5\161\1\162"+
    "\1\163\1\164\1\161\1\71\1\242\61\161\11\162\1\73"+
    "\1\243\71\162\1\164\1\162\1\243\61\162\1\0\2\3"+
    "\15\0\1\3\1\0\1\3\1\325\4\3\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\4\3"+
    "\1\326\1\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\327\2\3\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\330\2\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\331\2\3\1\0\10\3"+
    "\1\0\6\3\64\0\1\332\34\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\7\3\1\333\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\2\3\1\334"+
    "\5\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\10\3\1\335\1\336\5\3\25\0\2\3"+
    "\15\0\1\3\1\0\2\3\1\337\3\3\1\0\10\3"+
    "\1\0\6\3\54\0\2\340\77\0\1\341\66\0\2\342"+
    "\67\0\1\343\47\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\340\1\344\7\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\4\3\1\345\3\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\342"+
    "\1\346\7\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\3\3\1\347\2\3\1\0\10\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\3\3"+
    "\1\350\4\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\2\3\1\351\5\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\1\3"+
    "\1\352\6\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\353\1\354\7\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\7\3\1\355"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\5\3"+
    "\1\356\1\0\10\3\1\0\6\3\60\0\1\357\40\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\3\3\1\360"+
    "\4\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\5\3\1\361\1\0\10\3\1\0\6\3\71\0\1\362"+
    "\27\0\2\3\15\0\1\3\1\0\6\3\1\0\10\3"+
    "\1\0\3\3\1\363\2\3\57\0\1\364\41\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\2\3\1\365\5\3"+
    "\1\0\6\3\53\0\1\366\45\0\2\3\15\0\1\3"+
    "\1\0\5\3\1\367\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\2\3\1\370\3\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\2\3\1\371\3\3\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\372\1\373\7\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\374\1\375\7\3\1\0\6\3\60\0\1\376\40\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\3\3\1\377"+
    "\4\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\5\3\1\u0100\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\u0101\1\u0102\7\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\5\3\1\u0103"+
    "\1\0\10\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\3\3\1\u0104\4\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\1\3"+
    "\1\u0105\6\3\1\0\6\3\53\0\1\u0106\45\0\2\3"+
    "\15\0\1\3\1\0\5\3\1\u0107\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\10\3\1\0\3\3\1\u0108\2\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\2\3\1\u0109\5\3\1\0"+
    "\3\3\1\u010a\2\3\60\0\1\u010b\67\0\2\u010c\102\0"+
    "\1\u010d\100\0\1\u010e\27\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\3\3\1\u010f\4\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\u010c\1\u0110\7\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\7\3\1\u0111\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\10\3\1\0\3\3\1\u0112"+
    "\2\3\25\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\10\3\1\0\3\3\1\u0113\2\3\25\0\2\3\15\0"+
    "\1\3\1\0\5\3\1\u0114\1\0\10\3\1\0\6\3"+
    "\56\0\1\u0115\42\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\1\3\1\u0116\6\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\1\3\1\u0117\6\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\4\3"+
    "\1\u0118\1\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\u0119\2\3\1\0\10\3"+
    "\1\0\6\3\51\0\1\u011a\47\0\2\3\15\0\1\3"+
    "\1\0\3\3\1\u011b\2\3\1\0\10\3\1\0\6\3"+
    "\57\0\1\u011c\41\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\2\3\1\u011d\5\3\1\0\6\3\52\0\1\u011e"+
    "\46\0\2\3\15\0\1\3\1\0\4\3\1\u011f\1\3"+
    "\1\0\10\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\10\3\1\u0120\1\u0121\5\3\25\0"+
    "\2\3\15\0\1\u0122\1\0\6\3\1\0\10\3\1\0"+
    "\6\3\57\0\1\u0123\41\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\2\3\1\u0124\5\3\1\0\6\3\56\0"+
    "\1\u0125\42\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\1\3\1\u0126\6\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\1\3\1\u0127\6\3\1\0"+
    "\6\3\45\0\2\u0128\52\0\2\3\15\0\1\3\1\u0128"+
    "\1\u0129\5\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\5\3\1\u012a\1\0\10\3\1\0"+
    "\6\3\63\0\1\u012b\35\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\6\3\1\u012c\1\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\3\3\1\u012d"+
    "\4\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\5\3\1\u012e\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\0\3\3\1\u012f\4\3"+
    "\1\0\6\3\51\0\1\u0130\76\0\2\u0131\71\0\1\u0132"+
    "\45\0\2\3\15\0\1\3\1\0\3\3\1\u0133\2\3"+
    "\1\0\10\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\u0131\1\u0134\7\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\5\3\1\u0135\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\2\3"+
    "\1\u0136\3\3\1\0\10\3\1\0\6\3\61\0\1\u0137"+
    "\37\0\2\3\15\0\1\3\1\0\6\3\1\0\4\3"+
    "\1\u0138\3\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\5\3\1\u0139\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\2\3\1\u013a\3\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\1\3\1\u013b\4\3\1\0\10\3\1\0\6\3\53\0"+
    "\1\u013c\45\0\2\3\15\0\1\3\1\0\5\3\1\u013d"+
    "\1\0\10\3\1\0\6\3\54\0\2\u013e\43\0\2\3"+
    "\15\0\1\3\1\0\6\3\1\u013e\1\u013f\7\3\1\0"+
    "\6\3\60\0\1\u0140\40\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\3\3\1\u0141\4\3\1\0\6\3\53\0"+
    "\1\u0142\45\0\2\3\15\0\1\3\1\0\5\3\1\u0143"+
    "\1\0\10\3\1\0\6\3\25\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\u0144\1\u0145\7\3\1\0\6\3\60\0"+
    "\1\u0146\40\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\3\3\1\u0147\4\3\1\0\6\3\53\0\1\u0148\45\0"+
    "\2\3\15\0\1\3\1\0\5\3\1\u0149\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\10\3\1\0\3\3\1\u014a\2\3\53\0\1\u014b"+
    "\45\0\2\3\15\0\1\3\1\0\5\3\1\u014c\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\3\3\1\u014d\2\3\1\0\10\3\1\0\6\3\25\0"+
    "\2\3\15\0\1\3\1\0\4\3\1\u014e\1\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\4\3\1\u014f\1\3\1\0\10\3\1\0\6\3\72\0"+
    "\1\u0150\52\0\1\u0151\73\0\1\u0152\47\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\10\3\1\0\4\3\1\u0153"+
    "\1\3\25\0\2\3\15\0\1\3\1\0\3\3\1\u0154"+
    "\2\3\1\0\10\3\1\0\6\3\25\0\2\3\15\0"+
    "\1\3\1\0\3\3\1\u0155\2\3\1\0\10\3\1\0"+
    "\6\3\25\0\2\3\15\0\1\3\1\0\3\3\1\u0156"+
    "\2\3\1\0\10\3\1\0\6\3\53\0\1\u0157\45\0"+
    "\2\3\15\0\1\3\1\0\5\3\1\u0158\1\0\10\3"+
    "\1\0\6\3\25\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\u0159\2\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\u015a\1\u015b\5\3\1\0\10\3\1\0"+
    "\6\3\65\0\2\u015c\32\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\10\3\1\u015c\1\u015d\5\3\60\0\1\u015e"+
    "\40\0\2\3\15\0\1\3\1\0\6\3\1\0\3\3"+
    "\1\u015f\4\3\1\0\6\3\51\0\1\u0160\47\0\2\3"+
    "\15\0\1\3\1\0\3\3\1\u0161\2\3\1\0\10\3"+
    "\1\0\6\3\52\0\1\u0162\46\0\2\3\15\0\1\3"+
    "\1\0\4\3\1\u0163\1\3\1\0\10\3\1\0\6\3"+
    "\51\0\1\u0164\47\0\2\3\15\0\1\3\1\0\3\3"+
    "\1\u0165\2\3\1\0\10\3\1\0\6\3\25\0\2\3"+
    "\15\0\1\3\1\0\2\3\1\u0166\3\3\1\0\10\3"+
    "\1\0\6\3\51\0\1\u0167\47\0\2\3\15\0\1\3"+
    "\1\0\3\3\1\u0168\2\3\1\0\10\3\1\0\6\3"+
    "\25\0\2\3\15\0\1\3\1\0\5\3\1\u0169\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\3\3\1\u016a\4\3\1\0\6\3\47\0"+
    "\1\u016b\51\0\2\3\15\0\1\3\1\0\1\3\1\u016c"+
    "\4\3\1\0\10\3\1\0\6\3\51\0\1\u016d\47\0"+
    "\2\3\15\0\1\3\1\0\3\3\1\u016e\2\3\1\0"+
    "\10\3\1\0\6\3\25\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\3\3\1\u016f\4\3\1\0\6\3\56\0"+
    "\1\u0170\42\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\1\3\1\u0171\6\3\1\0\6\3\60\0\1\u0172\40\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\0\3\3\1\u0173"+
    "\4\3\1\0\6\3\72\0\1\u0174\26\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\10\3\1\0\4\3\1\u0175"+
    "\1\3\45\0\2\u0176\52\0\2\3\15\0\1\3\1\u0176"+
    "\1\u0177\5\3\1\0\10\3\1\0\6\3\73\0\1\u0178"+
    "\25\0\2\3\15\0\1\3\1\0\6\3\1\0\10\3"+
    "\1\0\5\3\1\u0179\61\0\1\u017a\37\0\2\3\15\0"+
    "\1\3\1\0\6\3\1\0\4\3\1\u017b\3\3\1\0"+
    "\6\3\56\0\1\u017c\42\0\2\3\15\0\1\3\1\0"+
    "\6\3\1\0\1\3\1\u017d\6\3\1\0\6\3\57\0"+
    "\1\u017e\41\0\2\3\15\0\1\3\1\0\6\3\1\0"+
    "\2\3\1\u017f\5\3\1\0\6\3\54\0\2\u0180\43\0"+
    "\2\3\15\0\1\3\1\0\6\3\1\u0180\1\u0181\7\3"+
    "\1\0\6\3\60\0\1\u0182\40\0\2\3\15\0\1\3"+
    "\1\0\6\3\1\0\3\3\1\u0183\4\3\1\0\6\3"+
    "\56\0\1\u0184\42\0\2\3\15\0\1\3\1\0\6\3"+
    "\1\0\1\3\1\u0185\6\3\1\0\6\3\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\1\11\26\1\1\11"+
    "\1\1\1\11\4\1\2\11\1\1\10\11\2\0\1\11"+
    "\1\0\2\11\2\1\1\11\1\1\2\0\1\1\2\0"+
    "\1\1\1\11\12\1\2\0\10\1\1\0\1\1\1\0"+
    "\11\1\1\0\2\1\10\11\1\1\1\0\1\1\1\0"+
    "\13\1\1\11\1\1\3\0\6\1\1\0\7\1\1\0"+
    "\1\1\2\0\2\1\1\0\7\1\1\0\3\1\2\0"+
    "\5\1\1\0\4\1\4\0\7\1\1\11\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\11\2\1\1\0\7\1"+
    "\1\0\1\1\1\11\7\1\1\0\2\1\1\11\2\1"+
    "\4\0\7\1\1\0\3\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\4\1\1\0\4\1\1\11\3\0"+
    "\6\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\11\4\1\3\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\4\1\1\0"+
    "\2\11\4\1\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\3\1\1\0\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoALS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 280) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //return new Symbol(sym.ERROR, yycolumn, yyline,new String(yytext()));
//ejecutar.Errores.agregarError(yytext(), "Error Lexico", "No pertenece al lenguaje",0,0);
            }
          case 79: break;
          case 2: 
            { lexeme=yytext(); return new Symbol(sym.id, yycolumn, yyline,new String(yytext()));
            }
          case 80: break;
          case 3: 
            { lexeme=yytext(); return new Symbol(sym.entero, yycolumn, yyline,new String(yytext()));
            }
          case 81: break;
          case 4: 
            { /*Ignore*/
            }
          case 82: break;
          case 5: 
            { 
            }
          case 83: break;
          case 6: 
            { return new Symbol(sym.dividido, yycolumn, yyline,new String(yytext()));
            }
          case 84: break;
          case 7: 
            { return new Symbol(sym.mas, yycolumn, yyline, new String(yytext()));
            }
          case 85: break;
          case 8: 
            { return new Symbol(sym.por, yycolumn, yyline,new String(yytext()));
            }
          case 86: break;
          case 9: 
            { return new Symbol(sym.menos, yycolumn, yyline,new String(yytext()));
            }
          case 87: break;
          case 10: 
            { return new Symbol(sym.potencia, yycolumn, yyline,new String(yytext()));
            }
          case 88: break;
          case 11: 
            { return new Symbol(sym.mayor, yycolumn, yyline,new String(yytext()));
            }
          case 89: break;
          case 12: 
            { return new Symbol(sym.menor, yycolumn, yyline,new String(yytext()));
            }
          case 90: break;
          case 13: 
            { return new Symbol(sym.igual, yycolumn, yyline,new String(yytext()));
            }
          case 91: break;
          case 14: 
            { return new Symbol(sym.not, yycolumn, yyline,new String(yytext()));
            }
          case 92: break;
          case 15: 
            { return new Symbol(sym.parentesisA, yycolumn, yyline,new String(yytext()));
            }
          case 93: break;
          case 16: 
            { return new Symbol(sym.parentesisC, yycolumn, yyline,new String(yytext()));
            }
          case 94: break;
          case 17: 
            { return new Symbol(sym.dosPuntos, yycolumn, yyline,new String(yytext()));
            }
          case 95: break;
          case 18: 
            { return new Symbol(sym.coma, yycolumn, yyline,new String(yytext()));
            }
          case 96: break;
          case 19: 
            { return new Symbol(sym.corcheteA, yycolumn, yyline,new String(yytext()));
            }
          case 97: break;
          case 20: 
            { return new Symbol(sym.corcheteC, yycolumn, yyline,new String(yytext()));
            }
          case 98: break;
          case 21: 
            { return new Symbol(sym.llaveA, yycolumn, yyline,new String(yytext()));
            }
          case 99: break;
          case 22: 
            { return new Symbol(sym.llaveC, yycolumn, yyline,new String(yytext()));
            }
          case 100: break;
          case 23: 
            { return new Symbol(sym.punto, yycolumn, yyline,new String(yytext()));
            }
          case 101: break;
          case 24: 
            { return new Symbol(sym.signo, yycolumn, yyline, new String(yytext()));
            }
          case 102: break;
          case 25: 
            { lexeme=yytext(); return new Symbol(sym.cadena ,yycolumn, yyline,new String(yytext()));
            }
          case 103: break;
          case 26: 
            { lexeme=yytext(); return new Symbol(sym.caracter ,yycolumn, yyline,new String(yytext()));
            }
          case 104: break;
          case 27: 
            { return new Symbol(sym.or, yycolumn, yyline,new String(yytext()));
            }
          case 105: break;
          case 28: 
            { return new Symbol(sym.extension, yycolumn, yyline, new String(yytext()));
            }
          case 106: break;
          case 29: 
            { return new Symbol(sym.si, yycolumn, yyline,new String(yytext()));
            }
          case 107: break;
          case 30: 
            { return new Symbol(sym.aumentar, yycolumn, yyline,new String(yytext()));
            }
          case 108: break;
          case 31: 
            { return new Symbol(sym.disminuir, yycolumn, yyline,new String(yytext()));
            }
          case 109: break;
          case 32: 
            { return new Symbol(sym.mayorIgual, yycolumn, yyline,new String(yytext()));
            }
          case 110: break;
          case 33: 
            { return new Symbol(sym.menorIgual, yycolumn, yyline,new String(yytext()));
            }
          case 111: break;
          case 34: 
            { return new Symbol(sym.igualDoble, yycolumn, yyline,new String(yytext()));
            }
          case 112: break;
          case 35: 
            { return new Symbol(sym.diferente, yycolumn, yyline,new String(yytext()));
            }
          case 113: break;
          case 36: 
            { return new Symbol(sym.xor, yycolumn, yyline,new String(yytext()));
            }
          case 114: break;
          case 37: 
            { return new Symbol(sym.and, yycolumn, yyline,new String(yytext()));
            }
          case 115: break;
          case 38: 
            { lexeme=yytext(); return new Symbol(sym.decimal, yycolumn, yyline,new String(yytext()));
            }
          case 116: break;
          case 39: 
            { return new Symbol(sym.als, yycolumn, yyline, new String(yytext()));
            }
          case 117: break;
          case 40: 
            { return new Symbol(sym.var, yycolumn, yyline, new String(yytext()));
            }
          case 118: break;
          case 41: 
            { return new Symbol(sym.caso, yycolumn, yyline,new String(yytext()));
            }
          case 119: break;
          case 42: 
            { return new Symbol(sym.sino, yycolumn, yyline,new String(yytext()));
            }
          case 120: break;
          case 43: 
            { return new Symbol(sym.para, yycolumn, yyline,new String(yytext()));
            }
          case 121: break;
          case 44: 
            { return new Symbol(sym.tipoBool, yycolumn, yyline,new String(yytext()));
            }
          case 122: break;
          case 45: 
            { return new Symbol(sym.fila, yycolumn, yyline,new String(yytext()));
            }
          case 123: break;
          case 46: 
            { return new Symbol(sym.hacer, yycolumn, yyline,new String(yytext()));
            }
          case 124: break;
          case 47: 
            { return new Symbol(sym.datos, yycolumn, yyline,new String(yytext()));
            }
          case 125: break;
          case 48: 
            { return new Symbol(sym.donde, yycolumn, yyline,new String(yytext()));
            }
          case 126: break;
          case 49: 
            { return new Symbol(sym.nuevo, yycolumn, yyline, new String(yytext()));
            }
          case 127: break;
          case 50: 
            { return new Symbol(sym.tipoVoid, yycolumn, yyline, new String(yytext()));
            }
          case 128: break;
          case 51: 
            { return new Symbol(sym.falso, yycolumn, yyline,new String(yytext()));
            }
          case 129: break;
          case 52: 
            { return new Symbol(sym.hereda, yycolumn, yyline, new String(yytext()));
            }
          case 130: break;
          case 53: 
            { return new Symbol(sym.tipoInt, yycolumn, yyline,new String(yytext()));
            }
          case 131: break;
          case 54: 
            { return new Symbol(sym.inicio, yycolumn, yyline, new String(yytext()));
            }
          case 132: break;
          case 55: 
            { return new Symbol(sym.tipoString, yycolumn, yyline,new String(yytext()));
            }
          case 133: break;
          case 56: 
            { return new Symbol(sym.llamar, yycolumn, yyline, new String(yytext()));
            }
          case 134: break;
          case 57: 
            { return new Symbol(sym.tipoDouble, yycolumn, yyline,new String(yytext()));
            }
          case 135: break;
          case 58: 
            { return new Symbol(sym.defecto, yycolumn, yyline,new String(yytext()));
            }
          case 136: break;
          case 59: 
            { return new Symbol(sym.columna, yycolumn, yyline,new String(yytext()));
            }
          case 137: break;
          case 60: 
            { return new Symbol(sym.privado, yycolumn, yyline,new String(yytext()));
            }
          case 138: break;
          case 61: 
            { return new Symbol(sym.publico, yycolumn, yyline,new String(yytext()));
            }
          case 139: break;
          case 62: 
            { return new Symbol(sym.retornar, yycolumn, yyline,new String(yytext()));
            }
          case 140: break;
          case 63: 
            { return new Symbol(sym.imprimir, yycolumn, yyline,new String(yytext()));
            }
          case 141: break;
          case 64: 
            { return new Symbol(sym.importar, yycolumn, yyline,new String(yytext()));
            }
          case 142: break;
          case 65: 
            { return new Symbol(sym.tipoChar, yycolumn, yyline,new String(yytext()));
            }
          case 143: break;
          case 66: 
            { return new Symbol(sym.llamarHK, yycolumn, yyline, new String(yytext()));
            }
          case 144: break;
          case 67: 
            { return new Symbol(sym.mientras, yycolumn, yyline,new String(yytext()));
            }
          case 145: break;
          case 68: 
            { return new Symbol(sym.procesar, yycolumn, yyline,new String(yytext()));
            }
          case 146: break;
          case 69: 
            { return new Symbol(sym.salir, yycolumn, yyline,new String(yytext()));
            }
          case 147: break;
          case 70: 
            { return new Symbol(sym.tipoFloat, yycolumn, yyline, new String(yytext()));
            }
          case 148: break;
          case 71: 
            { return new Symbol(sym.dondeCada, yycolumn, yyline,new String(yytext()));
            }
          case 149: break;
          case 72: 
            { return new Symbol(sym.dondeTodo, yycolumn, yyline,new String(yytext()));
            }
          case 150: break;
          case 73: 
            { return new Symbol(sym.continuar, yycolumn, yyline,new String(yytext()));
            }
          case 151: break;
          case 74: 
            { return new Symbol(sym.verdadero, yycolumn, yyline,new String(yytext()));
            }
          case 152: break;
          case 75: 
            { return new Symbol(sym.interrumpir, yycolumn, yyline,new String(yytext()));
            }
          case 153: break;
          case 76: 
            { return new Symbol(sym.protegido, yycolumn, yyline,new String(yytext()));
            }
          case 154: break;
          case 77: 
            { return new Symbol(sym.incluir, yycolumn, yyline, new String(yytext()));
            }
          case 155: break;
          case 78: 
            { return new Symbol(sym.graphikar, yycolumn, yyline,new String(yytext()));
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
