
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Graphik;

import java_cup.runtime.*;
import java.util.ArrayList;
import Graphik.Ejecutar.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoG extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoG() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoG(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoG(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\047\004\000\002\047\003\000\002\004\010" +
    "\000\002\004\006\000\002\004\007\000\002\004\005\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\002\000\002\006\004\000\002\006" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\040\010\000\002\040\011\000\002\026\004\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\005\000\002\037\011\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\023\007\000\002\030\006\000\002\030\006\000" +
    "\002\024\006\000\002\024\007\000\002\024\004\000\002" +
    "\024\005\000\002\045\007\000\002\045\010\000\002\045" +
    "\005\000\002\045\006\000\002\025\005\000\002\025\005" +
    "\000\002\033\006\000\002\033\005\000\002\033\005\000" +
    "\002\033\004\000\002\035\004\000\002\035\004\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\022" +
    "\005\000\002\022\003\000\002\007\013\000\002\007\012" +
    "\000\002\017\006\000\002\017\004\000\002\013\011\000" +
    "\002\013\012\000\002\014\006\000\002\015\011\000\002" +
    "\015\013\000\002\016\011\000\002\016\012\000\002\016" +
    "\011\000\002\021\007\000\002\021\006\000\002\031\005" +
    "\000\002\036\015\000\002\036\016\000\002\012\006\000" +
    "\002\012\007\000\002\012\006\000\002\012\007\000\002" +
    "\042\013\000\002\042\012\000\002\041\004\000\002\041" +
    "\005\000\002\041\010\000\002\043\004\000\002\044\006" +
    "\000\002\044\005\000\002\020\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\032\005\000\002\032" +
    "\004\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\006\007\007\111\005\001\002\000\010\007" +
    "\023\111\022\113\024\001\002\000\004\050\016\001\002" +
    "\000\004\002\015\001\002\000\004\050\011\001\002\000" +
    "\004\002\000\001\002\000\004\101\012\001\002\000\004" +
    "\107\013\001\002\000\004\065\014\001\002\000\010\007" +
    "\ufffa\111\ufffa\113\ufffa\001\002\000\004\002\001\001\002" +
    "\000\004\065\017\001\002\000\010\007\ufff9\111\ufff9\113" +
    "\ufff9\001\002\000\006\002\uffff\113\024\001\002\000\006" +
    "\002\ufffd\113\ufffd\001\002\000\004\050\u013b\001\002\000" +
    "\004\050\u0137\001\002\000\004\050\025\001\002\000\016" +
    "\004\033\005\030\006\026\055\032\063\ufff4\112\027\001" +
    "\002\000\010\020\ufff7\063\ufff7\065\ufff7\001\002\000\004" +
    "\050\u0133\001\002\000\010\020\ufff6\063\ufff6\065\ufff6\001" +
    "\002\000\004\063\035\001\002\000\020\004\033\005\030" +
    "\006\026\020\ufff4\055\032\063\ufff4\065\ufff4\001\002\000" +
    "\010\020\ufff5\063\ufff5\065\ufff5\001\002\000\010\020\ufff8" +
    "\063\ufff8\065\ufff8\001\002\000\022\010\047\011\046\012" +
    "\036\013\041\014\043\015\037\104\040\110\052\001\002" +
    "\000\004\050\uffda\001\002\000\004\050\uffd7\001\002\000" +
    "\004\050\uffd5\001\002\000\004\050\uffd9\001\002\000\024" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\064" +
    "\uffef\104\uffef\110\uffef\001\002\000\004\050\uffd8\001\002" +
    "\000\024\010\047\011\046\012\036\013\041\014\043\015" +
    "\037\064\u0131\104\040\110\052\001\002\000\004\050\u011f" +
    "\001\002\000\004\050\uffdb\001\002\000\006\050\uffd6\103" +
    "\242\001\002\000\024\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\064\ufff2\104\ufff2\110\ufff2\001\002\000" +
    "\024\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\064\ufff0\104\ufff0\110\ufff0\001\002\000\020\010\054\011" +
    "\046\012\036\013\041\014\043\015\037\104\040\001\002" +
    "\000\024\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\064\ufff1\104\ufff1\110\ufff1\001\002\000\004\050\uffd6" +
    "\001\002\000\004\050\060\001\002\000\006\020\234\065" +
    "\233\001\002\000\006\020\226\065\225\001\002\000\022" +
    "\004\033\005\030\006\026\020\ufff4\042\065\051\061\055" +
    "\032\065\ufff4\001\002\000\032\016\106\034\075\050\101" +
    "\052\223\057\077\060\107\073\066\077\070\100\105\102" +
    "\073\114\072\115\074\001\002\000\006\020\uffcf\065\uffcf" +
    "\001\002\000\022\004\033\005\030\006\026\020\ufff4\042" +
    "\065\051\215\055\032\065\ufff4\001\002\000\016\004\033" +
    "\005\030\006\026\020\ufff4\055\032\065\ufff4\001\002\000" +
    "\032\016\106\034\075\050\101\057\077\060\107\063\100" +
    "\073\066\077\070\100\105\102\073\114\072\115\074\001" +
    "\002\000\066\004\uff89\005\uff89\006\uff89\017\uff89\020\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\052\uff89" +
    "\053\uff89\055\uff89\061\uff89\062\uff89\064\uff89\065\uff89\071" +
    "\uff89\072\uff89\001\002\000\066\004\uff83\005\uff83\006\uff83" +
    "\017\uff83\020\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037" +
    "\uff83\040\uff83\041\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\052\uff83\053\uff83\055\uff83\061\uff83\062\uff83\064" +
    "\uff83\065\uff83\071\uff83\072\uff83\001\002\000\066\004\uff86" +
    "\005\uff86\006\uff86\017\uff86\020\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\052\uff86\053\uff86\055\uff86\061" +
    "\uff86\062\uff86\064\uff86\065\uff86\071\uff86\072\uff86\001\002" +
    "\000\016\004\uffc3\005\uffc3\006\uffc3\020\uffc3\055\uffc3\065" +
    "\uffc3\001\002\000\004\050\205\001\002\000\066\004\uff88" +
    "\005\uff88\006\uff88\017\uff88\020\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\052\uff88\053\uff88\055\uff88\061" +
    "\uff88\062\uff88\064\uff88\065\uff88\071\uff88\072\uff88\001\002" +
    "\000\004\050\200\001\002\000\030\016\106\034\075\050" +
    "\101\057\077\060\107\073\066\077\070\100\105\102\073" +
    "\114\072\115\074\001\002\000\066\004\uff9f\005\uff9f\006" +
    "\uff9f\017\uff9f\020\uff9f\033\127\034\115\035\113\036\132" +
    "\037\116\040\125\041\112\043\130\044\114\045\124\046" +
    "\131\047\111\052\uff9f\053\120\055\uff9f\061\122\062\121" +
    "\064\uff9f\065\uff9f\071\123\072\117\001\002\000\066\004" +
    "\uff91\005\uff91\006\uff91\017\uff91\020\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\052\uff91\053\uff91\055\uff91" +
    "\061\uff91\062\uff91\064\uff91\065\uff91\071\uff91\072\uff91\001" +
    "\002\000\032\016\106\034\075\050\101\057\077\060\107" +
    "\063\100\073\066\077\070\100\105\102\073\114\072\115" +
    "\074\001\002\000\072\004\uff85\005\uff85\006\uff85\017\uff85" +
    "\020\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\051\156\052\uff85\053\uff85\055\uff85\061\uff85\062\uff85\064" +
    "\uff85\065\uff85\071\uff85\072\uff85\101\154\001\002\000\066" +
    "\004\uff84\005\uff84\006\uff84\017\uff84\020\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\052\uff84\053\uff84\055" +
    "\uff84\061\uff84\062\uff84\064\uff84\065\uff84\071\uff84\072\uff84" +
    "\001\002\000\016\004\uffc2\005\uffc2\006\uffc2\020\152\055" +
    "\uffc2\065\uffc2\001\002\000\066\004\uff82\005\uff82\006\uff82" +
    "\017\uff82\020\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\052\uff82\053\uff82\055\uff82\061\uff82\062\uff82\064" +
    "\uff82\065\151\071\uff82\072\uff82\001\002\000\066\004\uff87" +
    "\005\uff87\006\uff87\017\uff87\020\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\052\uff87\053\uff87\055\uff87\061" +
    "\uff87\062\uff87\064\uff87\065\uff87\071\uff87\072\uff87\001\002" +
    "\000\030\016\106\034\075\050\101\057\077\060\107\073" +
    "\066\077\070\100\105\102\073\114\072\115\074\001\002" +
    "\000\066\004\uff90\005\uff90\006\uff90\017\uff90\020\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\052\uff90\053" +
    "\uff90\055\uff90\061\uff90\062\uff90\064\uff90\065\uff90\071\uff90" +
    "\072\uff90\001\002\000\046\017\126\033\127\034\115\035" +
    "\113\036\132\037\116\040\125\041\112\043\130\044\114" +
    "\045\124\046\131\047\111\053\120\061\122\062\121\071" +
    "\123\072\117\001\002\000\066\004\uff8c\005\uff8c\006\uff8c" +
    "\017\uff8c\020\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\052\uff8c\053\uff8c\055\uff8c\061\uff8c\062\uff8c\064" +
    "\uff8c\065\uff8c\071\uff8c\072\uff8c\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\066\004\uff98" +
    "\005\uff98\006\uff98\017\uff98\020\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\052\uff98\053\uff98\055\uff98\061" +
    "\uff98\062\uff98\064\uff98\065\uff98\071\uff98\072\uff98\001\002" +
    "\000\030\016\106\034\075\050\101\057\077\060\107\073" +
    "\066\077\070\100\105\102\073\114\072\115\074\001\002" +
    "\000\030\016\106\034\075\050\101\057\077\060\107\073" +
    "\066\077\070\100\105\102\073\114\072\115\074\001\002" +
    "\000\066\004\uff99\005\uff99\006\uff99\017\uff99\020\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\052\uff99\053" +
    "\uff99\055\uff99\061\uff99\062\uff99\064\uff99\065\uff99\071\uff99" +
    "\072\uff99\001\002\000\030\016\106\034\075\050\101\057" +
    "\077\060\107\073\066\077\070\100\105\102\073\114\072" +
    "\115\074\001\002\000\030\016\106\034\075\050\101\057" +
    "\077\060\107\073\066\077\070\100\105\102\073\114\072" +
    "\115\074\001\002\000\066\004\uff9e\005\uff9e\006\uff9e\017" +
    "\uff9e\020\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\052\uff9e\053\uff9e\055\uff9e\061\uff9e\062\uff9e\064\uff9e" +
    "\065\uff9e\071\uff9e\072\uff9e\001\002\000\030\016\106\034" +
    "\075\050\101\057\077\060\107\073\066\077\070\100\105" +
    "\102\073\114\072\115\074\001\002\000\030\016\106\034" +
    "\075\050\101\057\077\060\107\073\066\077\070\100\105" +
    "\102\073\114\072\115\074\001\002\000\030\016\106\034" +
    "\075\050\101\057\077\060\107\073\066\077\070\100\105" +
    "\102\073\114\072\115\074\001\002\000\030\016\106\034" +
    "\075\050\101\057\077\060\107\073\066\077\070\100\105" +
    "\102\073\114\072\115\074\001\002\000\066\004\uff97\005" +
    "\uff97\006\uff97\017\uff97\020\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\043\130\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\052\uff97\053\120\055\uff97\061\122" +
    "\062\uff97\064\uff97\065\uff97\071\123\072\uff97\001\002\000" +
    "\066\004\uff8d\005\uff8d\006\uff8d\017\uff8d\020\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\132\037\116\040\125\041\112\043" +
    "\130\044\uff8d\045\uff8d\046\uff8d\047\uff8d\052\uff8d\053\120" +
    "\055\uff8d\061\122\062\uff8d\064\uff8d\065\uff8d\071\123\072" +
    "\uff8d\001\002\000\066\004\uff92\005\uff92\006\uff92\017\uff92" +
    "\020\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
    "\052\uff92\053\uff92\055\uff92\061\uff92\062\uff92\064\uff92\065" +
    "\uff92\071\uff92\072\uff92\001\002\000\066\004\uff9d\005\uff9d" +
    "\006\uff9d\017\uff9d\020\uff9d\033\uff9d\034\uff9d\035\113\036" +
    "\132\037\116\040\125\041\112\043\130\044\114\045\124" +
    "\046\131\047\111\052\uff9d\053\120\055\uff9d\061\122\062" +
    "\121\064\uff9d\065\uff9d\071\123\072\117\001\002\000\066" +
    "\004\uff95\005\uff95\006\uff95\017\uff95\020\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\043\130" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\052\uff95\053\120\055" +
    "\uff95\061\122\062\uff95\064\uff95\065\uff95\071\123\072\uff95" +
    "\001\002\000\066\004\uff8e\005\uff8e\006\uff8e\017\uff8e\020" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\132\037\116\040\125" +
    "\041\112\043\130\044\uff8e\045\uff8e\046\uff8e\047\uff8e\052" +
    "\uff8e\053\120\055\uff8e\061\122\062\uff8e\064\uff8e\065\uff8e" +
    "\071\123\072\uff8e\001\002\000\066\004\uff93\005\uff93\006" +
    "\uff93\017\uff93\020\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\052\uff93\053\uff93\055\uff93\061\uff93\062\uff93" +
    "\064\uff93\065\uff93\071\uff93\072\uff93\001\002\000\066\004" +
    "\uff8b\005\uff8b\006\uff8b\017\uff8b\020\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\132\037\116\040\125\041\112\043\130\044" +
    "\114\045\124\046\131\047\111\052\uff8b\053\120\055\uff8b" +
    "\061\122\062\uff8b\064\uff8b\065\uff8b\071\123\072\uff8b\001" +
    "\002\000\066\004\uff9a\005\uff9a\006\uff9a\017\uff9a\020\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\132\037\116\040\125\041" +
    "\112\043\130\044\114\045\124\046\131\047\111\052\uff9a" +
    "\053\120\055\uff9a\061\122\062\121\064\uff9a\065\uff9a\071" +
    "\123\072\uff9a\001\002\000\066\004\uff96\005\uff96\006\uff96" +
    "\017\uff96\020\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\043\130\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\052\uff96\053\120\055\uff96\061\122\062\uff96\064" +
    "\uff96\065\uff96\071\123\072\uff96\001\002\000\066\004\uff9c" +
    "\005\uff9c\006\uff9c\017\uff9c\020\uff9c\033\uff9c\034\uff9c\035" +
    "\113\036\132\037\116\040\125\041\112\043\130\044\114" +
    "\045\124\046\131\047\111\052\uff9c\053\120\055\uff9c\061" +
    "\122\062\121\064\uff9c\065\uff9c\071\123\072\117\001\002" +
    "\000\066\004\uff8f\005\uff8f\006\uff8f\017\uff8f\020\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\132\037\116\040\125\041\112" +
    "\043\130\044\uff8f\045\uff8f\046\uff8f\047\uff8f\052\uff8f\053" +
    "\120\055\uff8f\061\122\062\uff8f\064\uff8f\065\uff8f\071\123" +
    "\072\uff8f\001\002\000\066\004\uff9b\005\uff9b\006\uff9b\017" +
    "\uff9b\020\uff9b\033\uff9b\034\uff9b\035\uff9b\036\132\037\116" +
    "\040\125\041\112\043\130\044\114\045\124\046\131\047" +
    "\111\052\uff9b\053\120\055\uff9b\061\122\062\121\064\uff9b" +
    "\065\uff9b\071\123\072\uff9b\001\002\000\066\004\uff94\005" +
    "\uff94\006\uff94\017\uff94\020\uff94\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\043\130\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\052\uff94\053\120\055\uff94\061\122" +
    "\062\uff94\064\uff94\065\uff94\071\123\072\uff94\001\002\000" +
    "\066\004\uffa5\005\uffa5\006\uffa5\017\uffa5\020\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\052\uffa5\053\uffa5" +
    "\055\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\071\uffa5\072" +
    "\uffa5\001\002\000\004\063\100\001\002\000\020\004\uffc0" +
    "\005\uffc0\006\uffc0\020\uffc0\055\uffc0\064\uffc0\065\uffc0\001" +
    "\002\000\004\050\164\001\002\000\072\004\uffa2\005\uffa2" +
    "\006\uffa2\017\uffa2\020\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\051\161\052\uffa2\053\uffa2\055" +
    "\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\071\uffa2\072\uffa2" +
    "\001\002\000\030\016\106\034\075\050\101\057\077\060" +
    "\107\073\066\077\070\100\105\102\073\114\072\115\074" +
    "\001\002\000\004\052\160\001\002\000\072\004\uffa0\005" +
    "\uffa0\006\uffa0\017\uffa0\020\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0\071\uffa0\072" +
    "\uffa0\001\002\000\030\016\106\034\075\050\101\057\077" +
    "\060\107\073\066\077\070\100\105\102\073\114\072\115" +
    "\074\001\002\000\004\052\163\001\002\000\072\004\uffa1" +
    "\005\uffa1\006\uffa1\017\uffa1\020\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\055\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\071\uffa1" +
    "\072\uffa1\001\002\000\070\004\uffa4\005\uffa4\006\uffa4\016" +
    "\165\017\uffa4\020\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\052\uffa4\053\uffa4\055\uffa4\061\uffa4\062\uffa4" +
    "\064\uffa4\065\uffa4\071\uffa4\072\uffa4\001\002\000\030\016" +
    "\106\034\075\050\101\057\077\060\107\073\066\077\070" +
    "\100\105\102\073\114\072\115\074\001\002\000\010\017" +
    "\uffbd\020\uffbd\064\uffbd\001\002\000\006\017\171\020\170" +
    "\001\002\000\030\016\106\034\075\050\101\057\077\060" +
    "\107\073\066\077\070\100\105\102\073\114\072\115\074" +
    "\001\002\000\066\004\uffa3\005\uffa3\006\uffa3\017\uffa3\020" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\052" +
    "\uffa3\053\uffa3\055\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3" +
    "\071\uffa3\072\uffa3\001\002\000\010\017\uffbe\020\uffbe\064" +
    "\uffbe\001\002\000\006\020\170\064\176\001\002\000\006" +
    "\020\152\064\175\001\002\000\020\004\uffc1\005\uffc1\006" +
    "\uffc1\020\uffc1\055\uffc1\064\uffc1\065\uffc1\001\002\000\020" +
    "\004\uffbf\005\uffbf\006\uffbf\020\uffbf\055\uffbf\064\uffbf\065" +
    "\uffbf\001\002\000\066\004\uff8a\005\uff8a\006\uff8a\017\uff8a" +
    "\020\uff8a\033\uff8a\034\uff8a\035\113\036\132\037\116\040" +
    "\125\041\112\043\130\044\114\045\124\046\131\047\111" +
    "\052\uff8a\053\120\055\uff8a\061\122\062\121\064\uff8a\065" +
    "\uff8a\071\123\072\117\001\002\000\004\016\201\001\002" +
    "\000\032\016\106\017\203\034\075\050\101\057\077\060" +
    "\107\073\066\077\070\100\105\102\073\114\072\115\074" +
    "\001\002\000\006\017\204\020\170\001\002\000\066\004" +
    "\uffa9\005\uffa9\006\uffa9\017\uffa9\020\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\052\uffa9\053\uffa9\055\uffa9" +
    "\061\uffa9\062\uffa9\064\uffa9\065\uffa9\071\uffa9\072\uffa9\001" +
    "\002\000\066\004\uffa8\005\uffa8\006\uffa8\017\uffa8\020\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\052\uffa8" +
    "\053\uffa8\055\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\071" +
    "\uffa8\072\uffa8\001\002\000\004\016\206\001\002\000\032" +
    "\016\106\017\210\034\075\050\101\057\077\060\107\073" +
    "\066\077\070\100\105\102\073\114\072\115\074\001\002" +
    "\000\006\017\211\020\170\001\002\000\066\004\uffab\005" +
    "\uffab\006\uffab\017\uffab\020\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\052\uffab\053\uffab\055\uffab\061\uffab" +
    "\062\uffab\064\uffab\065\uffab\071\uffab\072\uffab\001\002\000" +
    "\066\004\uffaa\005\uffaa\006\uffaa\017\uffaa\020\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\052\uffaa\053\uffaa" +
    "\055\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa\071\uffaa\072" +
    "\uffaa\001\002\000\006\020\uffce\065\uffce\001\002\000\006" +
    "\020\uffcb\065\uffcb\001\002\000\016\004\033\005\030\006" +
    "\026\020\ufff4\055\032\065\ufff4\001\002\000\032\016\106" +
    "\034\075\050\101\052\217\057\077\060\107\073\066\077" +
    "\070\100\105\102\073\114\072\115\074\001\002\000\004" +
    "\052\220\001\002\000\022\004\uffc5\005\uffc5\006\uffc5\020" +
    "\uffc5\042\uffc5\051\uffc5\055\uffc5\065\uffc5\001\002\000\022" +
    "\004\uffc7\005\uffc7\006\uffc7\020\uffc7\042\uffc7\051\uffc7\055" +
    "\uffc7\065\uffc7\001\002\000\006\020\uffca\065\uffca\001\002" +
    "\000\004\052\224\001\002\000\022\004\uffc4\005\uffc4\006" +
    "\uffc4\020\uffc4\042\uffc4\051\uffc4\055\uffc4\065\uffc4\001\002" +
    "\000\022\004\uffc6\005\uffc6\006\uffc6\020\uffc6\042\uffc6\051" +
    "\uffc6\055\uffc6\065\uffc6\001\002\000\062\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\021\uffd3\022\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\050\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\064\uffd3\104\uffd3\105\uffd3\110" +
    "\uffd3\114\uffd3\115\uffd3\001\002\000\004\050\227\001\002" +
    "\000\020\004\033\005\030\006\026\020\ufff4\042\065\055" +
    "\032\065\ufff4\001\002\000\006\020\uffd1\065\uffd1\001\002" +
    "\000\016\004\033\005\030\006\026\020\ufff4\055\032\065" +
    "\ufff4\001\002\000\006\020\uffd0\065\uffd0\001\002\000\062" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\021" +
    "\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2\064\uffd2\104" +
    "\uffd2\105\uffd2\110\uffd2\114\uffd2\115\uffd2\001\002\000\004" +
    "\050\235\001\002\000\004\051\061\001\002\000\022\004" +
    "\033\005\030\006\026\020\ufff4\042\065\051\215\055\032" +
    "\065\ufff4\001\002\000\006\020\uffcd\065\uffcd\001\002\000" +
    "\016\004\033\005\030\006\026\020\ufff4\055\032\065\ufff4" +
    "\001\002\000\006\020\uffcc\065\uffcc\001\002\000\004\016" +
    "\243\001\002\000\004\017\244\001\002\000\004\063\245" +
    "\001\002\000\034\021\266\022\275\024\272\027\253\030" +
    "\257\031\263\050\267\054\247\056\252\105\271\110\273" +
    "\114\072\115\074\001\002\000\036\021\266\022\275\024" +
    "\272\027\253\030\257\031\263\050\267\054\247\056\252" +
    "\064\u011e\105\271\110\273\114\072\115\074\001\002\000" +
    "\004\016\u010a\001\002\000\004\042\065\001\002\000\042" +
    "\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\050\uffe3\054\uffe3\056\uffe3\064\uffe3\105\uffe3" +
    "\110\uffe3\114\uffe3\115\uffe3\001\002\000\004\016\u0104\001" +
    "\002\000\004\016\376\001\002\000\042\021\uffea\022\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\050" +
    "\uffea\054\uffea\056\uffea\064\uffea\105\uffea\110\uffea\114\uffea" +
    "\115\uffea\001\002\000\042\021\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\050\uffe6\054\uffe6" +
    "\056\uffe6\064\uffe6\105\uffe6\110\uffe6\114\uffe6\115\uffe6\001" +
    "\002\000\042\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\050\uffe9\054\uffe9\056\uffe9\064" +
    "\uffe9\105\uffe9\110\uffe9\114\uffe9\115\uffe9\001\002\000\004" +
    "\063\366\001\002\000\042\021\uffe7\022\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\050\uffe7\054\uffe7" +
    "\056\uffe7\064\uffe7\105\uffe7\110\uffe7\114\uffe7\115\uffe7\001" +
    "\002\000\042\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\050\uffe4\054\uffe4\056\uffe4\064" +
    "\uffe4\105\uffe4\110\uffe4\114\uffe4\115\uffe4\001\002\000\042" +
    "\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\050\uffe8\054\uffe8\056\uffe8\064\uffe8\105\uffe8" +
    "\110\uffe8\114\uffe8\115\uffe8\001\002\000\004\065\365\001" +
    "\002\000\042\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\050\uffeb\054\uffeb\056\uffeb\064" +
    "\uffeb\105\uffeb\110\uffeb\114\uffeb\115\uffeb\001\002\000\042" +
    "\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\050\uffe5\054\uffe5\056\uffe5\064\uffe5\105\uffe5" +
    "\110\uffe5\114\uffe5\115\uffe5\001\002\000\032\016\106\034" +
    "\075\050\101\057\077\060\107\065\363\073\066\077\070" +
    "\100\105\102\073\114\072\115\074\001\002\000\010\042" +
    "\065\050\352\051\156\001\002\000\004\065\350\001\002" +
    "\000\004\065\347\001\002\000\004\016\322\001\002\000" +
    "\022\010\054\011\046\012\036\013\041\014\043\015\037" +
    "\050\312\104\040\001\002\000\042\021\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\050\uffe2" +
    "\054\uffe2\056\uffe2\064\uffe2\105\uffe2\110\uffe2\114\uffe2\115" +
    "\uffe2\001\002\000\004\016\276\001\002\000\030\016\106" +
    "\034\075\050\101\057\077\060\107\073\066\077\070\100" +
    "\105\102\073\114\072\115\074\001\002\000\004\017\300" +
    "\001\002\000\004\063\301\001\002\000\034\021\266\022" +
    "\275\024\272\027\253\030\257\031\263\050\267\054\247" +
    "\056\252\105\271\110\273\114\072\115\074\001\002\000" +
    "\036\021\266\022\275\024\272\027\253\030\257\031\263" +
    "\050\267\054\247\056\252\064\304\105\271\110\273\114" +
    "\072\115\074\001\002\000\042\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\050\uffec\054" +
    "\uffec\056\uffec\064\uffec\105\uffec\110\uffec\114\uffec\115\uffec" +
    "\001\002\000\044\021\uffb8\022\uffb8\023\305\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\050\uffb8\054\uffb8" +
    "\056\uffb8\064\uffb8\105\uffb8\110\uffb8\114\uffb8\115\uffb8\001" +
    "\002\000\004\063\307\001\002\000\042\021\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\050" +
    "\uffb7\054\uffb7\056\uffb7\064\uffb7\105\uffb7\110\uffb7\114\uffb7" +
    "\115\uffb7\001\002\000\034\021\266\022\275\024\272\027" +
    "\253\030\257\031\263\050\267\054\247\056\252\105\271" +
    "\110\273\114\072\115\074\001\002\000\036\021\266\022" +
    "\275\024\272\027\253\030\257\031\263\050\267\054\247" +
    "\056\252\064\311\105\271\110\273\114\072\115\074\001" +
    "\002\000\042\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\050\uffb6\054\uffb6\056\uffb6\064" +
    "\uffb6\105\uffb6\110\uffb6\114\uffb6\115\uffb6\001\002\000\004" +
    "\050\313\001\002\000\004\042\314\001\002\000\004\106" +
    "\315\001\002\000\004\050\316\001\002\000\004\016\317" +
    "\001\002\000\004\017\320\001\002\000\004\065\321\001" +
    "\002\000\042\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\050\uffa7\054\uffa7\056\uffa7\064" +
    "\uffa7\105\uffa7\110\uffa7\114\uffa7\115\uffa7\001\002\000\030" +
    "\016\106\034\075\050\101\057\077\060\107\073\066\077" +
    "\070\100\105\102\073\114\072\115\074\001\002\000\004" +
    "\017\324\001\002\000\004\063\325\001\002\000\006\025" +
    "\327\026\330\001\002\000\004\064\346\001\002\000\030" +
    "\016\106\034\075\050\101\057\077\060\107\073\066\077" +
    "\070\100\105\102\073\114\072\115\074\001\002\000\004" +
    "\055\341\001\002\000\010\025\334\026\330\064\332\001" +
    "\002\000\042\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\050\uffb3\054\uffb3\056\uffb3\064" +
    "\uffb3\105\uffb3\110\uffb3\114\uffb3\115\uffb3\001\002\000\004" +
    "\064\340\001\002\000\030\016\106\034\075\050\101\057" +
    "\077\060\107\073\066\077\070\100\105\102\073\114\072" +
    "\115\074\001\002\000\004\055\336\001\002\000\034\021" +
    "\266\022\275\024\272\027\253\030\257\031\263\050\267" +
    "\054\247\056\252\105\271\110\273\114\072\115\074\001" +
    "\002\000\042\021\266\022\275\024\272\025\uffb0\026\uffb0" +
    "\027\253\030\257\031\263\050\267\054\247\056\252\064" +
    "\uffb0\105\271\110\273\114\072\115\074\001\002\000\042" +
    "\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\050\uffb2\054\uffb2\056\uffb2\064\uffb2\105\uffb2" +
    "\110\uffb2\114\uffb2\115\uffb2\001\002\000\034\021\266\022" +
    "\275\024\272\027\253\030\257\031\263\050\267\054\247" +
    "\056\252\105\271\110\273\114\072\115\074\001\002\000" +
    "\036\021\266\022\275\024\272\027\253\030\257\031\263" +
    "\050\267\054\247\056\252\064\uffae\105\271\110\273\114" +
    "\072\115\074\001\002\000\004\055\344\001\002\000\034" +
    "\021\266\022\275\024\272\027\253\030\257\031\263\050" +
    "\267\054\247\056\252\105\271\110\273\114\072\115\074" +
    "\001\002\000\042\021\266\022\275\024\272\025\uffaf\026" +
    "\uffaf\027\253\030\257\031\263\050\267\054\247\056\252" +
    "\064\uffaf\105\271\110\273\114\072\115\074\001\002\000" +
    "\042\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\050\uffb1\054\uffb1\056\uffb1\064\uffb1\105" +
    "\uffb1\110\uffb1\114\uffb1\115\uffb1\001\002\000\042\021\uffdf" +
    "\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\050\uffdf\054\uffdf\056\uffdf\064\uffdf\105\uffdf\110\uffdf" +
    "\114\uffdf\115\uffdf\001\002\000\042\021\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\050\uffe1" +
    "\054\uffe1\056\uffe1\064\uffe1\105\uffe1\110\uffe1\114\uffe1\115" +
    "\uffe1\001\002\000\004\065\361\001\002\000\004\042\353" +
    "\001\002\000\004\106\354\001\002\000\004\050\355\001" +
    "\002\000\004\016\356\001\002\000\004\017\357\001\002" +
    "\000\004\065\360\001\002\000\042\021\uffa6\022\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\050\uffa6" +
    "\054\uffa6\056\uffa6\064\uffa6\105\uffa6\110\uffa6\114\uffa6\115" +
    "\uffa6\001\002\000\042\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\050\uffc9\054\uffc9\056" +
    "\uffc9\064\uffc9\105\uffc9\110\uffc9\114\uffc9\115\uffc9\001\002" +
    "\000\004\065\364\001\002\000\042\021\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\050\uffde" +
    "\054\uffde\056\uffde\064\uffde\105\uffde\110\uffde\114\uffde\115" +
    "\uffde\001\002\000\042\021\uffdd\022\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\050\uffdd\054\uffdd\056" +
    "\uffdd\064\uffdd\105\uffdd\110\uffdd\114\uffdd\115\uffdd\001\002" +
    "\000\042\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\050\uffe0\054\uffe0\056\uffe0\064\uffe0" +
    "\105\uffe0\110\uffe0\114\uffe0\115\uffe0\001\002\000\034\021" +
    "\266\022\275\024\272\027\253\030\257\031\263\050\267" +
    "\054\247\056\252\105\271\110\273\114\072\115\074\001" +
    "\002\000\036\021\266\022\275\024\272\027\253\030\257" +
    "\031\263\050\267\054\247\056\252\064\370\105\271\110" +
    "\273\114\072\115\074\001\002\000\004\027\371\001\002" +
    "\000\004\016\372\001\002\000\030\016\106\034\075\050" +
    "\101\057\077\060\107\073\066\077\070\100\105\102\073" +
    "\114\072\115\074\001\002\000\004\017\374\001\002\000" +
    "\004\065\375\001\002\000\042\021\uffb4\022\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\050\uffb4\054" +
    "\uffb4\056\uffb4\064\uffb4\105\uffb4\110\uffb4\114\uffb4\115\uffb4" +
    "\001\002\000\030\016\106\034\075\050\101\057\077\060" +
    "\107\073\066\077\070\100\105\102\073\114\072\115\074" +
    "\001\002\000\004\017\u0100\001\002\000\004\063\u0101\001" +
    "\002\000\034\021\266\022\275\024\272\027\253\030\257" +
    "\031\263\050\267\054\247\056\252\105\271\110\273\114" +
    "\072\115\074\001\002\000\036\021\266\022\275\024\272" +
    "\027\253\030\257\031\263\050\267\054\247\056\252\064" +
    "\u0103\105\271\110\273\114\072\115\074\001\002\000\042" +
    "\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\050\uffb5\054\uffb5\056\uffb5\064\uffb5\105\uffb5" +
    "\110\uffb5\114\uffb5\115\uffb5\001\002\000\030\016\106\034" +
    "\075\050\101\057\077\060\107\073\066\077\070\100\105" +
    "\102\073\114\072\115\074\001\002\000\004\017\u0106\001" +
    "\002\000\004\065\u0107\001\002\000\042\021\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\050" +
    "\uffd4\054\uffd4\056\uffd4\064\uffd4\105\uffd4\110\uffd4\114\uffd4" +
    "\115\uffd4\001\002\000\004\065\u0109\001\002\000\042\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\050\uffc8\054\uffc8\056\uffc8\064\uffc8\105\uffc8\110" +
    "\uffc8\114\uffc8\115\uffc8\001\002\000\006\050\u010b\110\052" +
    "\001\002\000\004\042\065\001\002\000\004\055\u010d\001" +
    "\002\000\030\016\106\034\075\050\101\057\077\060\107" +
    "\073\066\077\070\100\105\102\073\114\072\115\074\001" +
    "\002\000\004\055\u010f\001\002\000\030\016\106\034\075" +
    "\050\101\057\077\060\107\073\066\077\070\100\105\102" +
    "\073\114\072\115\074\001\002\000\004\017\u0111\001\002" +
    "\000\004\063\u0112\001\002\000\034\021\266\022\275\024" +
    "\272\027\253\030\257\031\263\050\267\054\247\056\252" +
    "\105\271\110\273\114\072\115\074\001\002\000\036\021" +
    "\266\022\275\024\272\027\253\030\257\031\263\050\267" +
    "\054\247\056\252\064\u0114\105\271\110\273\114\072\115" +
    "\074\001\002\000\042\021\uffad\022\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\050\uffad\054\uffad\056" +
    "\uffad\064\uffad\105\uffad\110\uffad\114\uffad\115\uffad\001\002" +
    "\000\004\055\u0116\001\002\000\030\016\106\034\075\050" +
    "\101\057\077\060\107\073\066\077\070\100\105\102\073" +
    "\114\072\115\074\001\002\000\004\055\u0118\001\002\000" +
    "\030\016\106\034\075\050\101\057\077\060\107\073\066" +
    "\077\070\100\105\102\073\114\072\115\074\001\002\000" +
    "\004\017\u011a\001\002\000\004\063\u011b\001\002\000\034" +
    "\021\266\022\275\024\272\027\253\030\257\031\263\050" +
    "\267\054\247\056\252\105\271\110\273\114\072\115\074" +
    "\001\002\000\036\021\266\022\275\024\272\027\253\030" +
    "\257\031\263\050\267\054\247\056\252\064\u011d\105\271" +
    "\110\273\114\072\115\074\001\002\000\042\021\uffac\022" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\050\uffac\054\uffac\056\uffac\064\uffac\105\uffac\110\uffac\114" +
    "\uffac\115\uffac\001\002\000\024\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\064\uffdc\104\uffdc\110\uffdc\001" +
    "\002\000\004\016\u0120\001\002\000\022\010\054\011\046" +
    "\012\036\013\041\014\043\015\037\017\u0121\104\040\001" +
    "\002\000\014\004\033\005\030\006\026\055\032\063\ufff4" +
    "\001\002\000\004\050\u012c\001\002\000\006\017\u0125\020" +
    "\u0124\001\002\000\020\010\054\011\046\012\036\013\041" +
    "\014\043\015\037\104\040\001\002\000\014\004\033\005" +
    "\030\006\026\055\032\063\ufff4\001\002\000\004\063\u0127" +
    "\001\002\000\034\021\266\022\275\024\272\027\253\030" +
    "\257\031\263\050\267\054\247\056\252\105\271\110\273" +
    "\114\072\115\074\001\002\000\036\021\266\022\275\024" +
    "\272\027\253\030\257\031\263\050\267\054\247\056\252" +
    "\064\u0129\105\271\110\273\114\072\115\074\001\002\000" +
    "\024\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\064\uffbc\104\uffbc\110\uffbc\001\002\000\004\050\u012b\001" +
    "\002\000\006\017\uffba\020\uffba\001\002\000\006\017\uffb9" +
    "\020\uffb9\001\002\000\004\063\u012e\001\002\000\034\021" +
    "\266\022\275\024\272\027\253\030\257\031\263\050\267" +
    "\054\247\056\252\105\271\110\273\114\072\115\074\001" +
    "\002\000\036\021\266\022\275\024\272\027\253\030\257" +
    "\031\263\050\267\054\247\056\252\064\u0130\105\271\110" +
    "\273\114\072\115\074\001\002\000\024\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\064\uffbb\104\uffbb\110" +
    "\uffbb\001\002\000\006\002\uffee\113\uffee\001\002\000\024" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\064" +
    "\ufff3\104\ufff3\110\ufff3\001\002\000\004\063\u0134\001\002" +
    "\000\022\010\047\011\046\012\036\013\041\014\043\015" +
    "\037\104\040\110\052\001\002\000\024\010\047\011\046" +
    "\012\036\013\041\014\043\015\037\064\u0136\104\040\110" +
    "\052\001\002\000\006\002\uffed\113\uffed\001\002\000\004" +
    "\101\u0138\001\002\000\004\107\u0139\001\002\000\004\065" +
    "\u013a\001\002\000\010\007\ufffc\111\ufffc\113\ufffc\001\002" +
    "\000\004\065\u013c\001\002\000\010\007\ufffb\111\ufffb\113" +
    "\ufffb\001\002\000\006\002\ufffe\113\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\010\002\005\003\007\004\003\001\001\000" +
    "\006\040\020\047\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\043\007\050\010\044" +
    "\030\041\037\052\046\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\050\010\044\030" +
    "\041\037\052\046\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\056\045\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\061\033\062\035\063" +
    "\001\001\000\014\012\101\020\221\032\075\041\103\043" +
    "\066\001\001\000\002\001\001\000\006\005\212\035\213" +
    "\001\001\000\004\005\211\001\001\000\016\012\101\020" +
    "\070\032\075\034\102\041\103\043\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\101\032\176\041\103\043\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\101\020\165" +
    "\022\172\032\075\034\173\041\103\043\066\001\001\000" +
    "\004\044\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\101\032" +
    "\107\041\103\043\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\101\032\147\041" +
    "\103\043\066\001\001\000\012\012\101\032\146\041\103" +
    "\043\066\001\001\000\012\012\101\032\145\041\103\043" +
    "\066\001\001\000\012\012\101\032\144\041\103\043\066" +
    "\001\001\000\012\012\101\032\143\041\103\043\066\001" +
    "\001\000\012\012\101\032\142\041\103\043\066\001\001" +
    "\000\002\001\001\000\012\012\101\032\141\041\103\043" +
    "\066\001\001\000\012\012\101\032\140\041\103\043\066" +
    "\001\001\000\002\001\001\000\012\012\101\032\137\041" +
    "\103\043\066\001\001\000\012\012\101\032\136\041\103" +
    "\043\066\001\001\000\002\001\001\000\012\012\101\032" +
    "\135\041\103\043\066\001\001\000\012\012\101\032\134" +
    "\041\103\043\066\001\001\000\012\012\101\032\133\041" +
    "\103\043\066\001\001\000\012\012\101\032\132\041\103" +
    "\043\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\101\020\156\032\075\041" +
    "\103\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\101\020\161\032\075\041\103\043\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\101\020\165\022\166\032\075\041\103\043" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\101\020\171\032\075\041\103\043\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\101\020\165\022\201" +
    "\032\075\041\103\043\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\101\020\165\022\206\032\075\041\103\043\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\220\001" +
    "\001\000\014\012\101\020\215\032\075\041\103\043\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\227\035\230\001\001\000\002\001\001\000\004" +
    "\005\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\235\001\001\000\006\005\236" +
    "\035\237\001\001\000\002\001\001\000\004\005\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\250\012\267\013\257\015" +
    "\261\016\255\023\253\025\264\026\245\027\263\030\254" +
    "\036\260\042\273\043\247\001\001\000\032\011\250\012" +
    "\267\013\257\015\261\016\255\023\253\025\264\027\302" +
    "\030\254\036\260\042\273\043\247\001\001\000\002\001" +
    "\001\000\004\035\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\101\020\361" +
    "\032\075\041\103\043\066\001\001\000\006\035\350\044" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\101\020\276\032\075\041\103" +
    "\043\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\011\250\012\267\013\257\015\261\016\255\023\253" +
    "\025\264\026\301\027\263\030\254\036\260\042\273\043" +
    "\247\001\001\000\032\011\250\012\267\013\257\015\261" +
    "\016\255\023\253\025\264\027\302\030\254\036\260\042" +
    "\273\043\247\001\001\000\002\001\001\000\004\014\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\011" +
    "\250\012\267\013\257\015\261\016\255\023\253\025\264" +
    "\026\307\027\263\030\254\036\260\042\273\043\247\001" +
    "\001\000\032\011\250\012\267\013\257\015\261\016\255" +
    "\023\253\025\264\027\302\030\254\036\260\042\273\043" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\101\020\322\032\075\041\103\043\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\330" +
    "\031\325\001\001\000\002\001\001\000\014\012\101\020" +
    "\342\032\075\041\103\043\066\001\001\000\002\001\001" +
    "\000\004\031\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\101\020\334\032\075\041\103\043\066" +
    "\001\001\000\002\001\001\000\034\011\250\012\267\013" +
    "\257\015\261\016\255\023\253\025\264\026\336\027\263" +
    "\030\254\036\260\042\273\043\247\001\001\000\032\011" +
    "\250\012\267\013\257\015\261\016\255\023\253\025\264" +
    "\027\302\030\254\036\260\042\273\043\247\001\001\000" +
    "\002\001\001\000\034\011\250\012\267\013\257\015\261" +
    "\016\255\023\253\025\264\026\341\027\263\030\254\036" +
    "\260\042\273\043\247\001\001\000\032\011\250\012\267" +
    "\013\257\015\261\016\255\023\253\025\264\027\302\030" +
    "\254\036\260\042\273\043\247\001\001\000\002\001\001" +
    "\000\034\011\250\012\267\013\257\015\261\016\255\023" +
    "\253\025\264\026\344\027\263\030\254\036\260\042\273" +
    "\043\247\001\001\000\032\011\250\012\267\013\257\015" +
    "\261\016\255\023\253\025\264\027\302\030\254\036\260" +
    "\042\273\043\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\250\012\267\013\257" +
    "\015\261\016\255\023\253\025\264\026\366\027\263\030" +
    "\254\036\260\042\273\043\247\001\001\000\032\011\250" +
    "\012\267\013\257\015\261\016\255\023\253\025\264\027" +
    "\302\030\254\036\260\042\273\043\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\101\020\372\032" +
    "\075\041\103\043\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\101\020\376\032" +
    "\075\041\103\043\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\250\012\267\013\257\015\261\016" +
    "\255\023\253\025\264\026\u0101\027\263\030\254\036\260" +
    "\042\273\043\247\001\001\000\032\011\250\012\267\013" +
    "\257\015\261\016\255\023\253\025\264\027\302\030\254" +
    "\036\260\042\273\043\247\001\001\000\002\001\001\000" +
    "\014\012\101\020\u0104\032\075\041\103\043\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u010b\001\001" +
    "\000\004\035\u0114\001\001\000\002\001\001\000\014\012" +
    "\101\020\u010d\032\075\041\103\043\066\001\001\000\002" +
    "\001\001\000\014\012\101\020\u010f\032\075\041\103\043" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\011\250\012\267\013\257\015\261\016\255\023\253\025" +
    "\264\026\u0112\027\263\030\254\036\260\042\273\043\247" +
    "\001\001\000\032\011\250\012\267\013\257\015\261\016" +
    "\255\023\253\025\264\027\302\030\254\036\260\042\273" +
    "\043\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\101\020\u0116\032\075\041\103\043\066\001\001" +
    "\000\002\001\001\000\014\012\101\020\u0118\032\075\041" +
    "\103\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\011\250\012\267\013\257\015\261\016\255\023" +
    "\253\025\264\026\u011b\027\263\030\254\036\260\042\273" +
    "\043\247\001\001\000\032\011\250\012\267\013\257\015" +
    "\261\016\255\023\253\025\264\027\302\030\254\036\260" +
    "\042\273\043\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0121\017\u0122\001\001" +
    "\000\004\005\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0129\001\001\000\004\005\u0125\001\001" +
    "\000\002\001\001\000\034\011\250\012\267\013\257\015" +
    "\261\016\255\023\253\025\264\026\u0127\027\263\030\254" +
    "\036\260\042\273\043\247\001\001\000\032\011\250\012" +
    "\267\013\257\015\261\016\255\023\253\025\264\027\302" +
    "\030\254\036\260\042\273\043\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\250\012\267\013\257\015" +
    "\261\016\255\023\253\025\264\026\u012e\027\263\030\254" +
    "\036\260\042\273\043\247\001\001\000\032\011\250\012" +
    "\267\013\257\015\261\016\255\023\253\025\264\027\302" +
    "\030\254\036\260\042\273\043\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\u0134\007\050\010\044\030\041\037\052\046" +
    "\047\001\001\000\014\007\050\010\044\030\041\037\052" +
    "\046\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoG$actions {



  private final SintacticoG parser;

  /** Constructor */
  CUP$SintacticoG$actions(SintacticoG parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action_part00000000(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoG$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoG$parser.done_parsing();
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTRADA 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENTRADA ::= IMPORT A 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENTRADA",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("A",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= ALS 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("A",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORT ::= IMPORT importar id punto extension signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= IMPORT incluir id signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORT ::= importar id punto extension signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORT ::= incluir id signo 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VISIBILIDAD ::= dosPuntos VISIBILIDAD 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(n.nodo); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VISIBILIDAD ::= protegido 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("protegido")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VISIBILIDAD ::= privado 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("privado")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VISIBILIDAD ::= publico 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= 
            {
              Caracter RESULT =null;
		
    NodoG VISIBILIDAD = new NodoG("VISIBILIDAD");
    RESULT = new Caracter();
    VISIBILIDAD.insertar(new NodoG("publico")); 
    RESULT.nodo = VISIBILIDAD;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= INSTRUCCIONES GLOBAL 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= GLOBAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GLOBAL ::= PRINCIPAL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GLOBAL ::= METODO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBAL ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("GLOBAL");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;
    VariableG.variableGlobal.add(n.nodo);

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("GLOBAL",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ALS ::= als id VISIBILIDAD llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("ALS");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i));E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ALS",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ALS ::= als id hereda id llaveA INSTRUCCIONES llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("ALS")); E.insertar(new NodoG(i)); E.insertar(new NodoG("hereda")); E.insertar(new NodoG(j));
    E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ALS",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG INSTRUCCION = new NodoG("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCION ::= ACCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCION ::= CrearASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCION ::= INSTANCIA signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPCION ::= salir signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Terminar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCION ::= continuar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("Continuar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCION ::= retornar signo 
            {
              Caracter RESULT =null;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCION ::= retornar OP signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG OPCION = new NodoG("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoG("retornar")); OPCION.insertar(n.nodo); OPCION.insertar(new NodoG("?"));
    RESULT.nodo = OPCION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINCIPAL ::= tipoVoid inicio parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("PRINCIPAL");
    RESULT = new Caracter();
    E.insertar(n.nodo);
    RESULT.nodo = E;
    ArrayList parametros = new ArrayList();
    Metodo_FuncionG.agregarMF("inicio",n.nodo,parametros);

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",29, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tipoString 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("cadena")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= tipoInt 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("entero")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tipoChar 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("char")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= tipoBool 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("bool")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= tipoDouble 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("decimal")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= tipoVoid 
            {
              Caracter RESULT =null;
		
    NodoG TIPO = new NodoG("TIPO");
    RESULT = new Caracter();
    TIPO.insertar(new NodoG("vacio")); 
    RESULT.nodo = TIPO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= tipoFloat 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMPRIMIR ::= imprimir parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
    NodoG IMPRIMIR = new NodoG("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoG("imprimir")); IMPRIMIR.insertar(new NodoG("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoG(")")); IMPRIMIR.insertar(new NodoG("?")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLE ::= var TIPO MasVARIABLE signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//6
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo);V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLE ::= var TIPO MasMATRIZ signo 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//7
    NodoG V = new NodoG("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoG("var")); V.insertar(t.nodo); V.insertar(m.nodo); V.insertar(new NodoG("?")); 
    RESULT.nodo = V;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MasVARIABLE ::= MasVARIABLE coma id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MasVARIABLE ::= MasVARIABLE coma id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MasVARIABLE ::= id VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //2
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasVARIABLE ::= id ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //5
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MasMATRIZ ::= MasMATRIZ coma id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //6
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoG(",")); MasVARIABLE.insertar(new NodoG(i)); MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MasMATRIZ ::= id MATRIZ VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //3
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo); MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MasMATRIZ ::= id MATRIZ ASIGNAR VISIBILIDAD 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter z = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //4
    NodoG MasVARIABLE = new NodoG("MasMATRIZ");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoG(i));  MasVARIABLE.insertar(z.nodo);  MasVARIABLE.insertar(a.nodo);  MasVARIABLE.insertar(v.nodo); 
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MasMATRIZ",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= id ASIGNAR signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		 //2 (?)
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoG(i));  ASIGNACION.insertar(a.nodo); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= ARREGLO ASIGNAR signo 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		 //4
    NodoG ASIGNACION = new NodoG("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(m.nodo);  ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoG("?")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MATRIZ ::= MATRIZ corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(m.nodo); MATRIZ.insertar(new NodoG("["));  MATRIZ.insertar(n.nodo); MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MATRIZ ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));  MATRIZ.insertar(n.nodo); MATRIZ.insertar(new NodoG("]")); 
    RESULT.nodo = MATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MATRIZ ::= MATRIZ corcheteA corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(n.nodo);  MATRIZ.insertar(new NodoG("["));
    RESULT.nodo = MATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;
		
    NodoG MATRIZ = new NodoG("MATRIZ");
    RESULT = new Caracter();
    MATRIZ.insertar(new NodoG("["));  
    RESULT.nodo = MATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MATRIZ",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNAR ::= igual OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNAR ::= igual ValorMATRIZ 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG ASIGNAR = new NodoG("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoG("="));  ASIGNAR.insertar(v.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ValorMATRIZ ::= llaveA ValorMATRIZ llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//1
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ValorMATRIZ ::= ValorMATRIZ coma ValorMATRIZ 
            {
              Caracter RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter v1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter v2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 //5
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(v1.nodo); ValorMATRIZ.insertar(v2.nodo); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ValorMATRIZ ::= llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//6
    NodoG ValorMATRIZ = new NodoG("ValorMATRIZ");
    RESULT = new Caracter();
    ValorMATRIZ.insertar(new NodoG("{"));  ValorMATRIZ.insertar(v.nodo); ValorMATRIZ.insertar(new NodoG("}")); 
    RESULT.nodo = ValorMATRIZ;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ValorMATRIZ",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoG(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG VALORES = new NodoG("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALORES",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO ::= TIPO id parentesisA PARAMETROS parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(p.nodo); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;

    Metodo_FuncionG.agregarMF(i,n.nodo,Metodo_FuncionG.parametros);
    Metodo_FuncionG.parametros.clear();

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO ::= TIPO id parentesisA parentesisC VISIBILIDAD llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(new NodoG(i)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")"));
    E.insertar(v.nodo); E.insertar(new NodoG("{")); E.insertar(n.nodo); E.insertar(new NodoG("}"));
    RESULT.nodo = E;
    Metodo_FuncionG.agregarMF(i,n.nodo,Metodo_FuncionG.parametros);
    Metodo_FuncionG.parametros.clear();

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROS ::= PARAMETROS coma TIPO id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(new NodoG("parametro")); 
    RESULT.nodo = PARAMETROS;
    Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETROS ::= TIPO id 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG PARAMETROS = new NodoG("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(new NodoG("parametro")); 
    RESULT.nodo = PARAMETROS;
    Metodo_FuncionG.agregarParametro(t.nodo.texto,i);

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//7
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoG("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		//8
    NodoG IF = new NodoG("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoG("if")); IF.insertar(new NodoG("(")); IF.insertar(n.nodo); IF.insertar(new NodoG(")")); IF.insertar(new NodoG("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoG("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		 //4
    NodoG ELSE = new NodoG("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoG("else")); ELSE.insertar(new NodoG("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoG("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//7
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("while")); CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLO ::= hacer llaveA INSTRUCCION llaveC mientras parentesisA OP parentesisC signo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		 //9
    NodoG CICLO = new NodoG("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoG("do")); CICLO.insertar(new NodoG("{")); CICLO.insertar(i.nodo); CICLO.insertar(new NodoG("}")); CICLO.insertar(new NodoG("while")); 
    CICLO.insertar(new NodoG("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoG(")")); CICLO.insertar(new NodoG("?"));
    RESULT.nodo = CICLO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CICLO",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//8
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH ::= interrumpir parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		//7
    NodoG SWITCH = new NodoG("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoG("Seleccion")); SWITCH.insertar(new NodoG("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoG(")")); SWITCH.insertar(new NodoG("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoG("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG CASO = new NodoG("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoG("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoG(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CASO",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG DEFECTO = new NodoG("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoG("default")); DEFECTO.insertar(new NodoG(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARA ::= para parentesisA VARIABLE dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		  //11
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("(")); PARA.insertar(a.nodo);  PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo); PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARA ::= para parentesisA id ASIGNAR dosPuntos OP dosPuntos OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		  //12
    NodoG PARA = new NodoG("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoG("Para")); PARA.insertar(new NodoG("("));  PARA.insertar(new NodoG(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoG(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoG(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoG(")")); PARA.insertar(new NodoG("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoG("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTANCIA ::= llamar id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTANCIA ::= llamar id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamar")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTANCIA ::= llamarHK id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTANCIA ::= llamarHK id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG INSTANCIA = new NodoG("INSTANCIA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoG("llamarHK")); INSTANCIA.insertar(new NodoG(i)); INSTANCIA.insertar(new NodoG("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoG(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INSTANCIA",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CrearASL ::= var id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG("var")); E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c)); E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CrearASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CrearASL ::= id id igual nuevo id parentesisA parentesisC signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		
    NodoG E = new NodoG("CrearASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a));  E.insertar(new NodoG(b)); E.insertar(new NodoG("=")); E.insertar(new NodoG("nuevo")); 
    E.insertar(new NodoG(c));E.insertar(new NodoG("(")); E.insertar(new NodoG(")")); E.insertar(new NodoG("?")); 
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CrearASL",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AccesoASL ::= AccesoASL signo 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("?"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("AccesoASL",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AccesoASL ::= id punto id 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(new NodoG("."));  E.insertar(new NodoG(b)); 
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("AccesoASL",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AccesoASL ::= id punto id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("AccesoASL");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(new NodoG("."));  E.insertar(new NodoG(b)); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("AccesoASL",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARREGLO ::= id ARR 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("ARREGLO");
    RESULT = new Caracter();
    E.insertar(new NodoG(a)); E.insertar(n.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARREGLO",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARR ::= ARR corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("ARR");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("(")); E.insertar(n.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARR ::= corcheteA OP corcheteC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("ARR");
    RESULT = new Caracter();
    E.insertar(new NodoG("[")); E.insertar(n.nodo); E.insertar(new NodoG("]"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG OP = new NodoG("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("(")); E.insertar(a.nodo); E.insertar(new NodoG(")"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("+")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("*")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("/")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("++"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("--"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG(">=")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("<=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("==")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("!=")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("true","cadena"));
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("false","cadena"));
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("||")); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E xor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&|")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("&&")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E not 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("!")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoG("'pot'")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= menos E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    NodoG E = new NodoG("E");
    RESULT = new Caracter();
    E.insertar(new NodoG("-")); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"cadena"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("'","");
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"caracter"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"entero"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(n,"decimal"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(new NodoG(i,"id"));
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= INSTANCIA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= ARREGLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= AccesoASL 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoG E = new NodoG("E");
    E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoG$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoG$do_action_part00000000(
                               CUP$SintacticoG$act_num,
                               CUP$SintacticoG$parser,
                               CUP$SintacticoG$stack,
                               CUP$SintacticoG$top);
    }
}

}
