
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Consola;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\010\006\000\002\010\006\000" +
    "\002\014\007\000\002\014\005\000\002\014\005\000\002" +
    "\014\004\000\002\011\005\000\002\011\003\000\002\012" +
    "\006\000\002\012\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\005\000\002\020\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\006\000\002\015\006\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\060\004\023\005\021\012\011\013\027\014" +
    "\016\015\006\022\040\040\013\047\026\050\042\054\031" +
    "\055\035\057\032\060\036\061\022\072\012\073\010\074" +
    "\007\075\030\076\025\077\014\101\034\102\033\001\002" +
    "\000\062\002\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\022\ufffc\040\ufffc\047\ufffc\050\ufffc\054\ufffc" +
    "\055\ufffc\057\ufffc\060\ufffc\061\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\001\002" +
    "\000\062\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\022\ufffe\040\ufffe\047\ufffe\050\ufffe\054\ufffe" +
    "\055\ufffe\057\ufffe\060\ufffe\061\ufffe\072\ufffe\073\ufffe\074" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe\001\002" +
    "\000\134\002\uffce\004\uffce\005\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\043\uffce\045\uffce\047\uffce\050\uffce\051\uffce\054" +
    "\uffce\055\uffce\057\uffce\060\uffce\061\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce\102\uffce\103" +
    "\uffce\001\002\000\006\013\uffeb\042\uffeb\001\002\000\006" +
    "\013\uffec\042\uffec\001\002\000\004\055\160\001\002\000" +
    "\006\013\uffed\042\uffed\001\002\000\036\004\023\005\021" +
    "\012\011\013\053\014\016\015\006\022\040\040\013\047" +
    "\026\050\042\055\035\061\022\101\034\102\033\001\002" +
    "\000\006\013\uffe6\042\uffe6\001\002\000\062\002\ufffb\004" +
    "\ufffb\005\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\022\ufffb" +
    "\040\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\101\ufffb\102\ufffb\001\002\000\134\002\uffcc\004" +
    "\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\043\uffcc\045" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\077\uffcc\101\uffcc\102\uffcc\103\uffcc\001\002\000\062" +
    "\002\000\004\023\005\021\012\011\013\027\014\016\015" +
    "\006\022\040\040\013\047\026\050\042\054\031\055\035" +
    "\057\032\060\036\061\022\072\012\073\010\074\007\075" +
    "\030\076\025\077\014\101\034\102\033\001\002\000\134" +
    "\002\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\043\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\054\uffc9\055" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\001" +
    "\002\000\040\004\023\005\021\012\011\013\053\014\016" +
    "\015\006\017\154\022\040\040\013\047\026\050\042\055" +
    "\035\061\022\101\034\102\033\001\002\000\134\002\uffcd" +
    "\004\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\054\uffcd\055\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\001\002\000" +
    "\040\004\023\005\021\012\011\013\053\014\016\015\006" +
    "\017\152\022\040\040\013\047\026\050\042\055\035\061" +
    "\022\101\034\102\033\001\002\000\134\002\uffe3\004\uffe3" +
    "\005\uffe3\007\067\010\106\011\105\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\021\076\022\uffe3\023\uffe3\024\uffe3\025\104" +
    "\026\073\027\071\030\075\031\110\032\074\033\101\034" +
    "\070\035\103\036\072\037\107\040\uffe3\043\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\051\077\054\uffe3\055\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\101\uffe3\102\uffe3\103\100\001\002\000\006\013" +
    "\uffe7\042\uffe7\001\002\000\134\002\uffd6\004\uffd6\005\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\045\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\001\002\000\126\002\uffcb\004" +
    "\uffcb\005\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\045\146\047\uffcb\050\uffcb\051" +
    "\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\001\002\000\006\013\uffea\042\uffea\001\002" +
    "\000\004\013\141\001\002\000\006\013\uffe9\042\uffe9\001" +
    "\002\000\004\042\136\001\002\000\004\042\133\001\002" +
    "\000\036\004\023\005\021\012\011\013\053\014\016\015" +
    "\006\022\040\040\013\047\026\050\042\055\035\061\022" +
    "\101\034\102\033\001\002\000\006\013\uffe8\042\uffe8\001" +
    "\002\000\134\002\uffca\004\uffca\005\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\043\uffca\045\uffca\047\uffca\050\uffca\051\uffca" +
    "\054\uffca\055\uffca\057\uffca\060\uffca\061\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\101\uffca\102\uffca" +
    "\103\uffca\001\002\000\036\004\023\005\021\012\011\013" +
    "\053\014\016\015\006\022\040\040\013\047\026\050\042" +
    "\055\035\061\022\101\034\102\033\001\002\000\062\002" +
    "\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\022\ufffd\040\ufffd\047\ufffd\050\ufffd\054\ufffd\055\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\101\ufffd\102\ufffd\001\002\000\134\002" +
    "\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043" +
    "\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\072\uffd5\073\uffd5\074\uffd5\075" +
    "\uffd5\076\uffd5\077\uffd5\101\uffd5\102\uffd5\103\uffd5\001\002" +
    "\000\004\002\065\001\002\000\006\013\046\042\047\001" +
    "\002\000\064\002\ufff0\004\ufff0\005\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\022\ufff0\024\060\040\ufff0\047\ufff0\050" +
    "\ufff0\054\ufff0\055\ufff0\057\ufff0\060\ufff0\061\ufff0\072\ufff0" +
    "\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\102" +
    "\ufff0\001\002\000\062\002\uffef\004\uffef\005\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\022\uffef\040\uffef\047\uffef\050" +
    "\uffef\054\uffef\055\uffef\057\uffef\060\uffef\061\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102" +
    "\uffef\001\002\000\042\004\023\005\021\012\011\013\053" +
    "\014\016\015\006\022\040\040\013\042\047\043\050\047" +
    "\026\050\042\055\035\061\022\101\034\102\033\001\002" +
    "\000\066\002\ufff5\004\ufff5\005\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\022\ufff5\024\ufff5\040\ufff5\043\ufff5\047\ufff5" +
    "\050\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5\061\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101\ufff5" +
    "\102\ufff5\001\002\000\006\024\060\043\061\001\002\000" +
    "\066\002\ufff3\004\ufff3\005\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\022\ufff3\024\ufff3\040\ufff3\043\ufff3\047\ufff3\050" +
    "\ufff3\054\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102" +
    "\ufff3\001\002\000\134\002\uffcb\004\uffcb\005\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\043\uffcb\045\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\001\002\000\006\024\055\043\056\001" +
    "\002\000\036\004\023\005\021\012\011\013\053\014\016" +
    "\015\006\022\040\040\013\047\026\050\042\055\035\061" +
    "\022\101\034\102\033\001\002\000\066\002\ufff7\004\ufff7" +
    "\005\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\022\ufff7\024" +
    "\ufff7\040\ufff7\043\ufff7\047\ufff7\050\ufff7\054\ufff7\055\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\101\ufff7\102\ufff7\001\002\000\066" +
    "\002\ufff4\004\ufff4\005\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\022\ufff4\024\ufff4\040\ufff4\043\ufff4\047\ufff4\050\ufff4" +
    "\054\ufff4\055\ufff4\057\ufff4\060\ufff4\061\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4" +
    "\001\002\000\004\042\062\001\002\000\066\002\ufff6\004" +
    "\ufff6\005\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\022\ufff6" +
    "\024\ufff6\040\ufff6\043\ufff6\047\ufff6\050\ufff6\054\ufff6\055" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\101\ufff6\102\ufff6\001\002\000" +
    "\036\004\023\005\021\012\011\013\053\014\016\015\006" +
    "\022\040\040\013\047\026\050\042\055\035\061\022\101" +
    "\034\102\033\001\002\000\006\024\055\043\064\001\002" +
    "\000\066\002\ufff8\004\ufff8\005\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\022\ufff8\024\ufff8\040\ufff8\043\ufff8\047\ufff8" +
    "\050\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8\072" +
    "\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8" +
    "\102\ufff8\001\002\000\004\002\001\001\002\000\046\007" +
    "\067\010\106\011\105\021\076\023\102\025\104\026\073" +
    "\027\071\030\075\031\110\032\074\033\101\034\070\035" +
    "\103\036\072\037\107\051\077\103\100\001\002\000\036" +
    "\004\023\005\021\012\011\013\053\014\016\015\006\022" +
    "\040\040\013\047\026\050\042\055\035\061\022\101\034" +
    "\102\033\001\002\000\036\004\023\005\021\012\011\013" +
    "\053\014\016\015\006\022\040\040\013\047\026\050\042" +
    "\055\035\061\022\101\034\102\033\001\002\000\036\004" +
    "\023\005\021\012\011\013\053\014\016\015\006\022\040" +
    "\040\013\047\026\050\042\055\035\061\022\101\034\102" +
    "\033\001\002\000\036\004\023\005\021\012\011\013\053" +
    "\014\016\015\006\022\040\040\013\047\026\050\042\055" +
    "\035\061\022\101\034\102\033\001\002\000\036\004\023" +
    "\005\021\012\011\013\053\014\016\015\006\022\040\040" +
    "\013\047\026\050\042\055\035\061\022\101\034\102\033" +
    "\001\002\000\036\004\023\005\021\012\011\013\053\014" +
    "\016\015\006\022\040\040\013\047\026\050\042\055\035" +
    "\061\022\101\034\102\033\001\002\000\036\004\023\005" +
    "\021\012\011\013\053\014\016\015\006\022\040\040\013" +
    "\047\026\050\042\055\035\061\022\101\034\102\033\001" +
    "\002\000\036\004\023\005\021\012\011\013\053\014\016" +
    "\015\006\022\040\040\013\047\026\050\042\055\035\061" +
    "\022\101\034\102\033\001\002\000\036\004\023\005\021" +
    "\012\011\013\053\014\016\015\006\022\040\040\013\047" +
    "\026\050\042\055\035\061\022\101\034\102\033\001\002" +
    "\000\036\004\023\005\021\012\011\013\053\014\016\015" +
    "\006\022\040\040\013\047\026\050\042\055\035\061\022" +
    "\101\034\102\033\001\002\000\036\004\023\005\021\012" +
    "\011\013\053\014\016\015\006\022\040\040\013\047\026" +
    "\050\042\055\035\061\022\101\034\102\033\001\002\000" +
    "\134\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\043\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\054\uffe2" +
    "\055\uffe2\057\uffe2\060\uffe2\061\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\102\uffe2\103\uffe2" +
    "\001\002\000\036\004\023\005\021\012\011\013\053\014" +
    "\016\015\006\022\040\040\013\047\026\050\042\055\035" +
    "\061\022\101\034\102\033\001\002\000\036\004\023\005" +
    "\021\012\011\013\053\014\016\015\006\022\040\040\013" +
    "\047\026\050\042\055\035\061\022\101\034\102\033\001" +
    "\002\000\036\004\023\005\021\012\011\013\053\014\016" +
    "\015\006\022\040\040\013\047\026\050\042\055\035\061" +
    "\022\101\034\102\033\001\002\000\036\004\023\005\021" +
    "\012\011\013\053\014\016\015\006\022\040\040\013\047" +
    "\026\050\042\055\035\061\022\101\034\102\033\001\002" +
    "\000\036\004\023\005\021\012\011\013\053\014\016\015" +
    "\006\022\040\040\013\047\026\050\042\055\035\061\022" +
    "\101\034\102\033\001\002\000\036\004\023\005\021\012" +
    "\011\013\053\014\016\015\006\022\040\040\013\047\026" +
    "\050\042\055\035\061\022\101\034\102\033\001\002\000" +
    "\134\002\uffdd\004\uffdd\005\uffdd\007\067\010\106\011\105" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\021\076\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\103\036\uffdd\037\uffdd\040" +
    "\uffdd\043\uffdd\045\uffdd\047\uffdd\050\uffdd\051\077\054\uffdd" +
    "\055\uffdd\057\uffdd\060\uffdd\061\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\103\100" +
    "\001\002\000\134\002\uffd3\004\uffd3\005\uffd3\007\067\010" +
    "\106\011\105\012\uffd3\013\uffd3\014\uffd3\015\uffd3\021\076" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\110\032\074\033\101\034\070\035\103\036\uffd3" +
    "\037\uffd3\040\uffd3\043\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\077\054\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102" +
    "\uffd3\103\100\001\002\000\134\002\uffd0\004\uffd0\005\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\045\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0" +
    "\101\uffd0\102\uffd0\103\uffd0\001\002\000\134\002\uffd1\004" +
    "\uffd1\005\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\001\002\000\134" +
    "\002\uffe1\004\uffe1\005\uffe1\007\067\010\106\011\105\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\021\076\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\071\030\075\031\110\032" +
    "\074\033\101\034\070\035\103\036\072\037\107\040\uffe1" +
    "\043\uffe1\045\uffe1\047\uffe1\050\uffe1\051\077\054\uffe1\055" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\101\uffe1\102\uffe1\103\100\001" +
    "\002\000\134\002\uffd7\004\uffd7\005\uffd7\007\067\010\106" +
    "\011\105\012\uffd7\013\uffd7\014\uffd7\015\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\043\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\054\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\101\uffd7\102\uffd7" +
    "\103\100\001\002\000\134\002\uffdb\004\uffdb\005\uffdb\007" +
    "\067\010\106\011\105\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\021\076\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\103" +
    "\036\uffdb\037\uffdb\040\uffdb\043\uffdb\045\uffdb\047\uffdb\050" +
    "\uffdb\051\077\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\101" +
    "\uffdb\102\uffdb\103\100\001\002\000\134\002\uffc2\004\uffc2" +
    "\005\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\043\uffc2\045\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\054\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002\000\134\002" +
    "\uffd8\004\uffd8\005\uffd8\007\067\010\106\011\105\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\043" +
    "\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\072\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\101\uffd8\102\uffd8\103\100\001\002" +
    "\000\134\002\uffd9\004\uffd9\005\uffd9\007\067\010\106\011" +
    "\105\012\uffd9\013\uffd9\014\uffd9\015\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\043\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\054" +
    "\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\077\uffd9\101\uffd9\102\uffd9\103" +
    "\100\001\002\000\134\002\uffde\004\uffde\005\uffde\007\067" +
    "\010\106\011\105\012\uffde\013\uffde\014\uffde\015\uffde\021" +
    "\076\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\110\032\074\033\101\034\070\035\103\036" +
    "\072\037\107\040\uffde\043\uffde\045\uffde\047\uffde\050\uffde" +
    "\051\077\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\072" +
    "\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101\uffde" +
    "\102\uffde\103\100\001\002\000\134\002\uffdc\004\uffdc\005" +
    "\uffdc\007\067\010\106\011\105\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\021\076\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\103\036\uffdc\037\uffdc\040\uffdc\043\uffdc\045\uffdc\047" +
    "\uffdc\050\uffdc\051\077\054\uffdc\055\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\101\uffdc\102\uffdc\103\100\001\002\000\134\002\uffe0" +
    "\004\uffe0\005\uffe0\007\067\010\106\011\105\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\021\076\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\071\030\075\031\110\032\074\033" +
    "\101\034\070\035\103\036\072\037\107\040\uffe0\043\uffe0" +
    "\045\uffe0\047\uffe0\050\uffe0\051\077\054\uffe0\055\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\076\uffe0\077\uffe0\101\uffe0\102\uffe0\103\100\001\002\000" +
    "\134\002\uffd4\004\uffd4\005\uffd4\007\067\010\106\011\105" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\021\076\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\110" +
    "\032\074\033\101\034\070\035\103\036\uffd4\037\uffd4\040" +
    "\uffd4\043\uffd4\045\uffd4\047\uffd4\050\uffd4\051\077\054\uffd4" +
    "\055\uffd4\057\uffd4\060\uffd4\061\uffd4\072\uffd4\073\uffd4\074" +
    "\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4\102\uffd4\103\100" +
    "\001\002\000\134\002\uffdf\004\uffdf\005\uffdf\007\067\010" +
    "\106\011\105\012\uffdf\013\uffdf\014\uffdf\015\uffdf\021\076" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\110\032\074\033\101\034\070\035\103\036\072" +
    "\037\107\040\uffdf\043\uffdf\045\uffdf\047\uffdf\050\uffdf\051" +
    "\077\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102" +
    "\uffdf\103\100\001\002\000\134\002\uffda\004\uffda\005\uffda" +
    "\007\067\010\106\011\105\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\021\076\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\103\036\uffda\037\uffda\040\uffda\043\uffda\045\uffda\047\uffda" +
    "\050\uffda\051\077\054\uffda\055\uffda\057\uffda\060\uffda\061" +
    "\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda" +
    "\101\uffda\102\uffda\103\100\001\002\000\134\002\uffcf\004" +
    "\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\045" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\001\002\000\134" +
    "\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\043\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\054\ufff1\055" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\001" +
    "\002\000\036\004\023\005\021\012\011\013\053\014\016" +
    "\015\006\022\040\040\013\047\026\050\042\055\035\061" +
    "\022\101\034\102\033\001\002\000\006\024\055\043\135" +
    "\001\002\000\134\002\uffc3\004\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\043\uffc3\045\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\072\uffc3" +
    "\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\001\002\000\036\004\023\005\021\012\011" +
    "\013\053\014\016\015\006\022\040\040\013\047\026\050" +
    "\042\055\035\061\022\101\034\102\033\001\002\000\006" +
    "\024\055\043\140\001\002\000\134\002\uffc4\004\uffc4\005" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\043\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\001\002\000\004\021\142" +
    "\001\002\000\040\004\023\005\021\012\011\013\053\014" +
    "\016\015\006\022\040\040\013\042\047\047\026\050\042" +
    "\055\035\061\022\101\034\102\033\001\002\000\064\002" +
    "\ufffa\004\ufffa\005\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\022\ufffa\024\060\040\ufffa\047\ufffa\050\ufffa\054\ufffa\055" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa\001\002\000" +
    "\064\002\ufff9\004\ufff9\005\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\022\ufff9\024\055\040\ufff9\047\ufff9\050\ufff9\054" +
    "\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9\001" +
    "\002\000\064\002\uffee\004\uffee\005\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\022\uffee\040\uffee\045\150\047\uffee\050" +
    "\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061\uffee\072\uffee" +
    "\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\101\uffee\102" +
    "\uffee\001\002\000\036\004\023\005\021\012\011\013\053" +
    "\014\016\015\006\022\040\040\013\047\026\050\042\055" +
    "\035\061\022\101\034\102\033\001\002\000\064\002\uffe4" +
    "\004\uffe4\005\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\022" +
    "\uffe4\040\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\001\002\000\036" +
    "\004\023\005\021\012\011\013\053\014\016\015\006\022" +
    "\040\040\013\047\026\050\042\055\035\061\022\101\034" +
    "\102\033\001\002\000\064\002\uffe5\004\uffe5\005\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\022\uffe5\040\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\054\uffe5\055\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\101\uffe5\102\uffe5\001\002\000\134\002\uffc6\004\uffc6\005" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\001\002\000\134\002\uffc8" +
    "\004\uffc8\005\uffc8\007\067\010\106\011\105\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\021\076\022\uffc8\023\uffc8\024\uffc8" +
    "\025\104\026\073\027\071\030\075\031\110\032\074\033" +
    "\101\034\070\035\103\036\072\037\107\040\uffc8\043\uffc8" +
    "\045\uffc8\047\uffc8\050\uffc8\051\077\054\uffc8\055\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\100\001\002\000" +
    "\134\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\043\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\060\uffc5\061\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\001\002\000\134\002\uffc7\004\uffc7\005\uffc7\007\067\010" +
    "\106\011\105\012\uffc7\013\uffc7\014\uffc7\015\uffc7\021\076" +
    "\022\uffc7\023\uffc7\024\uffc7\025\104\026\073\027\071\030" +
    "\075\031\110\032\074\033\101\034\070\035\103\036\072" +
    "\037\107\040\uffc7\043\uffc7\045\uffc7\047\uffc7\050\uffc7\051" +
    "\077\054\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\101\uffc7\102" +
    "\uffc7\103\100\001\002\000\062\002\uffff\004\uffff\005\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\022\uffff\040\uffff\047" +
    "\uffff\050\uffff\054\uffff\055\uffff\057\uffff\060\uffff\061\uffff" +
    "\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101" +
    "\uffff\102\uffff\001\002\000\134\002\uffd2\004\uffd2\005\uffd2" +
    "\007\067\010\106\011\105\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\021\076\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\110\032\074\033\101\034\070\035" +
    "\103\036\uffd2\037\uffd2\040\uffd2\043\uffd2\045\uffd2\047\uffd2" +
    "\050\uffd2\051\077\054\uffd2\055\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\101\uffd2\102\uffd2\103\100\001\002\000\036\004\023\005" +
    "\021\012\011\013\053\014\016\015\006\022\040\040\013" +
    "\047\026\050\042\055\035\061\022\101\034\102\033\001" +
    "\002\000\004\012\162\001\002\000\134\002\ufff2\004\ufff2" +
    "\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\045\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\054\ufff2\055\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\026\002\042\003\014\004\023\005\004\007" +
    "\016\010\040\012\036\015\017\016\003\017\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\156\012\036\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\014\004\023\005\155\010\040\012\036\015\017\016" +
    "\003\017\043\001\001\000\002\001\001\000\010\004\154" +
    "\012\036\015\017\001\001\000\002\001\001\000\010\004" +
    "\152\012\036\015\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\131\004\023\012" +
    "\036\015\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\065\012\036\015\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\051\004\023\011\053\012\036\014\050\015\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\056\004\023" +
    "\012\036\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\051" +
    "\004\023\011\062\012\036\015\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\130\012\036\015\017\001\001\000\010\004" +
    "\127\012\036\015\017\001\001\000\010\004\126\012\036" +
    "\015\017\001\001\000\010\004\125\012\036\015\017\001" +
    "\001\000\010\004\124\012\036\015\017\001\001\000\010" +
    "\004\123\012\036\015\017\001\001\000\010\004\122\012" +
    "\036\015\017\001\001\000\010\004\121\012\036\015\017" +
    "\001\001\000\010\004\120\012\036\015\017\001\001\000" +
    "\010\004\117\012\036\015\017\001\001\000\010\004\116" +
    "\012\036\015\017\001\001\000\002\001\001\000\010\004" +
    "\115\012\036\015\017\001\001\000\010\004\114\012\036" +
    "\015\017\001\001\000\010\004\113\012\036\015\017\001" +
    "\001\000\010\004\112\012\036\015\017\001\001\000\010" +
    "\004\111\012\036\015\017\001\001\000\010\004\110\012" +
    "\036\015\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\051\004\023\011\133\012\036\015\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\051\004" +
    "\023\011\136\012\036\015\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\051\004" +
    "\023\011\143\012\036\014\142\015\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\146\004\023\012\036\015\017\001\001\000\002\001\001" +
    "\000\012\003\150\004\023\012\036\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\160\004\023\012\036\015\017\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= LISTA 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= OPERACION_LISTA 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA ::= let id igual MATRIZ 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA ::= let id igual ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MATRIZ ::= MATRIZ coma corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MATRIZ ::= corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MATRIZ ::= corcheteA MATRIZ corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MATRIZ ::= corcheteA corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO ::= ELEMENTO coma OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CALCULAR ::= dollar calcular OP dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CALCULAR ::= calcular OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACION_LISTA ::= NOMBRE_OP MATRIZ 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACION_LISTA ::= NOMBRE_OP id 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACION_LISTA ::= id POSICION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LISTA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOMBRE_OP ::= sum 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOMBRE_OP ::= product 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOMBRE_OP ::= revers 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOMBRE_OP ::= impr 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOMBRE_OP ::= asc 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOMBRE_OP ::= desc 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NOMBRE_OP ::= par 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NOMBRE_OP ::= length 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_OP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // POSICION ::= POSICION posicion OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // POSICION ::= posicion OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP ::= E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  "(" + a.texto + ")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "+" + b.texto;
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Double.parseDouble(a.valor) + Double.parseDouble(b.valor);
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (+) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "-" + b.texto;
    try{
       // System.out.println("Menos ="+(a.valor)+","+(b.valor));
        RESULT.val = Double.parseDouble(a.valor) - Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (-) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "*" + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) * Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (*) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E div E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " / " + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) / Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (/) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " > " + b.texto;
    try{
       if( Double.parseDouble(a.valor) > Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " < " + b.texto;
    try{
       if( Double.parseDouble(a.valor) < Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " >= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) >= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>=) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " <= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) <= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<=) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E igual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " = " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " == " + b.texto;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " != " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= new Caracter();
    RESULT.valor = "true";
    RESULT.cadena = true;
    RESULT.texto = "true";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "false";
    RESULT.cadena = true;
    RESULT.texto =  "false";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " || " + b.texto +")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " %% " + b.texto +")";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = "a";
    RESULT.texto = "! " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E mod E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E sqrt E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "raiz (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            //RESULT.val = Metodo_Funcion.raiz(Double.parseDouble(a.valor),Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (r) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E pot E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("\"","");
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("'","");
    RESULT.cadena = true;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= numero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = i;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= CALCULAR 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= EXTRAS 
            {
              Caracter RESULT =null;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = "";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXTRAS ::= succ E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXTRAS ::= decc E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXTRAS ::= succ porcentaje 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXTRAS ::= decc porcentaje 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXTRAS ::= min corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXTRAS ::= max corcheteA ELEMENTO corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXTRAS ::= E concatenar E 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXTRAS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
