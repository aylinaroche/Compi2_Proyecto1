
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Haskell;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\010\010\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\011\006\000\002\011\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\010\000\002\004\010\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\034\007\012\010\026\012\006\013\017\014" +
    "\011\015\005\022\023\040\007\047\016\050\025\054\020" +
    "\055\021\061\014\001\002\000\036\002\ufffe\007\ufffe\010" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\022\ufffe\040\ufffe" +
    "\047\ufffe\050\ufffe\054\ufffe\055\ufffe\061\ufffe\001\002\000" +
    "\076\002\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\054\uffdf\055\uffdf\061\uffdf\001\002\000\004" +
    "\055\114\001\002\000\026\007\012\010\026\013\017\014" +
    "\011\015\005\022\023\040\007\047\016\050\025\061\014" +
    "\001\002\000\036\002\ufffb\007\ufffb\010\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\022\ufffb\040\ufffb\047\ufffb\050\ufffb" +
    "\054\ufffb\055\ufffb\061\ufffb\001\002\000\076\002\uffdd\007" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\043\uffdd\047\uffdd\050\uffdd\051\uffdd\054" +
    "\uffdd\055\uffdd\061\uffdd\001\002\000\004\022\106\001\002" +
    "\000\036\002\000\007\012\010\026\012\006\013\017\014" +
    "\011\015\005\022\023\040\007\047\016\050\025\054\020" +
    "\055\021\061\014\001\002\000\076\002\uffde\007\uffde\010" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\043\uffde\047\uffde\050\uffde\051\uffde\054\uffde\055" +
    "\uffde\061\uffde\001\002\000\074\002\ufff3\007\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\021\047\022\ufff3\024" +
    "\ufff3\025\046\026\037\027\044\030\033\031\045\032\041" +
    "\033\034\034\043\035\042\036\036\037\040\040\ufff3\043" +
    "\ufff3\047\ufff3\050\ufff3\051\050\054\ufff3\055\ufff3\061\ufff3" +
    "\001\002\000\076\002\uffe6\007\uffe6\010\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\043\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\061\uffe6\001" +
    "\002\000\076\002\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\043\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\054\uffdc\055\uffdc\061\uffdc\001\002" +
    "\000\004\013\073\001\002\000\026\007\012\010\026\013" +
    "\017\014\011\015\005\022\023\040\007\047\016\050\025" +
    "\061\014\001\002\000\036\002\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\022\ufffc\040\ufffc\047\ufffc" +
    "\050\ufffc\054\ufffc\055\ufffc\061\ufffc\001\002\000\026\007" +
    "\012\010\026\013\017\014\011\015\005\022\023\040\007" +
    "\047\016\050\025\061\014\001\002\000\036\002\ufffd\007" +
    "\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\022\ufffd" +
    "\040\ufffd\047\ufffd\050\ufffd\054\ufffd\055\ufffd\061\ufffd\001" +
    "\002\000\076\002\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\054\uffe5\055\uffe5\061\uffe5\001\002" +
    "\000\004\022\031\001\002\000\004\002\030\001\002\000" +
    "\004\002\001\001\002\000\026\007\012\010\026\013\017" +
    "\014\011\015\005\022\023\040\007\047\016\050\025\061" +
    "\014\001\002\000\036\021\047\024\035\025\046\026\037" +
    "\027\044\030\033\031\045\032\041\033\034\034\043\035" +
    "\042\036\036\037\040\051\050\001\002\000\026\007\012" +
    "\010\026\013\017\014\011\015\005\022\023\040\007\047" +
    "\016\050\025\061\014\001\002\000\026\007\012\010\026" +
    "\013\017\014\011\015\005\022\023\040\007\047\016\050" +
    "\025\061\014\001\002\000\026\007\012\010\026\013\017" +
    "\014\011\015\005\022\023\040\007\047\016\050\025\061" +
    "\014\001\002\000\026\007\012\010\026\013\017\014\011" +
    "\015\005\022\023\040\007\047\016\050\025\061\014\001" +
    "\002\000\026\007\012\010\026\013\017\014\011\015\005" +
    "\022\023\040\007\047\016\050\025\061\014\001\002\000" +
    "\026\007\012\010\026\013\017\014\011\015\005\022\023" +
    "\040\007\047\016\050\025\061\014\001\002\000\026\007" +
    "\012\010\026\013\017\014\011\015\005\022\023\040\007" +
    "\047\016\050\025\061\014\001\002\000\026\007\012\010" +
    "\026\013\017\014\011\015\005\022\023\040\007\047\016" +
    "\050\025\061\014\001\002\000\026\007\012\010\026\013" +
    "\017\014\011\015\005\022\023\040\007\047\016\050\025" +
    "\061\014\001\002\000\026\007\012\010\026\013\017\014" +
    "\011\015\005\022\023\040\007\047\016\050\025\061\014" +
    "\001\002\000\026\007\012\010\026\013\017\014\011\015" +
    "\005\022\023\040\007\047\016\050\025\061\014\001\002" +
    "\000\026\007\012\010\026\013\017\014\011\015\005\022" +
    "\023\040\007\047\016\050\025\061\014\001\002\000\026" +
    "\007\012\010\026\013\017\014\011\015\005\022\023\040" +
    "\007\047\016\050\025\061\014\001\002\000\026\007\012" +
    "\010\026\013\017\014\011\015\005\022\023\040\007\047" +
    "\016\050\025\061\014\001\002\000\076\002\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\043\uffe8\047\uffe8\050\uffe8\051\uffe8\054\uffe8" +
    "\055\uffe8\061\uffe8\001\002\000\076\002\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\043\uffe9\047\uffe9\050\uffe9\051\uffe9\054\uffe9\055" +
    "\uffe9\061\uffe9\001\002\000\076\002\ufff1\007\ufff1\010\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\021\047\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\044\030\033\031\045" +
    "\032\041\033\034\034\043\035\042\036\036\037\040\040" +
    "\ufff1\043\ufff1\047\ufff1\050\ufff1\051\050\054\ufff1\055\ufff1" +
    "\061\ufff1\001\002\000\076\002\uffed\007\uffed\010\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\021\047\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\042\036\uffed\037\uffed\040\uffed" +
    "\043\uffed\047\uffed\050\uffed\051\050\054\uffed\055\uffed\061" +
    "\uffed\001\002\000\076\002\uffef\007\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\021\047\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\045\032\041" +
    "\033\034\034\043\035\042\036\036\037\040\040\uffef\043" +
    "\uffef\047\uffef\050\uffef\051\050\054\uffef\055\uffef\061\uffef" +
    "\001\002\000\076\002\uffea\007\uffea\010\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\021\047\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\042\036\uffea\037\uffea\040\uffea\043\uffea" +
    "\047\uffea\050\uffea\051\050\054\uffea\055\uffea\061\uffea\001" +
    "\002\000\076\002\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\054\uffe7\055\uffe7\061\uffe7\001\002" +
    "\000\076\002\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\021\047\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\042\036\uffec\037\uffec\040\uffec\043\uffec\047\uffec" +
    "\050\uffec\051\050\054\uffec\055\uffec\061\uffec\001\002\000" +
    "\076\002\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\021\047\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\045\032\041\033\034\034\043" +
    "\035\042\036\uffe3\037\uffe3\040\uffe3\043\uffe3\047\uffe3\050" +
    "\uffe3\051\050\054\uffe3\055\uffe3\061\uffe3\001\002\000\076" +
    "\002\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\021\047\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\044\030\033\031\045\032\041\033\034\034\043\035" +
    "\042\036\036\037\040\040\ufff0\043\ufff0\047\ufff0\050\ufff0" +
    "\051\050\054\ufff0\055\ufff0\061\ufff0\001\002\000\076\002" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\021\047\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\045\032\041\033\034\034\043\035\042" +
    "\036\uffe4\037\uffe4\040\uffe4\043\uffe4\047\uffe4\050\uffe4\051" +
    "\050\054\uffe4\055\uffe4\061\uffe4\001\002\000\036\021\047" +
    "\023\065\025\046\026\037\027\044\030\033\031\045\032" +
    "\041\033\034\034\043\035\042\036\036\037\040\051\050" +
    "\001\002\000\076\002\uffe1\007\uffe1\010\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\054\uffe1\055\uffe1\061\uffe1\001" +
    "\002\000\076\002\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\021\047\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\042\036\uffeb\037\uffeb\040\uffeb\043\uffeb\047" +
    "\uffeb\050\uffeb\051\050\054\uffeb\055\uffeb\061\uffeb\001\002" +
    "\000\076\002\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\021\047\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\045\032\041\033\034\034" +
    "\043\035\042\036\036\037\040\040\uffee\043\uffee\047\uffee" +
    "\050\uffee\051\050\054\uffee\055\uffee\061\uffee\001\002\000" +
    "\036\021\047\023\071\025\046\026\037\027\044\030\033" +
    "\031\045\032\041\033\034\034\043\035\042\036\036\037" +
    "\040\051\050\001\002\000\076\002\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\043\ufff2\047\ufff2\050\ufff2\051\ufff2\054\ufff2\055\ufff2" +
    "\061\ufff2\001\002\000\042\002\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\022\ufff4\024\ufff4\040\ufff4" +
    "\043\ufff4\047\ufff4\050\ufff4\054\ufff4\055\ufff4\061\ufff4\001" +
    "\002\000\004\021\074\001\002\000\004\042\075\001\002" +
    "\000\032\007\012\010\026\012\006\013\017\014\011\015" +
    "\005\022\023\040\007\047\016\050\025\055\021\061\014" +
    "\001\002\000\006\024\ufff6\043\ufff6\001\002\000\006\024" +
    "\101\043\102\001\002\000\006\024\ufff7\043\ufff7\001\002" +
    "\000\032\007\012\010\026\012\006\013\017\014\011\015" +
    "\005\022\023\040\007\047\016\050\025\055\021\061\014" +
    "\001\002\000\036\002\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\022\ufffa\040\ufffa\047\ufffa\050\ufffa" +
    "\054\ufffa\055\ufffa\061\ufffa\001\002\000\006\024\ufff8\043" +
    "\ufff8\001\002\000\006\024\ufff9\043\ufff9\001\002\000\036" +
    "\002\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\022\uffff\040\uffff\047\uffff\050\uffff\054\uffff\055\uffff" +
    "\061\uffff\001\002\000\026\007\012\010\026\013\017\014" +
    "\011\015\005\022\023\040\007\047\016\050\025\061\014" +
    "\001\002\000\036\021\047\024\110\025\046\026\037\027" +
    "\044\030\033\031\045\032\041\033\034\034\043\035\042" +
    "\036\036\037\040\051\050\001\002\000\026\007\012\010" +
    "\026\013\017\014\011\015\005\022\023\040\007\047\016" +
    "\050\025\061\014\001\002\000\036\021\047\023\112\025" +
    "\046\026\037\027\044\030\033\031\045\032\041\033\034" +
    "\034\043\035\042\036\036\037\040\051\050\001\002\000" +
    "\076\002\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\054\uffe0\055\uffe0\061\uffe0\001\002\000\076" +
    "\002\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\021\047\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\045\032\041\033\034\034\043\035" +
    "\042\036\uffe2\037\uffe2\040\uffe2\043\uffe2\047\uffe2\050\uffe2" +
    "\051\050\054\uffe2\055\uffe2\061\uffe2\001\002\000\026\007" +
    "\012\010\026\013\017\014\011\015\005\022\023\040\007" +
    "\047\016\050\025\061\014\001\002\000\004\012\116\001" +
    "\002\000\042\002\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\022\ufff5\024\ufff5\040\ufff5\043\ufff5\047" +
    "\ufff5\050\ufff5\054\ufff5\055\ufff5\061\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\020\002\026\003\007\004\014\005\003\007" +
    "\012\010\023\011\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\007\004\014\005\104\010\023\011\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\071\004\014\001" +
    "\001\000\002\001\001\000\004\004\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\031\001\001\000\002" +
    "\001\001\000\004\004\066\001\001\000\004\004\065\001" +
    "\001\000\004\004\063\001\001\000\004\004\062\001\001" +
    "\000\004\004\061\001\001\000\004\004\060\001\001\000" +
    "\004\004\057\001\001\000\004\004\056\001\001\000\004" +
    "\004\055\001\001\000\004\004\054\001\001\000\004\004" +
    "\053\001\001\000\004\004\052\001\001\000\004\004\051" +
    "\001\001\000\004\004\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\075\004\014\011\077\012\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\102\004" +
    "\014\011\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\106\001" +
    "\001\000\002\001\001\000\004\004\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\114\004\014\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
public static String n="";      

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= LISTA 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= CALCULAR 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA ::= let id igual corcheteA ELEMENTOS corcheteC 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELEMENTOS ::= ELEMENTOS coma CALCULAR 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELEMENTOS ::= ELEMENTOS coma OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELEMENTOS ::= CALCULAR 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTOS ::= OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CALCULAR ::= dollar calcular OP dollar 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CALCULAR ::= calcular OP 
            {
              Caracter RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OP ::= E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  "(" + a.texto + ")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "+" + b.texto;
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Double.parseDouble(a.valor) + Double.parseDouble(b.valor);
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (+) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "-" + b.texto;
    try{
       // System.out.println("Menos ="+(a.valor)+","+(b.valor));
        RESULT.val = Double.parseDouble(a.valor) - Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (-) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + "*" + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) * Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (*) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E div E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " / " + b.texto;
    try{
        RESULT.val = Double.parseDouble(a.valor) / Double.parseDouble(b.valor);
        RESULT.valor = String.valueOf(RESULT.val);
        RESULT.cadena = false;
    }catch(Exception e){
        System.out.println("ERROR al operar (/) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " > " + b.texto;
    try{
       if( Double.parseDouble(a.valor) > Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " < " + b.texto;
    try{
       if( Double.parseDouble(a.valor) < Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " >= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) >= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (>=) "+e);
    }
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.texto =  a.texto + " <= " + b.texto;
    try{
       if( Double.parseDouble(a.valor) <= Double.parseDouble(b.valor)){
            RESULT.valor = "true";
       }else{
            RESULT.valor = "false";
       }
    }catch(Exception e){
        System.out.println("ERROR al operar (<=) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E igual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " = " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " == " + b.texto;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " != " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= new Caracter();
    RESULT.valor = "true";
    RESULT.cadena = true;
    RESULT.texto = "true";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= falso 
            {
              Caracter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "false";
    RESULT.cadena = true;
    RESULT.texto =  "false";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " || " + b.texto +")";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = a.valor;
    RESULT.texto =  a.texto + " %% " + b.texto +")";
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= not E 
            {
              Caracter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new Caracter();
    RESULT.valor = "a";
    RESULT.texto = "! " + b.texto;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= sqrt parentesisA E coma E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.texto = "raiz (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            //RESULT.val = Metodo_Funcion.raiz(Double.parseDouble(a.valor),Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
            RESULT.cadena = false;
        }else{
            RESULT.valor =a.valor+b.valor;
            RESULT.cadena = true;
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (r) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= pot parentesisA E coma E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT = new Caracter();
    RESULT.texto = "potencia (" + a.texto + "," + b.texto +")";
    try{
        if(a.cadena==false && b.cadena==false){
            RESULT.val = Math.pow(Double.parseDouble(a.valor), Double.parseDouble(b.valor));
            RESULT.valor = String.valueOf(RESULT.val);
           
        }else{
            RESULT.valor =a.valor+b.valor;
           
        }      
    }catch(Exception e){
        System.out.println("ERROR al operar (p) "+e);
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("\"","");
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= caracter 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n.replace("'","");
    RESULT.cadena = true;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= numero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = n;
    RESULT.texto = n;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new Caracter();
    RESULT.valor = "1";
    RESULT.texto = i;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
